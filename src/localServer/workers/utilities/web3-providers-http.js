(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
	(function (global){(function (){
	(function (factory) {
	  typeof define === 'function' && define.amd ? define(factory) :
	  factory();
	}((function () { 'use strict';
	
	  function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
		  throw new TypeError("Cannot call a class as a function");
		}
	  }
	
	  function _defineProperties(target, props) {
		for (var i = 0; i < props.length; i++) {
		  var descriptor = props[i];
		  descriptor.enumerable = descriptor.enumerable || false;
		  descriptor.configurable = true;
		  if ("value" in descriptor) descriptor.writable = true;
		  Object.defineProperty(target, descriptor.key, descriptor);
		}
	  }
	
	  function _createClass(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties(Constructor, staticProps);
		return Constructor;
	  }
	
	  function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
		  throw new TypeError("Super expression must either be null or a function");
		}
	
		subClass.prototype = Object.create(superClass && superClass.prototype, {
		  constructor: {
			value: subClass,
			writable: true,
			configurable: true
		  }
		});
		if (superClass) _setPrototypeOf(subClass, superClass);
	  }
	
	  function _getPrototypeOf(o) {
		_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
		  return o.__proto__ || Object.getPrototypeOf(o);
		};
		return _getPrototypeOf(o);
	  }
	
	  function _setPrototypeOf(o, p) {
		_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
		  o.__proto__ = p;
		  return o;
		};
	
		return _setPrototypeOf(o, p);
	  }
	
	  function _isNativeReflectConstruct() {
		if (typeof Reflect === "undefined" || !Reflect.construct) return false;
		if (Reflect.construct.sham) return false;
		if (typeof Proxy === "function") return true;
	
		try {
		  Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
		  return true;
		} catch (e) {
		  return false;
		}
	  }
	
	  function _assertThisInitialized(self) {
		if (self === void 0) {
		  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}
	
		return self;
	  }
	
	  function _possibleConstructorReturn(self, call) {
		if (call && (typeof call === "object" || typeof call === "function")) {
		  return call;
		}
	
		return _assertThisInitialized(self);
	  }
	
	  function _createSuper(Derived) {
		var hasNativeReflectConstruct = _isNativeReflectConstruct();
	
		return function _createSuperInternal() {
		  var Super = _getPrototypeOf(Derived),
			  result;
	
		  if (hasNativeReflectConstruct) {
			var NewTarget = _getPrototypeOf(this).constructor;
	
			result = Reflect.construct(Super, arguments, NewTarget);
		  } else {
			result = Super.apply(this, arguments);
		  }
	
		  return _possibleConstructorReturn(this, result);
		};
	  }
	
	  function _superPropBase(object, property) {
		while (!Object.prototype.hasOwnProperty.call(object, property)) {
		  object = _getPrototypeOf(object);
		  if (object === null) break;
		}
	
		return object;
	  }
	
	  function _get(target, property, receiver) {
		if (typeof Reflect !== "undefined" && Reflect.get) {
		  _get = Reflect.get;
		} else {
		  _get = function _get(target, property, receiver) {
			var base = _superPropBase(target, property);
	
			if (!base) return;
			var desc = Object.getOwnPropertyDescriptor(base, property);
	
			if (desc.get) {
			  return desc.get.call(receiver);
			}
	
			return desc.value;
		  };
		}
	
		return _get(target, property, receiver || target);
	  }
	
	  var Emitter = /*#__PURE__*/function () {
		function Emitter() {
		  _classCallCheck(this, Emitter);
	
		  Object.defineProperty(this, 'listeners', {
			value: {},
			writable: true,
			configurable: true
		  });
		}
	
		_createClass(Emitter, [{
		  key: "addEventListener",
		  value: function addEventListener(type, callback, options) {
			if (!(type in this.listeners)) {
			  this.listeners[type] = [];
			}
	
			this.listeners[type].push({
			  callback: callback,
			  options: options
			});
		  }
		}, {
		  key: "removeEventListener",
		  value: function removeEventListener(type, callback) {
			if (!(type in this.listeners)) {
			  return;
			}
	
			var stack = this.listeners[type];
	
			for (var i = 0, l = stack.length; i < l; i++) {
			  if (stack[i].callback === callback) {
				stack.splice(i, 1);
				return;
			  }
			}
		  }
		}, {
		  key: "dispatchEvent",
		  value: function dispatchEvent(event) {
			if (!(event.type in this.listeners)) {
			  return;
			}
	
			var stack = this.listeners[event.type];
			var stackToCall = stack.slice();
	
			for (var i = 0, l = stackToCall.length; i < l; i++) {
			  var listener = stackToCall[i];
	
			  try {
				listener.callback.call(this, event);
			  } catch (e) {
				Promise.resolve().then(function () {
				  throw e;
				});
			  }
	
			  if (listener.options && listener.options.once) {
				this.removeEventListener(event.type, listener.callback);
			  }
			}
	
			return !event.defaultPrevented;
		  }
		}]);
	
		return Emitter;
	  }();
	
	  var AbortSignal = /*#__PURE__*/function (_Emitter) {
		_inherits(AbortSignal, _Emitter);
	
		var _super = _createSuper(AbortSignal);
	
		function AbortSignal() {
		  var _this;
	
		  _classCallCheck(this, AbortSignal);
	
		  _this = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
		  // constructor has failed to run, then "this.listeners" will still be undefined and then we call
		  // the parent constructor directly instead as a workaround. For general details, see babel bug:
		  // https://github.com/babel/babel/issues/3041
		  // This hack was added as a fix for the issue described here:
		  // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042
	
		  if (!_this.listeners) {
			Emitter.call(_assertThisInitialized(_this));
		  } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
		  // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl
	
	
		  Object.defineProperty(_assertThisInitialized(_this), 'aborted', {
			value: false,
			writable: true,
			configurable: true
		  });
		  Object.defineProperty(_assertThisInitialized(_this), 'onabort', {
			value: null,
			writable: true,
			configurable: true
		  });
		  return _this;
		}
	
		_createClass(AbortSignal, [{
		  key: "toString",
		  value: function toString() {
			return '[object AbortSignal]';
		  }
		}, {
		  key: "dispatchEvent",
		  value: function dispatchEvent(event) {
			if (event.type === 'abort') {
			  this.aborted = true;
	
			  if (typeof this.onabort === 'function') {
				this.onabort.call(this, event);
			  }
			}
	
			_get(_getPrototypeOf(AbortSignal.prototype), "dispatchEvent", this).call(this, event);
		  }
		}]);
	
		return AbortSignal;
	  }(Emitter);
	  var AbortController = /*#__PURE__*/function () {
		function AbortController() {
		  _classCallCheck(this, AbortController);
	
		  // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
		  // we want Object.keys(new AbortController()) to be [] for compat with the native impl
		  Object.defineProperty(this, 'signal', {
			value: new AbortSignal(),
			writable: true,
			configurable: true
		  });
		}
	
		_createClass(AbortController, [{
		  key: "abort",
		  value: function abort() {
			var event;
	
			try {
			  event = new Event('abort');
			} catch (e) {
			  if (typeof document !== 'undefined') {
				if (!document.createEvent) {
				  // For Internet Explorer 8:
				  event = document.createEventObject();
				  event.type = 'abort';
				} else {
				  // For Internet Explorer 11:
				  event = document.createEvent('Event');
				  event.initEvent('abort', false, false);
				}
			  } else {
				// Fallback where document isn't available:
				event = {
				  type: 'abort',
				  bubbles: false,
				  cancelable: false
				};
			  }
			}
	
			this.signal.dispatchEvent(event);
		  }
		}, {
		  key: "toString",
		  value: function toString() {
			return '[object AbortController]';
		  }
		}]);
	
		return AbortController;
	  }();
	
	  if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
		// These are necessary to make sure that we get correct output for:
		// Object.prototype.toString.call(new AbortController())
		AbortController.prototype[Symbol.toStringTag] = 'AbortController';
		AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';
	  }
	
	  function polyfillNeeded(self) {
		if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
		  console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');
		  return true;
		} // Note that the "unfetch" minimal fetch polyfill defines fetch() without
		// defining window.Request, and this polyfill need to work on top of unfetch
		// so the below feature detection needs the !self.AbortController part.
		// The Request.prototype check is also needed because Safari versions 11.1.2
		// up to and including 12.1.x has a window.AbortController present but still
		// does NOT correctly implement abortable fetch:
		// https://bugs.webkit.org/show_bug.cgi?id=174980#c2
	
	
		return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;
	  }
	
	  /**
	   * Note: the "fetch.Request" default value is available for fetch imported from
	   * the "node-fetch" package and not in browsers. This is OK since browsers
	   * will be importing umd-polyfill.js from that path "self" is passed the
	   * decorator so the default value will not be used (because browsers that define
	   * fetch also has Request). One quirky setup where self.fetch exists but
	   * self.Request does not is when the "unfetch" minimal fetch polyfill is used
	   * on top of IE11; for this case the browser will try to use the fetch.Request
	   * default value which in turn will be undefined but then then "if (Request)"
	   * will ensure that you get a patched fetch but still no Request (as expected).
	   * @param {fetch, Request = fetch.Request}
	   * @returns {fetch: abortableFetch, Request: AbortableRequest}
	   */
	
	  function abortableFetchDecorator(patchTargets) {
		if ('function' === typeof patchTargets) {
		  patchTargets = {
			fetch: patchTargets
		  };
		}
	
		var _patchTargets = patchTargets,
			fetch = _patchTargets.fetch,
			_patchTargets$Request = _patchTargets.Request,
			NativeRequest = _patchTargets$Request === void 0 ? fetch.Request : _patchTargets$Request,
			NativeAbortController = _patchTargets.AbortController,
			_patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,
			__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;
	
		if (!polyfillNeeded({
		  fetch: fetch,
		  Request: NativeRequest,
		  AbortController: NativeAbortController,
		  __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL
		})) {
		  return {
			fetch: fetch,
			Request: Request
		  };
		}
	
		var Request = NativeRequest; // Note that the "unfetch" minimal fetch polyfill defines fetch() without
		// defining window.Request, and this polyfill need to work on top of unfetch
		// hence we only patch it if it's available. Also we don't patch it if signal
		// is already available on the Request prototype because in this case support
		// is present and the patching below can cause a crash since it assigns to
		// request.signal which is technically a read-only property. This latter error
		// happens when you run the main5.js node-fetch example in the repo
		// "abortcontroller-polyfill-examples". The exact error is:
		//   request.signal = init.signal;
		//   ^
		// TypeError: Cannot set property signal of #<Request> which has only a getter
	
		if (Request && !Request.prototype.hasOwnProperty('signal') || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
		  Request = function Request(input, init) {
			var signal;
	
			if (init && init.signal) {
			  signal = init.signal; // Never pass init.signal to the native Request implementation when the polyfill has
			  // been installed because if we're running on top of a browser with a
			  // working native AbortController (i.e. the polyfill was installed due to
			  // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
			  // fake AbortSignal to the native fetch will trigger:
			  // TypeError: Failed to construct 'Request': member signal is not of type AbortSignal.
	
			  delete init.signal;
			}
	
			var request = new NativeRequest(input, init);
	
			if (signal) {
			  Object.defineProperty(request, 'signal', {
				writable: false,
				enumerable: false,
				configurable: true,
				value: signal
			  });
			}
	
			return request;
		  };
	
		  Request.prototype = NativeRequest.prototype;
		}
	
		var realFetch = fetch;
	
		var abortableFetch = function abortableFetch(input, init) {
		  var signal = Request && Request.prototype.isPrototypeOf(input) ? input.signal : init ? init.signal : undefined;
	
		  if (signal) {
			var abortError;
	
			try {
			  abortError = new DOMException('Aborted', 'AbortError');
			} catch (err) {
			  // IE 11 does not support calling the DOMException constructor, use a
			  // regular error object on it instead.
			  abortError = new Error('Aborted');
			  abortError.name = 'AbortError';
			} // Return early if already aborted, thus avoiding making an HTTP request
	
	
			if (signal.aborted) {
			  return Promise.reject(abortError);
			} // Turn an event into a promise, reject it once `abort` is dispatched
	
	
			var cancellation = new Promise(function (_, reject) {
			  signal.addEventListener('abort', function () {
				return reject(abortError);
			  }, {
				once: true
			  });
			});
	
			if (init && init.signal) {
			  // Never pass .signal to the native implementation when the polyfill has
			  // been installed because if we're running on top of a browser with a
			  // working native AbortController (i.e. the polyfill was installed due to
			  // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
			  // fake AbortSignal to the native fetch will trigger:
			  // TypeError: Failed to execute 'fetch' on 'Window': member signal is not of type AbortSignal.
			  delete init.signal;
			} // Return the fastest promise (don't need to wait for request to finish)
	
	
			return Promise.race([cancellation, realFetch(input, init)]);
		  }
	
		  return realFetch(input, init);
		};
	
		return {
		  fetch: abortableFetch,
		  Request: Request
		};
	  }
	
	  (function (self) {
	
		if (!polyfillNeeded(self)) {
		  return;
		}
	
		if (!self.fetch) {
		  console.warn('fetch() is not available, cannot install abortcontroller-polyfill');
		  return;
		}
	
		var _abortableFetch = abortableFetchDecorator(self),
			fetch = _abortableFetch.fetch,
			Request = _abortableFetch.Request;
	
		self.fetch = fetch;
		self.Request = Request;
		Object.defineProperty(self, 'AbortController', {
		  writable: true,
		  enumerable: false,
		  configurable: true,
		  value: AbortController
		});
		Object.defineProperty(self, 'AbortSignal', {
		  writable: true,
		  enumerable: false,
		  configurable: true,
		  value: AbortSignal
		});
	  })(typeof self !== 'undefined' ? self : global);
	
	})));
	
	}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],2:[function(require,module,exports){
	(function (module, exports) {
	  'use strict';
	
	  // Utils
	  function assert (val, msg) {
		if (!val) throw new Error(msg || 'Assertion failed');
	  }
	
	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
		ctor.super_ = superCtor;
		var TempCtor = function () {};
		TempCtor.prototype = superCtor.prototype;
		ctor.prototype = new TempCtor();
		ctor.prototype.constructor = ctor;
	  }
	
	  // BN
	
	  function BN (number, base, endian) {
		if (BN.isBN(number)) {
		  return number;
		}
	
		this.negative = 0;
		this.words = null;
		this.length = 0;
	
		// Reduction context
		this.red = null;
	
		if (number !== null) {
		  if (base === 'le' || base === 'be') {
			endian = base;
			base = 10;
		  }
	
		  this._init(number || 0, base || 10, endian || 'be');
		}
	  }
	  if (typeof module === 'object') {
		module.exports = BN;
	  } else {
		exports.BN = BN;
	  }
	
	  BN.BN = BN;
	  BN.wordSize = 26;
	
	  var Buffer;
	  try {
		if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
		  Buffer = window.Buffer;
		} else {
		  Buffer = require('buffer').Buffer;
		}
	  } catch (e) {
	  }
	
	  BN.isBN = function isBN (num) {
		if (num instanceof BN) {
		  return true;
		}
	
		return num !== null && typeof num === 'object' &&
		  num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };
	
	  BN.max = function max (left, right) {
		if (left.cmp(right) > 0) return left;
		return right;
	  };
	
	  BN.min = function min (left, right) {
		if (left.cmp(right) < 0) return left;
		return right;
	  };
	
	  BN.prototype._init = function init (number, base, endian) {
		if (typeof number === 'number') {
		  return this._initNumber(number, base, endian);
		}
	
		if (typeof number === 'object') {
		  return this._initArray(number, base, endian);
		}
	
		if (base === 'hex') {
		  base = 16;
		}
		assert(base === (base | 0) && base >= 2 && base <= 36);
	
		number = number.toString().replace(/\s+/g, '');
		var start = 0;
		if (number[0] === '-') {
		  start++;
		  this.negative = 1;
		}
	
		if (start < number.length) {
		  if (base === 16) {
			this._parseHex(number, start, endian);
		  } else {
			this._parseBase(number, base, start);
			if (endian === 'le') {
			  this._initArray(this.toArray(), base, endian);
			}
		  }
		}
	  };
	
	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
		if (number < 0) {
		  this.negative = 1;
		  number = -number;
		}
		if (number < 0x4000000) {
		  this.words = [ number & 0x3ffffff ];
		  this.length = 1;
		} else if (number < 0x10000000000000) {
		  this.words = [
			number & 0x3ffffff,
			(number / 0x4000000) & 0x3ffffff
		  ];
		  this.length = 2;
		} else {
		  assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		  this.words = [
			number & 0x3ffffff,
			(number / 0x4000000) & 0x3ffffff,
			1
		  ];
		  this.length = 3;
		}
	
		if (endian !== 'le') return;
	
		// Reverse the bytes
		this._initArray(this.toArray(), base, endian);
	  };
	
	  BN.prototype._initArray = function _initArray (number, base, endian) {
		// Perhaps a Uint8Array
		assert(typeof number.length === 'number');
		if (number.length <= 0) {
		  this.words = [ 0 ];
		  this.length = 1;
		  return this;
		}
	
		this.length = Math.ceil(number.length / 3);
		this.words = new Array(this.length);
		for (var i = 0; i < this.length; i++) {
		  this.words[i] = 0;
		}
	
		var j, w;
		var off = 0;
		if (endian === 'be') {
		  for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
			w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
			this.words[j] |= (w << off) & 0x3ffffff;
			this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
			off += 24;
			if (off >= 26) {
			  off -= 26;
			  j++;
			}
		  }
		} else if (endian === 'le') {
		  for (i = 0, j = 0; i < number.length; i += 3) {
			w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
			this.words[j] |= (w << off) & 0x3ffffff;
			this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
			off += 24;
			if (off >= 26) {
			  off -= 26;
			  j++;
			}
		  }
		}
		return this.strip();
	  };
	
	  function parseHex4Bits (string, index) {
		var c = string.charCodeAt(index);
		// 'A' - 'F'
		if (c >= 65 && c <= 70) {
		  return c - 55;
		// 'a' - 'f'
		} else if (c >= 97 && c <= 102) {
		  return c - 87;
		// '0' - '9'
		} else {
		  return (c - 48) & 0xf;
		}
	  }
	
	  function parseHexByte (string, lowerBound, index) {
		var r = parseHex4Bits(string, index);
		if (index - 1 >= lowerBound) {
		  r |= parseHex4Bits(string, index - 1) << 4;
		}
		return r;
	  }
	
	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
		// Create possibly bigger array to ensure that it fits the number
		this.length = Math.ceil((number.length - start) / 6);
		this.words = new Array(this.length);
		for (var i = 0; i < this.length; i++) {
		  this.words[i] = 0;
		}
	
		// 24-bits chunks
		var off = 0;
		var j = 0;
	
		var w;
		if (endian === 'be') {
		  for (i = number.length - 1; i >= start; i -= 2) {
			w = parseHexByte(number, start, i) << off;
			this.words[j] |= w & 0x3ffffff;
			if (off >= 18) {
			  off -= 18;
			  j += 1;
			  this.words[j] |= w >>> 26;
			} else {
			  off += 8;
			}
		  }
		} else {
		  var parseLength = number.length - start;
		  for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
			w = parseHexByte(number, start, i) << off;
			this.words[j] |= w & 0x3ffffff;
			if (off >= 18) {
			  off -= 18;
			  j += 1;
			  this.words[j] |= w >>> 26;
			} else {
			  off += 8;
			}
		  }
		}
	
		this.strip();
	  };
	
	  function parseBase (str, start, end, mul) {
		var r = 0;
		var len = Math.min(str.length, end);
		for (var i = start; i < len; i++) {
		  var c = str.charCodeAt(i) - 48;
	
		  r *= mul;
	
		  // 'a'
		  if (c >= 49) {
			r += c - 49 + 0xa;
	
		  // 'A'
		  } else if (c >= 17) {
			r += c - 17 + 0xa;
	
		  // '0' - '9'
		  } else {
			r += c;
		  }
		}
		return r;
	  }
	
	  BN.prototype._parseBase = function _parseBase (number, base, start) {
		// Initialize as zero
		this.words = [ 0 ];
		this.length = 1;
	
		// Find length of limb in base
		for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		  limbLen++;
		}
		limbLen--;
		limbPow = (limbPow / base) | 0;
	
		var total = number.length - start;
		var mod = total % limbLen;
		var end = Math.min(total, total - mod) + start;
	
		var word = 0;
		for (var i = start; i < end; i += limbLen) {
		  word = parseBase(number, i, i + limbLen, base);
	
		  this.imuln(limbPow);
		  if (this.words[0] + word < 0x4000000) {
			this.words[0] += word;
		  } else {
			this._iaddn(word);
		  }
		}
	
		if (mod !== 0) {
		  var pow = 1;
		  word = parseBase(number, i, number.length, base);
	
		  for (i = 0; i < mod; i++) {
			pow *= base;
		  }
	
		  this.imuln(pow);
		  if (this.words[0] + word < 0x4000000) {
			this.words[0] += word;
		  } else {
			this._iaddn(word);
		  }
		}
	
		this.strip();
	  };
	
	  BN.prototype.copy = function copy (dest) {
		dest.words = new Array(this.length);
		for (var i = 0; i < this.length; i++) {
		  dest.words[i] = this.words[i];
		}
		dest.length = this.length;
		dest.negative = this.negative;
		dest.red = this.red;
	  };
	
	  BN.prototype.clone = function clone () {
		var r = new BN(null);
		this.copy(r);
		return r;
	  };
	
	  BN.prototype._expand = function _expand (size) {
		while (this.length < size) {
		  this.words[this.length++] = 0;
		}
		return this;
	  };
	
	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
		while (this.length > 1 && this.words[this.length - 1] === 0) {
		  this.length--;
		}
		return this._normSign();
	  };
	
	  BN.prototype._normSign = function _normSign () {
		// -0 = 0
		if (this.length === 1 && this.words[0] === 0) {
		  this.negative = 0;
		}
		return this;
	  };
	
	  BN.prototype.inspect = function inspect () {
		return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };
	
	  /*
	
	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];
	
	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
		zeros[i] = s;
		s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
		var groupSize = 0;
		var groupBase = 1;
		while (groupBase < (1 << BN.wordSize) / base) {
		  groupBase *= base;
		  groupSize += 1;
		}
		groupSizes[base] = groupSize;
		groupBases[base] = groupBase;
	  }
	
	  */
	
	  var zeros = [
		'',
		'0',
		'00',
		'000',
		'0000',
		'00000',
		'000000',
		'0000000',
		'00000000',
		'000000000',
		'0000000000',
		'00000000000',
		'000000000000',
		'0000000000000',
		'00000000000000',
		'000000000000000',
		'0000000000000000',
		'00000000000000000',
		'000000000000000000',
		'0000000000000000000',
		'00000000000000000000',
		'000000000000000000000',
		'0000000000000000000000',
		'00000000000000000000000',
		'000000000000000000000000',
		'0000000000000000000000000'
	  ];
	
	  var groupSizes = [
		0, 0,
		25, 16, 12, 11, 10, 9, 8,
		8, 7, 7, 7, 7, 6, 6,
		6, 6, 6, 6, 6, 5, 5,
		5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5
	  ];
	
	  var groupBases = [
		0, 0,
		33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
		43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
		16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
		6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
		24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];
	
	  BN.prototype.toString = function toString (base, padding) {
		base = base || 10;
		padding = padding | 0 || 1;
	
		var out;
		if (base === 16 || base === 'hex') {
		  out = '';
		  var off = 0;
		  var carry = 0;
		  for (var i = 0; i < this.length; i++) {
			var w = this.words[i];
			var word = (((w << off) | carry) & 0xffffff).toString(16);
			carry = (w >>> (24 - off)) & 0xffffff;
			if (carry !== 0 || i !== this.length - 1) {
			  out = zeros[6 - word.length] + word + out;
			} else {
			  out = word + out;
			}
			off += 2;
			if (off >= 26) {
			  off -= 26;
			  i--;
			}
		  }
		  if (carry !== 0) {
			out = carry.toString(16) + out;
		  }
		  while (out.length % padding !== 0) {
			out = '0' + out;
		  }
		  if (this.negative !== 0) {
			out = '-' + out;
		  }
		  return out;
		}
	
		if (base === (base | 0) && base >= 2 && base <= 36) {
		  // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		  var groupSize = groupSizes[base];
		  // var groupBase = Math.pow(base, groupSize);
		  var groupBase = groupBases[base];
		  out = '';
		  var c = this.clone();
		  c.negative = 0;
		  while (!c.isZero()) {
			var r = c.modn(groupBase).toString(base);
			c = c.idivn(groupBase);
	
			if (!c.isZero()) {
			  out = zeros[groupSize - r.length] + r + out;
			} else {
			  out = r + out;
			}
		  }
		  if (this.isZero()) {
			out = '0' + out;
		  }
		  while (out.length % padding !== 0) {
			out = '0' + out;
		  }
		  if (this.negative !== 0) {
			out = '-' + out;
		  }
		  return out;
		}
	
		assert(false, 'Base should be between 2 and 36');
	  };
	
	  BN.prototype.toNumber = function toNumber () {
		var ret = this.words[0];
		if (this.length === 2) {
		  ret += this.words[1] * 0x4000000;
		} else if (this.length === 3 && this.words[2] === 0x01) {
		  // NOTE: at this stage it is known that the top bit is set
		  ret += 0x10000000000000 + (this.words[1] * 0x4000000);
		} else if (this.length > 2) {
		  assert(false, 'Number can only safely store up to 53 bits');
		}
		return (this.negative !== 0) ? -ret : ret;
	  };
	
	  BN.prototype.toJSON = function toJSON () {
		return this.toString(16);
	  };
	
	  BN.prototype.toBuffer = function toBuffer (endian, length) {
		assert(typeof Buffer !== 'undefined');
		return this.toArrayLike(Buffer, endian, length);
	  };
	
	  BN.prototype.toArray = function toArray (endian, length) {
		return this.toArrayLike(Array, endian, length);
	  };
	
	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
		var byteLength = this.byteLength();
		var reqLength = length || Math.max(1, byteLength);
		assert(byteLength <= reqLength, 'byte array longer than desired length');
		assert(reqLength > 0, 'Requested array length <= 0');
	
		this.strip();
		var littleEndian = endian === 'le';
		var res = new ArrayType(reqLength);
	
		var b, i;
		var q = this.clone();
		if (!littleEndian) {
		  // Assume big-endian
		  for (i = 0; i < reqLength - byteLength; i++) {
			res[i] = 0;
		  }
	
		  for (i = 0; !q.isZero(); i++) {
			b = q.andln(0xff);
			q.iushrn(8);
	
			res[reqLength - i - 1] = b;
		  }
		} else {
		  for (i = 0; !q.isZero(); i++) {
			b = q.andln(0xff);
			q.iushrn(8);
	
			res[i] = b;
		  }
	
		  for (; i < reqLength; i++) {
			res[i] = 0;
		  }
		}
	
		return res;
	  };
	
	  if (Math.clz32) {
		BN.prototype._countBits = function _countBits (w) {
		  return 32 - Math.clz32(w);
		};
	  } else {
		BN.prototype._countBits = function _countBits (w) {
		  var t = w;
		  var r = 0;
		  if (t >= 0x1000) {
			r += 13;
			t >>>= 13;
		  }
		  if (t >= 0x40) {
			r += 7;
			t >>>= 7;
		  }
		  if (t >= 0x8) {
			r += 4;
			t >>>= 4;
		  }
		  if (t >= 0x02) {
			r += 2;
			t >>>= 2;
		  }
		  return r + t;
		};
	  }
	
	  BN.prototype._zeroBits = function _zeroBits (w) {
		// Short-cut
		if (w === 0) return 26;
	
		var t = w;
		var r = 0;
		if ((t & 0x1fff) === 0) {
		  r += 13;
		  t >>>= 13;
		}
		if ((t & 0x7f) === 0) {
		  r += 7;
		  t >>>= 7;
		}
		if ((t & 0xf) === 0) {
		  r += 4;
		  t >>>= 4;
		}
		if ((t & 0x3) === 0) {
		  r += 2;
		  t >>>= 2;
		}
		if ((t & 0x1) === 0) {
		  r++;
		}
		return r;
	  };
	
	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
		var w = this.words[this.length - 1];
		var hi = this._countBits(w);
		return (this.length - 1) * 26 + hi;
	  };
	
	  function toBitArray (num) {
		var w = new Array(num.bitLength());
	
		for (var bit = 0; bit < w.length; bit++) {
		  var off = (bit / 26) | 0;
		  var wbit = bit % 26;
	
		  w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
		}
	
		return w;
	  }
	
	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
		if (this.isZero()) return 0;
	
		var r = 0;
		for (var i = 0; i < this.length; i++) {
		  var b = this._zeroBits(this.words[i]);
		  r += b;
		  if (b !== 26) break;
		}
		return r;
	  };
	
	  BN.prototype.byteLength = function byteLength () {
		return Math.ceil(this.bitLength() / 8);
	  };
	
	  BN.prototype.toTwos = function toTwos (width) {
		if (this.negative !== 0) {
		  return this.abs().inotn(width).iaddn(1);
		}
		return this.clone();
	  };
	
	  BN.prototype.fromTwos = function fromTwos (width) {
		if (this.testn(width - 1)) {
		  return this.notn(width).iaddn(1).ineg();
		}
		return this.clone();
	  };
	
	  BN.prototype.isNeg = function isNeg () {
		return this.negative !== 0;
	  };
	
	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
		return this.clone().ineg();
	  };
	
	  BN.prototype.ineg = function ineg () {
		if (!this.isZero()) {
		  this.negative ^= 1;
		}
	
		return this;
	  };
	
	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
		while (this.length < num.length) {
		  this.words[this.length++] = 0;
		}
	
		for (var i = 0; i < num.length; i++) {
		  this.words[i] = this.words[i] | num.words[i];
		}
	
		return this.strip();
	  };
	
	  BN.prototype.ior = function ior (num) {
		assert((this.negative | num.negative) === 0);
		return this.iuor(num);
	  };
	
	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
		if (this.length > num.length) return this.clone().ior(num);
		return num.clone().ior(this);
	  };
	
	  BN.prototype.uor = function uor (num) {
		if (this.length > num.length) return this.clone().iuor(num);
		return num.clone().iuor(this);
	  };
	
	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
		// b = min-length(num, this)
		var b;
		if (this.length > num.length) {
		  b = num;
		} else {
		  b = this;
		}
	
		for (var i = 0; i < b.length; i++) {
		  this.words[i] = this.words[i] & num.words[i];
		}
	
		this.length = b.length;
	
		return this.strip();
	  };
	
	  BN.prototype.iand = function iand (num) {
		assert((this.negative | num.negative) === 0);
		return this.iuand(num);
	  };
	
	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
		if (this.length > num.length) return this.clone().iand(num);
		return num.clone().iand(this);
	  };
	
	  BN.prototype.uand = function uand (num) {
		if (this.length > num.length) return this.clone().iuand(num);
		return num.clone().iuand(this);
	  };
	
	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
		// a.length > b.length
		var a;
		var b;
		if (this.length > num.length) {
		  a = this;
		  b = num;
		} else {
		  a = num;
		  b = this;
		}
	
		for (var i = 0; i < b.length; i++) {
		  this.words[i] = a.words[i] ^ b.words[i];
		}
	
		if (this !== a) {
		  for (; i < a.length; i++) {
			this.words[i] = a.words[i];
		  }
		}
	
		this.length = a.length;
	
		return this.strip();
	  };
	
	  BN.prototype.ixor = function ixor (num) {
		assert((this.negative | num.negative) === 0);
		return this.iuxor(num);
	  };
	
	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
		if (this.length > num.length) return this.clone().ixor(num);
		return num.clone().ixor(this);
	  };
	
	  BN.prototype.uxor = function uxor (num) {
		if (this.length > num.length) return this.clone().iuxor(num);
		return num.clone().iuxor(this);
	  };
	
	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
		assert(typeof width === 'number' && width >= 0);
	
		var bytesNeeded = Math.ceil(width / 26) | 0;
		var bitsLeft = width % 26;
	
		// Extend the buffer with leading zeroes
		this._expand(bytesNeeded);
	
		if (bitsLeft > 0) {
		  bytesNeeded--;
		}
	
		// Handle complete words
		for (var i = 0; i < bytesNeeded; i++) {
		  this.words[i] = ~this.words[i] & 0x3ffffff;
		}
	
		// Handle the residue
		if (bitsLeft > 0) {
		  this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
		}
	
		// And remove leading zeroes
		return this.strip();
	  };
	
	  BN.prototype.notn = function notn (width) {
		return this.clone().inotn(width);
	  };
	
	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
		assert(typeof bit === 'number' && bit >= 0);
	
		var off = (bit / 26) | 0;
		var wbit = bit % 26;
	
		this._expand(off + 1);
	
		if (val) {
		  this.words[off] = this.words[off] | (1 << wbit);
		} else {
		  this.words[off] = this.words[off] & ~(1 << wbit);
		}
	
		return this.strip();
	  };
	
	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
		var r;
	
		// negative + positive
		if (this.negative !== 0 && num.negative === 0) {
		  this.negative = 0;
		  r = this.isub(num);
		  this.negative ^= 1;
		  return this._normSign();
	
		// positive + negative
		} else if (this.negative === 0 && num.negative !== 0) {
		  num.negative = 0;
		  r = this.isub(num);
		  num.negative = 1;
		  return r._normSign();
		}
	
		// a.length > b.length
		var a, b;
		if (this.length > num.length) {
		  a = this;
		  b = num;
		} else {
		  a = num;
		  b = this;
		}
	
		var carry = 0;
		for (var i = 0; i < b.length; i++) {
		  r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		  this.words[i] = r & 0x3ffffff;
		  carry = r >>> 26;
		}
		for (; carry !== 0 && i < a.length; i++) {
		  r = (a.words[i] | 0) + carry;
		  this.words[i] = r & 0x3ffffff;
		  carry = r >>> 26;
		}
	
		this.length = a.length;
		if (carry !== 0) {
		  this.words[this.length] = carry;
		  this.length++;
		// Copy the rest of the words
		} else if (a !== this) {
		  for (; i < a.length; i++) {
			this.words[i] = a.words[i];
		  }
		}
	
		return this;
	  };
	
	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
		var res;
		if (num.negative !== 0 && this.negative === 0) {
		  num.negative = 0;
		  res = this.sub(num);
		  num.negative ^= 1;
		  return res;
		} else if (num.negative === 0 && this.negative !== 0) {
		  this.negative = 0;
		  res = num.sub(this);
		  this.negative = 1;
		  return res;
		}
	
		if (this.length > num.length) return this.clone().iadd(num);
	
		return num.clone().iadd(this);
	  };
	
	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
		// this - (-num) = this + num
		if (num.negative !== 0) {
		  num.negative = 0;
		  var r = this.iadd(num);
		  num.negative = 1;
		  return r._normSign();
	
		// -this - num = -(this + num)
		} else if (this.negative !== 0) {
		  this.negative = 0;
		  this.iadd(num);
		  this.negative = 1;
		  return this._normSign();
		}
	
		// At this point both numbers are positive
		var cmp = this.cmp(num);
	
		// Optimization - zeroify
		if (cmp === 0) {
		  this.negative = 0;
		  this.length = 1;
		  this.words[0] = 0;
		  return this;
		}
	
		// a > b
		var a, b;
		if (cmp > 0) {
		  a = this;
		  b = num;
		} else {
		  a = num;
		  b = this;
		}
	
		var carry = 0;
		for (var i = 0; i < b.length; i++) {
		  r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		  carry = r >> 26;
		  this.words[i] = r & 0x3ffffff;
		}
		for (; carry !== 0 && i < a.length; i++) {
		  r = (a.words[i] | 0) + carry;
		  carry = r >> 26;
		  this.words[i] = r & 0x3ffffff;
		}
	
		// Copy rest of the words
		if (carry === 0 && i < a.length && a !== this) {
		  for (; i < a.length; i++) {
			this.words[i] = a.words[i];
		  }
		}
	
		this.length = Math.max(this.length, i);
	
		if (a !== this) {
		  this.negative = 1;
		}
	
		return this.strip();
	  };
	
	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
		return this.clone().isub(num);
	  };
	
	  function smallMulTo (self, num, out) {
		out.negative = num.negative ^ self.negative;
		var len = (self.length + num.length) | 0;
		out.length = len;
		len = (len - 1) | 0;
	
		// Peel one iteration (compiler can't do it, because of code complexity)
		var a = self.words[0] | 0;
		var b = num.words[0] | 0;
		var r = a * b;
	
		var lo = r & 0x3ffffff;
		var carry = (r / 0x4000000) | 0;
		out.words[0] = lo;
	
		for (var k = 1; k < len; k++) {
		  // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		  // note that ncarry could be >= 0x3ffffff
		  var ncarry = carry >>> 26;
		  var rword = carry & 0x3ffffff;
		  var maxJ = Math.min(k, num.length - 1);
		  for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
			var i = (k - j) | 0;
			a = self.words[i] | 0;
			b = num.words[j] | 0;
			r = a * b + rword;
			ncarry += (r / 0x4000000) | 0;
			rword = r & 0x3ffffff;
		  }
		  out.words[k] = rword | 0;
		  carry = ncarry | 0;
		}
		if (carry !== 0) {
		  out.words[k] = carry | 0;
		} else {
		  out.length--;
		}
	
		return out.strip();
	  }
	
	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
		var a = self.words;
		var b = num.words;
		var o = out.words;
		var c = 0;
		var lo;
		var mid;
		var hi;
		var a0 = a[0] | 0;
		var al0 = a0 & 0x1fff;
		var ah0 = a0 >>> 13;
		var a1 = a[1] | 0;
		var al1 = a1 & 0x1fff;
		var ah1 = a1 >>> 13;
		var a2 = a[2] | 0;
		var al2 = a2 & 0x1fff;
		var ah2 = a2 >>> 13;
		var a3 = a[3] | 0;
		var al3 = a3 & 0x1fff;
		var ah3 = a3 >>> 13;
		var a4 = a[4] | 0;
		var al4 = a4 & 0x1fff;
		var ah4 = a4 >>> 13;
		var a5 = a[5] | 0;
		var al5 = a5 & 0x1fff;
		var ah5 = a5 >>> 13;
		var a6 = a[6] | 0;
		var al6 = a6 & 0x1fff;
		var ah6 = a6 >>> 13;
		var a7 = a[7] | 0;
		var al7 = a7 & 0x1fff;
		var ah7 = a7 >>> 13;
		var a8 = a[8] | 0;
		var al8 = a8 & 0x1fff;
		var ah8 = a8 >>> 13;
		var a9 = a[9] | 0;
		var al9 = a9 & 0x1fff;
		var ah9 = a9 >>> 13;
		var b0 = b[0] | 0;
		var bl0 = b0 & 0x1fff;
		var bh0 = b0 >>> 13;
		var b1 = b[1] | 0;
		var bl1 = b1 & 0x1fff;
		var bh1 = b1 >>> 13;
		var b2 = b[2] | 0;
		var bl2 = b2 & 0x1fff;
		var bh2 = b2 >>> 13;
		var b3 = b[3] | 0;
		var bl3 = b3 & 0x1fff;
		var bh3 = b3 >>> 13;
		var b4 = b[4] | 0;
		var bl4 = b4 & 0x1fff;
		var bh4 = b4 >>> 13;
		var b5 = b[5] | 0;
		var bl5 = b5 & 0x1fff;
		var bh5 = b5 >>> 13;
		var b6 = b[6] | 0;
		var bl6 = b6 & 0x1fff;
		var bh6 = b6 >>> 13;
		var b7 = b[7] | 0;
		var bl7 = b7 & 0x1fff;
		var bh7 = b7 >>> 13;
		var b8 = b[8] | 0;
		var bl8 = b8 & 0x1fff;
		var bh8 = b8 >>> 13;
		var b9 = b[9] | 0;
		var bl9 = b9 & 0x1fff;
		var bh9 = b9 >>> 13;
	
		out.negative = self.negative ^ num.negative;
		out.length = 19;
		/* k = 0 */
		lo = Math.imul(al0, bl0);
		mid = Math.imul(al0, bh0);
		mid = (mid + Math.imul(ah0, bl0)) | 0;
		hi = Math.imul(ah0, bh0);
		var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
		w0 &= 0x3ffffff;
		/* k = 1 */
		lo = Math.imul(al1, bl0);
		mid = Math.imul(al1, bh0);
		mid = (mid + Math.imul(ah1, bl0)) | 0;
		hi = Math.imul(ah1, bh0);
		lo = (lo + Math.imul(al0, bl1)) | 0;
		mid = (mid + Math.imul(al0, bh1)) | 0;
		mid = (mid + Math.imul(ah0, bl1)) | 0;
		hi = (hi + Math.imul(ah0, bh1)) | 0;
		var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
		w1 &= 0x3ffffff;
		/* k = 2 */
		lo = Math.imul(al2, bl0);
		mid = Math.imul(al2, bh0);
		mid = (mid + Math.imul(ah2, bl0)) | 0;
		hi = Math.imul(ah2, bh0);
		lo = (lo + Math.imul(al1, bl1)) | 0;
		mid = (mid + Math.imul(al1, bh1)) | 0;
		mid = (mid + Math.imul(ah1, bl1)) | 0;
		hi = (hi + Math.imul(ah1, bh1)) | 0;
		lo = (lo + Math.imul(al0, bl2)) | 0;
		mid = (mid + Math.imul(al0, bh2)) | 0;
		mid = (mid + Math.imul(ah0, bl2)) | 0;
		hi = (hi + Math.imul(ah0, bh2)) | 0;
		var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
		w2 &= 0x3ffffff;
		/* k = 3 */
		lo = Math.imul(al3, bl0);
		mid = Math.imul(al3, bh0);
		mid = (mid + Math.imul(ah3, bl0)) | 0;
		hi = Math.imul(ah3, bh0);
		lo = (lo + Math.imul(al2, bl1)) | 0;
		mid = (mid + Math.imul(al2, bh1)) | 0;
		mid = (mid + Math.imul(ah2, bl1)) | 0;
		hi = (hi + Math.imul(ah2, bh1)) | 0;
		lo = (lo + Math.imul(al1, bl2)) | 0;
		mid = (mid + Math.imul(al1, bh2)) | 0;
		mid = (mid + Math.imul(ah1, bl2)) | 0;
		hi = (hi + Math.imul(ah1, bh2)) | 0;
		lo = (lo + Math.imul(al0, bl3)) | 0;
		mid = (mid + Math.imul(al0, bh3)) | 0;
		mid = (mid + Math.imul(ah0, bl3)) | 0;
		hi = (hi + Math.imul(ah0, bh3)) | 0;
		var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
		w3 &= 0x3ffffff;
		/* k = 4 */
		lo = Math.imul(al4, bl0);
		mid = Math.imul(al4, bh0);
		mid = (mid + Math.imul(ah4, bl0)) | 0;
		hi = Math.imul(ah4, bh0);
		lo = (lo + Math.imul(al3, bl1)) | 0;
		mid = (mid + Math.imul(al3, bh1)) | 0;
		mid = (mid + Math.imul(ah3, bl1)) | 0;
		hi = (hi + Math.imul(ah3, bh1)) | 0;
		lo = (lo + Math.imul(al2, bl2)) | 0;
		mid = (mid + Math.imul(al2, bh2)) | 0;
		mid = (mid + Math.imul(ah2, bl2)) | 0;
		hi = (hi + Math.imul(ah2, bh2)) | 0;
		lo = (lo + Math.imul(al1, bl3)) | 0;
		mid = (mid + Math.imul(al1, bh3)) | 0;
		mid = (mid + Math.imul(ah1, bl3)) | 0;
		hi = (hi + Math.imul(ah1, bh3)) | 0;
		lo = (lo + Math.imul(al0, bl4)) | 0;
		mid = (mid + Math.imul(al0, bh4)) | 0;
		mid = (mid + Math.imul(ah0, bl4)) | 0;
		hi = (hi + Math.imul(ah0, bh4)) | 0;
		var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
		w4 &= 0x3ffffff;
		/* k = 5 */
		lo = Math.imul(al5, bl0);
		mid = Math.imul(al5, bh0);
		mid = (mid + Math.imul(ah5, bl0)) | 0;
		hi = Math.imul(ah5, bh0);
		lo = (lo + Math.imul(al4, bl1)) | 0;
		mid = (mid + Math.imul(al4, bh1)) | 0;
		mid = (mid + Math.imul(ah4, bl1)) | 0;
		hi = (hi + Math.imul(ah4, bh1)) | 0;
		lo = (lo + Math.imul(al3, bl2)) | 0;
		mid = (mid + Math.imul(al3, bh2)) | 0;
		mid = (mid + Math.imul(ah3, bl2)) | 0;
		hi = (hi + Math.imul(ah3, bh2)) | 0;
		lo = (lo + Math.imul(al2, bl3)) | 0;
		mid = (mid + Math.imul(al2, bh3)) | 0;
		mid = (mid + Math.imul(ah2, bl3)) | 0;
		hi = (hi + Math.imul(ah2, bh3)) | 0;
		lo = (lo + Math.imul(al1, bl4)) | 0;
		mid = (mid + Math.imul(al1, bh4)) | 0;
		mid = (mid + Math.imul(ah1, bl4)) | 0;
		hi = (hi + Math.imul(ah1, bh4)) | 0;
		lo = (lo + Math.imul(al0, bl5)) | 0;
		mid = (mid + Math.imul(al0, bh5)) | 0;
		mid = (mid + Math.imul(ah0, bl5)) | 0;
		hi = (hi + Math.imul(ah0, bh5)) | 0;
		var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
		w5 &= 0x3ffffff;
		/* k = 6 */
		lo = Math.imul(al6, bl0);
		mid = Math.imul(al6, bh0);
		mid = (mid + Math.imul(ah6, bl0)) | 0;
		hi = Math.imul(ah6, bh0);
		lo = (lo + Math.imul(al5, bl1)) | 0;
		mid = (mid + Math.imul(al5, bh1)) | 0;
		mid = (mid + Math.imul(ah5, bl1)) | 0;
		hi = (hi + Math.imul(ah5, bh1)) | 0;
		lo = (lo + Math.imul(al4, bl2)) | 0;
		mid = (mid + Math.imul(al4, bh2)) | 0;
		mid = (mid + Math.imul(ah4, bl2)) | 0;
		hi = (hi + Math.imul(ah4, bh2)) | 0;
		lo = (lo + Math.imul(al3, bl3)) | 0;
		mid = (mid + Math.imul(al3, bh3)) | 0;
		mid = (mid + Math.imul(ah3, bl3)) | 0;
		hi = (hi + Math.imul(ah3, bh3)) | 0;
		lo = (lo + Math.imul(al2, bl4)) | 0;
		mid = (mid + Math.imul(al2, bh4)) | 0;
		mid = (mid + Math.imul(ah2, bl4)) | 0;
		hi = (hi + Math.imul(ah2, bh4)) | 0;
		lo = (lo + Math.imul(al1, bl5)) | 0;
		mid = (mid + Math.imul(al1, bh5)) | 0;
		mid = (mid + Math.imul(ah1, bl5)) | 0;
		hi = (hi + Math.imul(ah1, bh5)) | 0;
		lo = (lo + Math.imul(al0, bl6)) | 0;
		mid = (mid + Math.imul(al0, bh6)) | 0;
		mid = (mid + Math.imul(ah0, bl6)) | 0;
		hi = (hi + Math.imul(ah0, bh6)) | 0;
		var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
		w6 &= 0x3ffffff;
		/* k = 7 */
		lo = Math.imul(al7, bl0);
		mid = Math.imul(al7, bh0);
		mid = (mid + Math.imul(ah7, bl0)) | 0;
		hi = Math.imul(ah7, bh0);
		lo = (lo + Math.imul(al6, bl1)) | 0;
		mid = (mid + Math.imul(al6, bh1)) | 0;
		mid = (mid + Math.imul(ah6, bl1)) | 0;
		hi = (hi + Math.imul(ah6, bh1)) | 0;
		lo = (lo + Math.imul(al5, bl2)) | 0;
		mid = (mid + Math.imul(al5, bh2)) | 0;
		mid = (mid + Math.imul(ah5, bl2)) | 0;
		hi = (hi + Math.imul(ah5, bh2)) | 0;
		lo = (lo + Math.imul(al4, bl3)) | 0;
		mid = (mid + Math.imul(al4, bh3)) | 0;
		mid = (mid + Math.imul(ah4, bl3)) | 0;
		hi = (hi + Math.imul(ah4, bh3)) | 0;
		lo = (lo + Math.imul(al3, bl4)) | 0;
		mid = (mid + Math.imul(al3, bh4)) | 0;
		mid = (mid + Math.imul(ah3, bl4)) | 0;
		hi = (hi + Math.imul(ah3, bh4)) | 0;
		lo = (lo + Math.imul(al2, bl5)) | 0;
		mid = (mid + Math.imul(al2, bh5)) | 0;
		mid = (mid + Math.imul(ah2, bl5)) | 0;
		hi = (hi + Math.imul(ah2, bh5)) | 0;
		lo = (lo + Math.imul(al1, bl6)) | 0;
		mid = (mid + Math.imul(al1, bh6)) | 0;
		mid = (mid + Math.imul(ah1, bl6)) | 0;
		hi = (hi + Math.imul(ah1, bh6)) | 0;
		lo = (lo + Math.imul(al0, bl7)) | 0;
		mid = (mid + Math.imul(al0, bh7)) | 0;
		mid = (mid + Math.imul(ah0, bl7)) | 0;
		hi = (hi + Math.imul(ah0, bh7)) | 0;
		var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
		w7 &= 0x3ffffff;
		/* k = 8 */
		lo = Math.imul(al8, bl0);
		mid = Math.imul(al8, bh0);
		mid = (mid + Math.imul(ah8, bl0)) | 0;
		hi = Math.imul(ah8, bh0);
		lo = (lo + Math.imul(al7, bl1)) | 0;
		mid = (mid + Math.imul(al7, bh1)) | 0;
		mid = (mid + Math.imul(ah7, bl1)) | 0;
		hi = (hi + Math.imul(ah7, bh1)) | 0;
		lo = (lo + Math.imul(al6, bl2)) | 0;
		mid = (mid + Math.imul(al6, bh2)) | 0;
		mid = (mid + Math.imul(ah6, bl2)) | 0;
		hi = (hi + Math.imul(ah6, bh2)) | 0;
		lo = (lo + Math.imul(al5, bl3)) | 0;
		mid = (mid + Math.imul(al5, bh3)) | 0;
		mid = (mid + Math.imul(ah5, bl3)) | 0;
		hi = (hi + Math.imul(ah5, bh3)) | 0;
		lo = (lo + Math.imul(al4, bl4)) | 0;
		mid = (mid + Math.imul(al4, bh4)) | 0;
		mid = (mid + Math.imul(ah4, bl4)) | 0;
		hi = (hi + Math.imul(ah4, bh4)) | 0;
		lo = (lo + Math.imul(al3, bl5)) | 0;
		mid = (mid + Math.imul(al3, bh5)) | 0;
		mid = (mid + Math.imul(ah3, bl5)) | 0;
		hi = (hi + Math.imul(ah3, bh5)) | 0;
		lo = (lo + Math.imul(al2, bl6)) | 0;
		mid = (mid + Math.imul(al2, bh6)) | 0;
		mid = (mid + Math.imul(ah2, bl6)) | 0;
		hi = (hi + Math.imul(ah2, bh6)) | 0;
		lo = (lo + Math.imul(al1, bl7)) | 0;
		mid = (mid + Math.imul(al1, bh7)) | 0;
		mid = (mid + Math.imul(ah1, bl7)) | 0;
		hi = (hi + Math.imul(ah1, bh7)) | 0;
		lo = (lo + Math.imul(al0, bl8)) | 0;
		mid = (mid + Math.imul(al0, bh8)) | 0;
		mid = (mid + Math.imul(ah0, bl8)) | 0;
		hi = (hi + Math.imul(ah0, bh8)) | 0;
		var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
		w8 &= 0x3ffffff;
		/* k = 9 */
		lo = Math.imul(al9, bl0);
		mid = Math.imul(al9, bh0);
		mid = (mid + Math.imul(ah9, bl0)) | 0;
		hi = Math.imul(ah9, bh0);
		lo = (lo + Math.imul(al8, bl1)) | 0;
		mid = (mid + Math.imul(al8, bh1)) | 0;
		mid = (mid + Math.imul(ah8, bl1)) | 0;
		hi = (hi + Math.imul(ah8, bh1)) | 0;
		lo = (lo + Math.imul(al7, bl2)) | 0;
		mid = (mid + Math.imul(al7, bh2)) | 0;
		mid = (mid + Math.imul(ah7, bl2)) | 0;
		hi = (hi + Math.imul(ah7, bh2)) | 0;
		lo = (lo + Math.imul(al6, bl3)) | 0;
		mid = (mid + Math.imul(al6, bh3)) | 0;
		mid = (mid + Math.imul(ah6, bl3)) | 0;
		hi = (hi + Math.imul(ah6, bh3)) | 0;
		lo = (lo + Math.imul(al5, bl4)) | 0;
		mid = (mid + Math.imul(al5, bh4)) | 0;
		mid = (mid + Math.imul(ah5, bl4)) | 0;
		hi = (hi + Math.imul(ah5, bh4)) | 0;
		lo = (lo + Math.imul(al4, bl5)) | 0;
		mid = (mid + Math.imul(al4, bh5)) | 0;
		mid = (mid + Math.imul(ah4, bl5)) | 0;
		hi = (hi + Math.imul(ah4, bh5)) | 0;
		lo = (lo + Math.imul(al3, bl6)) | 0;
		mid = (mid + Math.imul(al3, bh6)) | 0;
		mid = (mid + Math.imul(ah3, bl6)) | 0;
		hi = (hi + Math.imul(ah3, bh6)) | 0;
		lo = (lo + Math.imul(al2, bl7)) | 0;
		mid = (mid + Math.imul(al2, bh7)) | 0;
		mid = (mid + Math.imul(ah2, bl7)) | 0;
		hi = (hi + Math.imul(ah2, bh7)) | 0;
		lo = (lo + Math.imul(al1, bl8)) | 0;
		mid = (mid + Math.imul(al1, bh8)) | 0;
		mid = (mid + Math.imul(ah1, bl8)) | 0;
		hi = (hi + Math.imul(ah1, bh8)) | 0;
		lo = (lo + Math.imul(al0, bl9)) | 0;
		mid = (mid + Math.imul(al0, bh9)) | 0;
		mid = (mid + Math.imul(ah0, bl9)) | 0;
		hi = (hi + Math.imul(ah0, bh9)) | 0;
		var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
		w9 &= 0x3ffffff;
		/* k = 10 */
		lo = Math.imul(al9, bl1);
		mid = Math.imul(al9, bh1);
		mid = (mid + Math.imul(ah9, bl1)) | 0;
		hi = Math.imul(ah9, bh1);
		lo = (lo + Math.imul(al8, bl2)) | 0;
		mid = (mid + Math.imul(al8, bh2)) | 0;
		mid = (mid + Math.imul(ah8, bl2)) | 0;
		hi = (hi + Math.imul(ah8, bh2)) | 0;
		lo = (lo + Math.imul(al7, bl3)) | 0;
		mid = (mid + Math.imul(al7, bh3)) | 0;
		mid = (mid + Math.imul(ah7, bl3)) | 0;
		hi = (hi + Math.imul(ah7, bh3)) | 0;
		lo = (lo + Math.imul(al6, bl4)) | 0;
		mid = (mid + Math.imul(al6, bh4)) | 0;
		mid = (mid + Math.imul(ah6, bl4)) | 0;
		hi = (hi + Math.imul(ah6, bh4)) | 0;
		lo = (lo + Math.imul(al5, bl5)) | 0;
		mid = (mid + Math.imul(al5, bh5)) | 0;
		mid = (mid + Math.imul(ah5, bl5)) | 0;
		hi = (hi + Math.imul(ah5, bh5)) | 0;
		lo = (lo + Math.imul(al4, bl6)) | 0;
		mid = (mid + Math.imul(al4, bh6)) | 0;
		mid = (mid + Math.imul(ah4, bl6)) | 0;
		hi = (hi + Math.imul(ah4, bh6)) | 0;
		lo = (lo + Math.imul(al3, bl7)) | 0;
		mid = (mid + Math.imul(al3, bh7)) | 0;
		mid = (mid + Math.imul(ah3, bl7)) | 0;
		hi = (hi + Math.imul(ah3, bh7)) | 0;
		lo = (lo + Math.imul(al2, bl8)) | 0;
		mid = (mid + Math.imul(al2, bh8)) | 0;
		mid = (mid + Math.imul(ah2, bl8)) | 0;
		hi = (hi + Math.imul(ah2, bh8)) | 0;
		lo = (lo + Math.imul(al1, bl9)) | 0;
		mid = (mid + Math.imul(al1, bh9)) | 0;
		mid = (mid + Math.imul(ah1, bl9)) | 0;
		hi = (hi + Math.imul(ah1, bh9)) | 0;
		var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
		w10 &= 0x3ffffff;
		/* k = 11 */
		lo = Math.imul(al9, bl2);
		mid = Math.imul(al9, bh2);
		mid = (mid + Math.imul(ah9, bl2)) | 0;
		hi = Math.imul(ah9, bh2);
		lo = (lo + Math.imul(al8, bl3)) | 0;
		mid = (mid + Math.imul(al8, bh3)) | 0;
		mid = (mid + Math.imul(ah8, bl3)) | 0;
		hi = (hi + Math.imul(ah8, bh3)) | 0;
		lo = (lo + Math.imul(al7, bl4)) | 0;
		mid = (mid + Math.imul(al7, bh4)) | 0;
		mid = (mid + Math.imul(ah7, bl4)) | 0;
		hi = (hi + Math.imul(ah7, bh4)) | 0;
		lo = (lo + Math.imul(al6, bl5)) | 0;
		mid = (mid + Math.imul(al6, bh5)) | 0;
		mid = (mid + Math.imul(ah6, bl5)) | 0;
		hi = (hi + Math.imul(ah6, bh5)) | 0;
		lo = (lo + Math.imul(al5, bl6)) | 0;
		mid = (mid + Math.imul(al5, bh6)) | 0;
		mid = (mid + Math.imul(ah5, bl6)) | 0;
		hi = (hi + Math.imul(ah5, bh6)) | 0;
		lo = (lo + Math.imul(al4, bl7)) | 0;
		mid = (mid + Math.imul(al4, bh7)) | 0;
		mid = (mid + Math.imul(ah4, bl7)) | 0;
		hi = (hi + Math.imul(ah4, bh7)) | 0;
		lo = (lo + Math.imul(al3, bl8)) | 0;
		mid = (mid + Math.imul(al3, bh8)) | 0;
		mid = (mid + Math.imul(ah3, bl8)) | 0;
		hi = (hi + Math.imul(ah3, bh8)) | 0;
		lo = (lo + Math.imul(al2, bl9)) | 0;
		mid = (mid + Math.imul(al2, bh9)) | 0;
		mid = (mid + Math.imul(ah2, bl9)) | 0;
		hi = (hi + Math.imul(ah2, bh9)) | 0;
		var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
		w11 &= 0x3ffffff;
		/* k = 12 */
		lo = Math.imul(al9, bl3);
		mid = Math.imul(al9, bh3);
		mid = (mid + Math.imul(ah9, bl3)) | 0;
		hi = Math.imul(ah9, bh3);
		lo = (lo + Math.imul(al8, bl4)) | 0;
		mid = (mid + Math.imul(al8, bh4)) | 0;
		mid = (mid + Math.imul(ah8, bl4)) | 0;
		hi = (hi + Math.imul(ah8, bh4)) | 0;
		lo = (lo + Math.imul(al7, bl5)) | 0;
		mid = (mid + Math.imul(al7, bh5)) | 0;
		mid = (mid + Math.imul(ah7, bl5)) | 0;
		hi = (hi + Math.imul(ah7, bh5)) | 0;
		lo = (lo + Math.imul(al6, bl6)) | 0;
		mid = (mid + Math.imul(al6, bh6)) | 0;
		mid = (mid + Math.imul(ah6, bl6)) | 0;
		hi = (hi + Math.imul(ah6, bh6)) | 0;
		lo = (lo + Math.imul(al5, bl7)) | 0;
		mid = (mid + Math.imul(al5, bh7)) | 0;
		mid = (mid + Math.imul(ah5, bl7)) | 0;
		hi = (hi + Math.imul(ah5, bh7)) | 0;
		lo = (lo + Math.imul(al4, bl8)) | 0;
		mid = (mid + Math.imul(al4, bh8)) | 0;
		mid = (mid + Math.imul(ah4, bl8)) | 0;
		hi = (hi + Math.imul(ah4, bh8)) | 0;
		lo = (lo + Math.imul(al3, bl9)) | 0;
		mid = (mid + Math.imul(al3, bh9)) | 0;
		mid = (mid + Math.imul(ah3, bl9)) | 0;
		hi = (hi + Math.imul(ah3, bh9)) | 0;
		var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
		w12 &= 0x3ffffff;
		/* k = 13 */
		lo = Math.imul(al9, bl4);
		mid = Math.imul(al9, bh4);
		mid = (mid + Math.imul(ah9, bl4)) | 0;
		hi = Math.imul(ah9, bh4);
		lo = (lo + Math.imul(al8, bl5)) | 0;
		mid = (mid + Math.imul(al8, bh5)) | 0;
		mid = (mid + Math.imul(ah8, bl5)) | 0;
		hi = (hi + Math.imul(ah8, bh5)) | 0;
		lo = (lo + Math.imul(al7, bl6)) | 0;
		mid = (mid + Math.imul(al7, bh6)) | 0;
		mid = (mid + Math.imul(ah7, bl6)) | 0;
		hi = (hi + Math.imul(ah7, bh6)) | 0;
		lo = (lo + Math.imul(al6, bl7)) | 0;
		mid = (mid + Math.imul(al6, bh7)) | 0;
		mid = (mid + Math.imul(ah6, bl7)) | 0;
		hi = (hi + Math.imul(ah6, bh7)) | 0;
		lo = (lo + Math.imul(al5, bl8)) | 0;
		mid = (mid + Math.imul(al5, bh8)) | 0;
		mid = (mid + Math.imul(ah5, bl8)) | 0;
		hi = (hi + Math.imul(ah5, bh8)) | 0;
		lo = (lo + Math.imul(al4, bl9)) | 0;
		mid = (mid + Math.imul(al4, bh9)) | 0;
		mid = (mid + Math.imul(ah4, bl9)) | 0;
		hi = (hi + Math.imul(ah4, bh9)) | 0;
		var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
		w13 &= 0x3ffffff;
		/* k = 14 */
		lo = Math.imul(al9, bl5);
		mid = Math.imul(al9, bh5);
		mid = (mid + Math.imul(ah9, bl5)) | 0;
		hi = Math.imul(ah9, bh5);
		lo = (lo + Math.imul(al8, bl6)) | 0;
		mid = (mid + Math.imul(al8, bh6)) | 0;
		mid = (mid + Math.imul(ah8, bl6)) | 0;
		hi = (hi + Math.imul(ah8, bh6)) | 0;
		lo = (lo + Math.imul(al7, bl7)) | 0;
		mid = (mid + Math.imul(al7, bh7)) | 0;
		mid = (mid + Math.imul(ah7, bl7)) | 0;
		hi = (hi + Math.imul(ah7, bh7)) | 0;
		lo = (lo + Math.imul(al6, bl8)) | 0;
		mid = (mid + Math.imul(al6, bh8)) | 0;
		mid = (mid + Math.imul(ah6, bl8)) | 0;
		hi = (hi + Math.imul(ah6, bh8)) | 0;
		lo = (lo + Math.imul(al5, bl9)) | 0;
		mid = (mid + Math.imul(al5, bh9)) | 0;
		mid = (mid + Math.imul(ah5, bl9)) | 0;
		hi = (hi + Math.imul(ah5, bh9)) | 0;
		var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
		w14 &= 0x3ffffff;
		/* k = 15 */
		lo = Math.imul(al9, bl6);
		mid = Math.imul(al9, bh6);
		mid = (mid + Math.imul(ah9, bl6)) | 0;
		hi = Math.imul(ah9, bh6);
		lo = (lo + Math.imul(al8, bl7)) | 0;
		mid = (mid + Math.imul(al8, bh7)) | 0;
		mid = (mid + Math.imul(ah8, bl7)) | 0;
		hi = (hi + Math.imul(ah8, bh7)) | 0;
		lo = (lo + Math.imul(al7, bl8)) | 0;
		mid = (mid + Math.imul(al7, bh8)) | 0;
		mid = (mid + Math.imul(ah7, bl8)) | 0;
		hi = (hi + Math.imul(ah7, bh8)) | 0;
		lo = (lo + Math.imul(al6, bl9)) | 0;
		mid = (mid + Math.imul(al6, bh9)) | 0;
		mid = (mid + Math.imul(ah6, bl9)) | 0;
		hi = (hi + Math.imul(ah6, bh9)) | 0;
		var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
		w15 &= 0x3ffffff;
		/* k = 16 */
		lo = Math.imul(al9, bl7);
		mid = Math.imul(al9, bh7);
		mid = (mid + Math.imul(ah9, bl7)) | 0;
		hi = Math.imul(ah9, bh7);
		lo = (lo + Math.imul(al8, bl8)) | 0;
		mid = (mid + Math.imul(al8, bh8)) | 0;
		mid = (mid + Math.imul(ah8, bl8)) | 0;
		hi = (hi + Math.imul(ah8, bh8)) | 0;
		lo = (lo + Math.imul(al7, bl9)) | 0;
		mid = (mid + Math.imul(al7, bh9)) | 0;
		mid = (mid + Math.imul(ah7, bl9)) | 0;
		hi = (hi + Math.imul(ah7, bh9)) | 0;
		var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
		w16 &= 0x3ffffff;
		/* k = 17 */
		lo = Math.imul(al9, bl8);
		mid = Math.imul(al9, bh8);
		mid = (mid + Math.imul(ah9, bl8)) | 0;
		hi = Math.imul(ah9, bh8);
		lo = (lo + Math.imul(al8, bl9)) | 0;
		mid = (mid + Math.imul(al8, bh9)) | 0;
		mid = (mid + Math.imul(ah8, bl9)) | 0;
		hi = (hi + Math.imul(ah8, bh9)) | 0;
		var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
		w17 &= 0x3ffffff;
		/* k = 18 */
		lo = Math.imul(al9, bl9);
		mid = Math.imul(al9, bh9);
		mid = (mid + Math.imul(ah9, bl9)) | 0;
		hi = Math.imul(ah9, bh9);
		var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
		w18 &= 0x3ffffff;
		o[0] = w0;
		o[1] = w1;
		o[2] = w2;
		o[3] = w3;
		o[4] = w4;
		o[5] = w5;
		o[6] = w6;
		o[7] = w7;
		o[8] = w8;
		o[9] = w9;
		o[10] = w10;
		o[11] = w11;
		o[12] = w12;
		o[13] = w13;
		o[14] = w14;
		o[15] = w15;
		o[16] = w16;
		o[17] = w17;
		o[18] = w18;
		if (c !== 0) {
		  o[19] = c;
		  out.length++;
		}
		return out;
	  };
	
	  // Polyfill comb
	  if (!Math.imul) {
		comb10MulTo = smallMulTo;
	  }
	
	  function bigMulTo (self, num, out) {
		out.negative = num.negative ^ self.negative;
		out.length = self.length + num.length;
	
		var carry = 0;
		var hncarry = 0;
		for (var k = 0; k < out.length - 1; k++) {
		  // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		  // note that ncarry could be >= 0x3ffffff
		  var ncarry = hncarry;
		  hncarry = 0;
		  var rword = carry & 0x3ffffff;
		  var maxJ = Math.min(k, num.length - 1);
		  for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
			var i = k - j;
			var a = self.words[i] | 0;
			var b = num.words[j] | 0;
			var r = a * b;
	
			var lo = r & 0x3ffffff;
			ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
			lo = (lo + rword) | 0;
			rword = lo & 0x3ffffff;
			ncarry = (ncarry + (lo >>> 26)) | 0;
	
			hncarry += ncarry >>> 26;
			ncarry &= 0x3ffffff;
		  }
		  out.words[k] = rword;
		  carry = ncarry;
		  ncarry = hncarry;
		}
		if (carry !== 0) {
		  out.words[k] = carry;
		} else {
		  out.length--;
		}
	
		return out.strip();
	  }
	
	  function jumboMulTo (self, num, out) {
		var fftm = new FFTM();
		return fftm.mulp(self, num, out);
	  }
	
	  BN.prototype.mulTo = function mulTo (num, out) {
		var res;
		var len = this.length + num.length;
		if (this.length === 10 && num.length === 10) {
		  res = comb10MulTo(this, num, out);
		} else if (len < 63) {
		  res = smallMulTo(this, num, out);
		} else if (len < 1024) {
		  res = bigMulTo(this, num, out);
		} else {
		  res = jumboMulTo(this, num, out);
		}
	
		return res;
	  };
	
	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion
	
	  function FFTM (x, y) {
		this.x = x;
		this.y = y;
	  }
	
	  FFTM.prototype.makeRBT = function makeRBT (N) {
		var t = new Array(N);
		var l = BN.prototype._countBits(N) - 1;
		for (var i = 0; i < N; i++) {
		  t[i] = this.revBin(i, l, N);
		}
	
		return t;
	  };
	
	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
		if (x === 0 || x === N - 1) return x;
	
		var rb = 0;
		for (var i = 0; i < l; i++) {
		  rb |= (x & 1) << (l - i - 1);
		  x >>= 1;
		}
	
		return rb;
	  };
	
	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
		for (var i = 0; i < N; i++) {
		  rtws[i] = rws[rbt[i]];
		  itws[i] = iws[rbt[i]];
		}
	  };
	
	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
		this.permute(rbt, rws, iws, rtws, itws, N);
	
		for (var s = 1; s < N; s <<= 1) {
		  var l = s << 1;
	
		  var rtwdf = Math.cos(2 * Math.PI / l);
		  var itwdf = Math.sin(2 * Math.PI / l);
	
		  for (var p = 0; p < N; p += l) {
			var rtwdf_ = rtwdf;
			var itwdf_ = itwdf;
	
			for (var j = 0; j < s; j++) {
			  var re = rtws[p + j];
			  var ie = itws[p + j];
	
			  var ro = rtws[p + j + s];
			  var io = itws[p + j + s];
	
			  var rx = rtwdf_ * ro - itwdf_ * io;
	
			  io = rtwdf_ * io + itwdf_ * ro;
			  ro = rx;
	
			  rtws[p + j] = re + ro;
			  itws[p + j] = ie + io;
	
			  rtws[p + j + s] = re - ro;
			  itws[p + j + s] = ie - io;
	
			  /* jshint maxdepth : false */
			  if (j !== l) {
				rx = rtwdf * rtwdf_ - itwdf * itwdf_;
	
				itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
				rtwdf_ = rx;
			  }
			}
		  }
		}
	  };
	
	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
		var N = Math.max(m, n) | 1;
		var odd = N & 1;
		var i = 0;
		for (N = N / 2 | 0; N; N = N >>> 1) {
		  i++;
		}
	
		return 1 << i + 1 + odd;
	  };
	
	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
		if (N <= 1) return;
	
		for (var i = 0; i < N / 2; i++) {
		  var t = rws[i];
	
		  rws[i] = rws[N - i - 1];
		  rws[N - i - 1] = t;
	
		  t = iws[i];
	
		  iws[i] = -iws[N - i - 1];
		  iws[N - i - 1] = -t;
		}
	  };
	
	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
		var carry = 0;
		for (var i = 0; i < N / 2; i++) {
		  var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
			Math.round(ws[2 * i] / N) +
			carry;
	
		  ws[i] = w & 0x3ffffff;
	
		  if (w < 0x4000000) {
			carry = 0;
		  } else {
			carry = w / 0x4000000 | 0;
		  }
		}
	
		return ws;
	  };
	
	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
		var carry = 0;
		for (var i = 0; i < len; i++) {
		  carry = carry + (ws[i] | 0);
	
		  rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
		  rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
		}
	
		// Pad with zeroes
		for (i = 2 * len; i < N; ++i) {
		  rws[i] = 0;
		}
	
		assert(carry === 0);
		assert((carry & ~0x1fff) === 0);
	  };
	
	  FFTM.prototype.stub = function stub (N) {
		var ph = new Array(N);
		for (var i = 0; i < N; i++) {
		  ph[i] = 0;
		}
	
		return ph;
	  };
	
	  FFTM.prototype.mulp = function mulp (x, y, out) {
		var N = 2 * this.guessLen13b(x.length, y.length);
	
		var rbt = this.makeRBT(N);
	
		var _ = this.stub(N);
	
		var rws = new Array(N);
		var rwst = new Array(N);
		var iwst = new Array(N);
	
		var nrws = new Array(N);
		var nrwst = new Array(N);
		var niwst = new Array(N);
	
		var rmws = out.words;
		rmws.length = N;
	
		this.convert13b(x.words, x.length, rws, N);
		this.convert13b(y.words, y.length, nrws, N);
	
		this.transform(rws, _, rwst, iwst, N, rbt);
		this.transform(nrws, _, nrwst, niwst, N, rbt);
	
		for (var i = 0; i < N; i++) {
		  var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
		  iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
		  rwst[i] = rx;
		}
	
		this.conjugate(rwst, iwst, N);
		this.transform(rwst, iwst, rmws, _, N, rbt);
		this.conjugate(rmws, _, N);
		this.normalize13b(rmws, N);
	
		out.negative = x.negative ^ y.negative;
		out.length = x.length + y.length;
		return out.strip();
	  };
	
	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
		var out = new BN(null);
		out.words = new Array(this.length + num.length);
		return this.mulTo(num, out);
	  };
	
	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
		var out = new BN(null);
		out.words = new Array(this.length + num.length);
		return jumboMulTo(this, num, out);
	  };
	
	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
		return this.clone().mulTo(num, this);
	  };
	
	  BN.prototype.imuln = function imuln (num) {
		assert(typeof num === 'number');
		assert(num < 0x4000000);
	
		// Carry
		var carry = 0;
		for (var i = 0; i < this.length; i++) {
		  var w = (this.words[i] | 0) * num;
		  var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		  carry >>= 26;
		  carry += (w / 0x4000000) | 0;
		  // NOTE: lo is 27bit maximum
		  carry += lo >>> 26;
		  this.words[i] = lo & 0x3ffffff;
		}
	
		if (carry !== 0) {
		  this.words[i] = carry;
		  this.length++;
		}
	
		return this;
	  };
	
	  BN.prototype.muln = function muln (num) {
		return this.clone().imuln(num);
	  };
	
	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
		return this.mul(this);
	  };
	
	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
		return this.imul(this.clone());
	  };
	
	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
		var w = toBitArray(num);
		if (w.length === 0) return new BN(1);
	
		// Skip leading zeroes
		var res = this;
		for (var i = 0; i < w.length; i++, res = res.sqr()) {
		  if (w[i] !== 0) break;
		}
	
		if (++i < w.length) {
		  for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
			if (w[i] === 0) continue;
	
			res = res.mul(q);
		  }
		}
	
		return res;
	  };
	
	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
		assert(typeof bits === 'number' && bits >= 0);
		var r = bits % 26;
		var s = (bits - r) / 26;
		var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
		var i;
	
		if (r !== 0) {
		  var carry = 0;
	
		  for (i = 0; i < this.length; i++) {
			var newCarry = this.words[i] & carryMask;
			var c = ((this.words[i] | 0) - newCarry) << r;
			this.words[i] = c | carry;
			carry = newCarry >>> (26 - r);
		  }
	
		  if (carry) {
			this.words[i] = carry;
			this.length++;
		  }
		}
	
		if (s !== 0) {
		  for (i = this.length - 1; i >= 0; i--) {
			this.words[i + s] = this.words[i];
		  }
	
		  for (i = 0; i < s; i++) {
			this.words[i] = 0;
		  }
	
		  this.length += s;
		}
	
		return this.strip();
	  };
	
	  BN.prototype.ishln = function ishln (bits) {
		// TODO(indutny): implement me
		assert(this.negative === 0);
		return this.iushln(bits);
	  };
	
	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
		assert(typeof bits === 'number' && bits >= 0);
		var h;
		if (hint) {
		  h = (hint - (hint % 26)) / 26;
		} else {
		  h = 0;
		}
	
		var r = bits % 26;
		var s = Math.min((bits - r) / 26, this.length);
		var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		var maskedWords = extended;
	
		h -= s;
		h = Math.max(0, h);
	
		// Extended mode, copy masked part
		if (maskedWords) {
		  for (var i = 0; i < s; i++) {
			maskedWords.words[i] = this.words[i];
		  }
		  maskedWords.length = s;
		}
	
		if (s === 0) {
		  // No-op, we should not move anything at all
		} else if (this.length > s) {
		  this.length -= s;
		  for (i = 0; i < this.length; i++) {
			this.words[i] = this.words[i + s];
		  }
		} else {
		  this.words[0] = 0;
		  this.length = 1;
		}
	
		var carry = 0;
		for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		  var word = this.words[i] | 0;
		  this.words[i] = (carry << (26 - r)) | (word >>> r);
		  carry = word & mask;
		}
	
		// Push carried bits as a mask
		if (maskedWords && carry !== 0) {
		  maskedWords.words[maskedWords.length++] = carry;
		}
	
		if (this.length === 0) {
		  this.words[0] = 0;
		  this.length = 1;
		}
	
		return this.strip();
	  };
	
	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
		// TODO(indutny): implement me
		assert(this.negative === 0);
		return this.iushrn(bits, hint, extended);
	  };
	
	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
		return this.clone().ishln(bits);
	  };
	
	  BN.prototype.ushln = function ushln (bits) {
		return this.clone().iushln(bits);
	  };
	
	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
		return this.clone().ishrn(bits);
	  };
	
	  BN.prototype.ushrn = function ushrn (bits) {
		return this.clone().iushrn(bits);
	  };
	
	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
		assert(typeof bit === 'number' && bit >= 0);
		var r = bit % 26;
		var s = (bit - r) / 26;
		var q = 1 << r;
	
		// Fast case: bit is much higher than all existing words
		if (this.length <= s) return false;
	
		// Check bit and return
		var w = this.words[s];
	
		return !!(w & q);
	  };
	
	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
		assert(typeof bits === 'number' && bits >= 0);
		var r = bits % 26;
		var s = (bits - r) / 26;
	
		assert(this.negative === 0, 'imaskn works only with positive numbers');
	
		if (this.length <= s) {
		  return this;
		}
	
		if (r !== 0) {
		  s++;
		}
		this.length = Math.min(s, this.length);
	
		if (r !== 0) {
		  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		  this.words[this.length - 1] &= mask;
		}
	
		return this.strip();
	  };
	
	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
		return this.clone().imaskn(bits);
	  };
	
	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
		assert(typeof num === 'number');
		assert(num < 0x4000000);
		if (num < 0) return this.isubn(-num);
	
		// Possible sign change
		if (this.negative !== 0) {
		  if (this.length === 1 && (this.words[0] | 0) < num) {
			this.words[0] = num - (this.words[0] | 0);
			this.negative = 0;
			return this;
		  }
	
		  this.negative = 0;
		  this.isubn(num);
		  this.negative = 1;
		  return this;
		}
	
		// Add without checks
		return this._iaddn(num);
	  };
	
	  BN.prototype._iaddn = function _iaddn (num) {
		this.words[0] += num;
	
		// Carry
		for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		  this.words[i] -= 0x4000000;
		  if (i === this.length - 1) {
			this.words[i + 1] = 1;
		  } else {
			this.words[i + 1]++;
		  }
		}
		this.length = Math.max(this.length, i + 1);
	
		return this;
	  };
	
	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
		assert(typeof num === 'number');
		assert(num < 0x4000000);
		if (num < 0) return this.iaddn(-num);
	
		if (this.negative !== 0) {
		  this.negative = 0;
		  this.iaddn(num);
		  this.negative = 1;
		  return this;
		}
	
		this.words[0] -= num;
	
		if (this.length === 1 && this.words[0] < 0) {
		  this.words[0] = -this.words[0];
		  this.negative = 1;
		} else {
		  // Carry
		  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
			this.words[i] += 0x4000000;
			this.words[i + 1] -= 1;
		  }
		}
	
		return this.strip();
	  };
	
	  BN.prototype.addn = function addn (num) {
		return this.clone().iaddn(num);
	  };
	
	  BN.prototype.subn = function subn (num) {
		return this.clone().isubn(num);
	  };
	
	  BN.prototype.iabs = function iabs () {
		this.negative = 0;
	
		return this;
	  };
	
	  BN.prototype.abs = function abs () {
		return this.clone().iabs();
	  };
	
	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
		var len = num.length + shift;
		var i;
	
		this._expand(len);
	
		var w;
		var carry = 0;
		for (i = 0; i < num.length; i++) {
		  w = (this.words[i + shift] | 0) + carry;
		  var right = (num.words[i] | 0) * mul;
		  w -= right & 0x3ffffff;
		  carry = (w >> 26) - ((right / 0x4000000) | 0);
		  this.words[i + shift] = w & 0x3ffffff;
		}
		for (; i < this.length - shift; i++) {
		  w = (this.words[i + shift] | 0) + carry;
		  carry = w >> 26;
		  this.words[i + shift] = w & 0x3ffffff;
		}
	
		if (carry === 0) return this.strip();
	
		// Subtraction overflow
		assert(carry === -1);
		carry = 0;
		for (i = 0; i < this.length; i++) {
		  w = -(this.words[i] | 0) + carry;
		  carry = w >> 26;
		  this.words[i] = w & 0x3ffffff;
		}
		this.negative = 1;
	
		return this.strip();
	  };
	
	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
		var shift = this.length - num.length;
	
		var a = this.clone();
		var b = num;
	
		// Normalize
		var bhi = b.words[b.length - 1] | 0;
		var bhiBits = this._countBits(bhi);
		shift = 26 - bhiBits;
		if (shift !== 0) {
		  b = b.ushln(shift);
		  a.iushln(shift);
		  bhi = b.words[b.length - 1] | 0;
		}
	
		// Initialize quotient
		var m = a.length - b.length;
		var q;
	
		if (mode !== 'mod') {
		  q = new BN(null);
		  q.length = m + 1;
		  q.words = new Array(q.length);
		  for (var i = 0; i < q.length; i++) {
			q.words[i] = 0;
		  }
		}
	
		var diff = a.clone()._ishlnsubmul(b, 1, m);
		if (diff.negative === 0) {
		  a = diff;
		  if (q) {
			q.words[m] = 1;
		  }
		}
	
		for (var j = m - 1; j >= 0; j--) {
		  var qj = (a.words[b.length + j] | 0) * 0x4000000 +
			(a.words[b.length + j - 1] | 0);
	
		  // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		  // (0x7ffffff)
		  qj = Math.min((qj / bhi) | 0, 0x3ffffff);
	
		  a._ishlnsubmul(b, qj, j);
		  while (a.negative !== 0) {
			qj--;
			a.negative = 0;
			a._ishlnsubmul(b, 1, j);
			if (!a.isZero()) {
			  a.negative ^= 1;
			}
		  }
		  if (q) {
			q.words[j] = qj;
		  }
		}
		if (q) {
		  q.strip();
		}
		a.strip();
	
		// Denormalize
		if (mode !== 'div' && shift !== 0) {
		  a.iushrn(shift);
		}
	
		return {
		  div: q || null,
		  mod: a
		};
	  };
	
	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
		assert(!num.isZero());
	
		if (this.isZero()) {
		  return {
			div: new BN(0),
			mod: new BN(0)
		  };
		}
	
		var div, mod, res;
		if (this.negative !== 0 && num.negative === 0) {
		  res = this.neg().divmod(num, mode);
	
		  if (mode !== 'mod') {
			div = res.div.neg();
		  }
	
		  if (mode !== 'div') {
			mod = res.mod.neg();
			if (positive && mod.negative !== 0) {
			  mod.iadd(num);
			}
		  }
	
		  return {
			div: div,
			mod: mod
		  };
		}
	
		if (this.negative === 0 && num.negative !== 0) {
		  res = this.divmod(num.neg(), mode);
	
		  if (mode !== 'mod') {
			div = res.div.neg();
		  }
	
		  return {
			div: div,
			mod: res.mod
		  };
		}
	
		if ((this.negative & num.negative) !== 0) {
		  res = this.neg().divmod(num.neg(), mode);
	
		  if (mode !== 'div') {
			mod = res.mod.neg();
			if (positive && mod.negative !== 0) {
			  mod.isub(num);
			}
		  }
	
		  return {
			div: res.div,
			mod: mod
		  };
		}
	
		// Both numbers are positive at this point
	
		// Strip both numbers to approximate shift value
		if (num.length > this.length || this.cmp(num) < 0) {
		  return {
			div: new BN(0),
			mod: this
		  };
		}
	
		// Very short reduction
		if (num.length === 1) {
		  if (mode === 'div') {
			return {
			  div: this.divn(num.words[0]),
			  mod: null
			};
		  }
	
		  if (mode === 'mod') {
			return {
			  div: null,
			  mod: new BN(this.modn(num.words[0]))
			};
		  }
	
		  return {
			div: this.divn(num.words[0]),
			mod: new BN(this.modn(num.words[0]))
		  };
		}
	
		return this._wordDiv(num, mode);
	  };
	
	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
		return this.divmod(num, 'div', false).div;
	  };
	
	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
		return this.divmod(num, 'mod', false).mod;
	  };
	
	  BN.prototype.umod = function umod (num) {
		return this.divmod(num, 'mod', true).mod;
	  };
	
	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
		var dm = this.divmod(num);
	
		// Fast case - exact division
		if (dm.mod.isZero()) return dm.div;
	
		var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
	
		var half = num.ushrn(1);
		var r2 = num.andln(1);
		var cmp = mod.cmp(half);
	
		// Round down
		if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
	
		// Round up
		return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };
	
	  BN.prototype.modn = function modn (num) {
		assert(num <= 0x3ffffff);
		var p = (1 << 26) % num;
	
		var acc = 0;
		for (var i = this.length - 1; i >= 0; i--) {
		  acc = (p * acc + (this.words[i] | 0)) % num;
		}
	
		return acc;
	  };
	
	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
		assert(num <= 0x3ffffff);
	
		var carry = 0;
		for (var i = this.length - 1; i >= 0; i--) {
		  var w = (this.words[i] | 0) + carry * 0x4000000;
		  this.words[i] = (w / num) | 0;
		  carry = w % num;
		}
	
		return this.strip();
	  };
	
	  BN.prototype.divn = function divn (num) {
		return this.clone().idivn(num);
	  };
	
	  BN.prototype.egcd = function egcd (p) {
		assert(p.negative === 0);
		assert(!p.isZero());
	
		var x = this;
		var y = p.clone();
	
		if (x.negative !== 0) {
		  x = x.umod(p);
		} else {
		  x = x.clone();
		}
	
		// A * x + B * y = x
		var A = new BN(1);
		var B = new BN(0);
	
		// C * x + D * y = y
		var C = new BN(0);
		var D = new BN(1);
	
		var g = 0;
	
		while (x.isEven() && y.isEven()) {
		  x.iushrn(1);
		  y.iushrn(1);
		  ++g;
		}
	
		var yp = y.clone();
		var xp = x.clone();
	
		while (!x.isZero()) {
		  for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		  if (i > 0) {
			x.iushrn(i);
			while (i-- > 0) {
			  if (A.isOdd() || B.isOdd()) {
				A.iadd(yp);
				B.isub(xp);
			  }
	
			  A.iushrn(1);
			  B.iushrn(1);
			}
		  }
	
		  for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		  if (j > 0) {
			y.iushrn(j);
			while (j-- > 0) {
			  if (C.isOdd() || D.isOdd()) {
				C.iadd(yp);
				D.isub(xp);
			  }
	
			  C.iushrn(1);
			  D.iushrn(1);
			}
		  }
	
		  if (x.cmp(y) >= 0) {
			x.isub(y);
			A.isub(C);
			B.isub(D);
		  } else {
			y.isub(x);
			C.isub(A);
			D.isub(B);
		  }
		}
	
		return {
		  a: C,
		  b: D,
		  gcd: y.iushln(g)
		};
	  };
	
	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
		assert(p.negative === 0);
		assert(!p.isZero());
	
		var a = this;
		var b = p.clone();
	
		if (a.negative !== 0) {
		  a = a.umod(p);
		} else {
		  a = a.clone();
		}
	
		var x1 = new BN(1);
		var x2 = new BN(0);
	
		var delta = b.clone();
	
		while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		  for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		  if (i > 0) {
			a.iushrn(i);
			while (i-- > 0) {
			  if (x1.isOdd()) {
				x1.iadd(delta);
			  }
	
			  x1.iushrn(1);
			}
		  }
	
		  for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		  if (j > 0) {
			b.iushrn(j);
			while (j-- > 0) {
			  if (x2.isOdd()) {
				x2.iadd(delta);
			  }
	
			  x2.iushrn(1);
			}
		  }
	
		  if (a.cmp(b) >= 0) {
			a.isub(b);
			x1.isub(x2);
		  } else {
			b.isub(a);
			x2.isub(x1);
		  }
		}
	
		var res;
		if (a.cmpn(1) === 0) {
		  res = x1;
		} else {
		  res = x2;
		}
	
		if (res.cmpn(0) < 0) {
		  res.iadd(p);
		}
	
		return res;
	  };
	
	  BN.prototype.gcd = function gcd (num) {
		if (this.isZero()) return num.abs();
		if (num.isZero()) return this.abs();
	
		var a = this.clone();
		var b = num.clone();
		a.negative = 0;
		b.negative = 0;
	
		// Remove common factor of two
		for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		  a.iushrn(1);
		  b.iushrn(1);
		}
	
		do {
		  while (a.isEven()) {
			a.iushrn(1);
		  }
		  while (b.isEven()) {
			b.iushrn(1);
		  }
	
		  var r = a.cmp(b);
		  if (r < 0) {
			// Swap `a` and `b` to make `a` always bigger than `b`
			var t = a;
			a = b;
			b = t;
		  } else if (r === 0 || b.cmpn(1) === 0) {
			break;
		  }
	
		  a.isub(b);
		} while (true);
	
		return b.iushln(shift);
	  };
	
	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
		return this.egcd(num).a.umod(num);
	  };
	
	  BN.prototype.isEven = function isEven () {
		return (this.words[0] & 1) === 0;
	  };
	
	  BN.prototype.isOdd = function isOdd () {
		return (this.words[0] & 1) === 1;
	  };
	
	  // And first word and num
	  BN.prototype.andln = function andln (num) {
		return this.words[0] & num;
	  };
	
	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
		assert(typeof bit === 'number');
		var r = bit % 26;
		var s = (bit - r) / 26;
		var q = 1 << r;
	
		// Fast case: bit is much higher than all existing words
		if (this.length <= s) {
		  this._expand(s + 1);
		  this.words[s] |= q;
		  return this;
		}
	
		// Add bit and propagate, if needed
		var carry = q;
		for (var i = s; carry !== 0 && i < this.length; i++) {
		  var w = this.words[i] | 0;
		  w += carry;
		  carry = w >>> 26;
		  w &= 0x3ffffff;
		  this.words[i] = w;
		}
		if (carry !== 0) {
		  this.words[i] = carry;
		  this.length++;
		}
		return this;
	  };
	
	  BN.prototype.isZero = function isZero () {
		return this.length === 1 && this.words[0] === 0;
	  };
	
	  BN.prototype.cmpn = function cmpn (num) {
		var negative = num < 0;
	
		if (this.negative !== 0 && !negative) return -1;
		if (this.negative === 0 && negative) return 1;
	
		this.strip();
	
		var res;
		if (this.length > 1) {
		  res = 1;
		} else {
		  if (negative) {
			num = -num;
		  }
	
		  assert(num <= 0x3ffffff, 'Number is too big');
	
		  var w = this.words[0] | 0;
		  res = w === num ? 0 : w < num ? -1 : 1;
		}
		if (this.negative !== 0) return -res | 0;
		return res;
	  };
	
	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
		if (this.negative !== 0 && num.negative === 0) return -1;
		if (this.negative === 0 && num.negative !== 0) return 1;
	
		var res = this.ucmp(num);
		if (this.negative !== 0) return -res | 0;
		return res;
	  };
	
	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
		// At this point both numbers have the same sign
		if (this.length > num.length) return 1;
		if (this.length < num.length) return -1;
	
		var res = 0;
		for (var i = this.length - 1; i >= 0; i--) {
		  var a = this.words[i] | 0;
		  var b = num.words[i] | 0;
	
		  if (a === b) continue;
		  if (a < b) {
			res = -1;
		  } else if (a > b) {
			res = 1;
		  }
		  break;
		}
		return res;
	  };
	
	  BN.prototype.gtn = function gtn (num) {
		return this.cmpn(num) === 1;
	  };
	
	  BN.prototype.gt = function gt (num) {
		return this.cmp(num) === 1;
	  };
	
	  BN.prototype.gten = function gten (num) {
		return this.cmpn(num) >= 0;
	  };
	
	  BN.prototype.gte = function gte (num) {
		return this.cmp(num) >= 0;
	  };
	
	  BN.prototype.ltn = function ltn (num) {
		return this.cmpn(num) === -1;
	  };
	
	  BN.prototype.lt = function lt (num) {
		return this.cmp(num) === -1;
	  };
	
	  BN.prototype.lten = function lten (num) {
		return this.cmpn(num) <= 0;
	  };
	
	  BN.prototype.lte = function lte (num) {
		return this.cmp(num) <= 0;
	  };
	
	  BN.prototype.eqn = function eqn (num) {
		return this.cmpn(num) === 0;
	  };
	
	  BN.prototype.eq = function eq (num) {
		return this.cmp(num) === 0;
	  };
	
	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
		return new Red(num);
	  };
	
	  BN.prototype.toRed = function toRed (ctx) {
		assert(!this.red, 'Already a number in reduction context');
		assert(this.negative === 0, 'red works only with positives');
		return ctx.convertTo(this)._forceRed(ctx);
	  };
	
	  BN.prototype.fromRed = function fromRed () {
		assert(this.red, 'fromRed works only with numbers in reduction context');
		return this.red.convertFrom(this);
	  };
	
	  BN.prototype._forceRed = function _forceRed (ctx) {
		this.red = ctx;
		return this;
	  };
	
	  BN.prototype.forceRed = function forceRed (ctx) {
		assert(!this.red, 'Already a number in reduction context');
		return this._forceRed(ctx);
	  };
	
	  BN.prototype.redAdd = function redAdd (num) {
		assert(this.red, 'redAdd works only with red numbers');
		return this.red.add(this, num);
	  };
	
	  BN.prototype.redIAdd = function redIAdd (num) {
		assert(this.red, 'redIAdd works only with red numbers');
		return this.red.iadd(this, num);
	  };
	
	  BN.prototype.redSub = function redSub (num) {
		assert(this.red, 'redSub works only with red numbers');
		return this.red.sub(this, num);
	  };
	
	  BN.prototype.redISub = function redISub (num) {
		assert(this.red, 'redISub works only with red numbers');
		return this.red.isub(this, num);
	  };
	
	  BN.prototype.redShl = function redShl (num) {
		assert(this.red, 'redShl works only with red numbers');
		return this.red.shl(this, num);
	  };
	
	  BN.prototype.redMul = function redMul (num) {
		assert(this.red, 'redMul works only with red numbers');
		this.red._verify2(this, num);
		return this.red.mul(this, num);
	  };
	
	  BN.prototype.redIMul = function redIMul (num) {
		assert(this.red, 'redMul works only with red numbers');
		this.red._verify2(this, num);
		return this.red.imul(this, num);
	  };
	
	  BN.prototype.redSqr = function redSqr () {
		assert(this.red, 'redSqr works only with red numbers');
		this.red._verify1(this);
		return this.red.sqr(this);
	  };
	
	  BN.prototype.redISqr = function redISqr () {
		assert(this.red, 'redISqr works only with red numbers');
		this.red._verify1(this);
		return this.red.isqr(this);
	  };
	
	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
		assert(this.red, 'redSqrt works only with red numbers');
		this.red._verify1(this);
		return this.red.sqrt(this);
	  };
	
	  BN.prototype.redInvm = function redInvm () {
		assert(this.red, 'redInvm works only with red numbers');
		this.red._verify1(this);
		return this.red.invm(this);
	  };
	
	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
		assert(this.red, 'redNeg works only with red numbers');
		this.red._verify1(this);
		return this.red.neg(this);
	  };
	
	  BN.prototype.redPow = function redPow (num) {
		assert(this.red && !num.red, 'redPow(normalNum)');
		this.red._verify1(this);
		return this.red.pow(this, num);
	  };
	
	  // Prime numbers with efficient reduction
	  var primes = {
		k256: null,
		p224: null,
		p192: null,
		p25519: null
	  };
	
	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
		// P = 2 ^ N - K
		this.name = name;
		this.p = new BN(p, 16);
		this.n = this.p.bitLength();
		this.k = new BN(1).iushln(this.n).isub(this.p);
	
		this.tmp = this._tmp();
	  }
	
	  MPrime.prototype._tmp = function _tmp () {
		var tmp = new BN(null);
		tmp.words = new Array(Math.ceil(this.n / 13));
		return tmp;
	  };
	
	  MPrime.prototype.ireduce = function ireduce (num) {
		// Assumes that `num` is less than `P^2`
		// num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		var r = num;
		var rlen;
	
		do {
		  this.split(r, this.tmp);
		  r = this.imulK(r);
		  r = r.iadd(this.tmp);
		  rlen = r.bitLength();
		} while (rlen > this.n);
	
		var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		if (cmp === 0) {
		  r.words[0] = 0;
		  r.length = 1;
		} else if (cmp > 0) {
		  r.isub(this.p);
		} else {
		  if (r.strip !== undefined) {
			// r is BN v4 instance
			r.strip();
		  } else {
			// r is BN v5 instance
			r._strip();
		  }
		}
	
		return r;
	  };
	
	  MPrime.prototype.split = function split (input, out) {
		input.iushrn(this.n, 0, out);
	  };
	
	  MPrime.prototype.imulK = function imulK (num) {
		return num.imul(this.k);
	  };
	
	  function K256 () {
		MPrime.call(
		  this,
		  'k256',
		  'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);
	
	  K256.prototype.split = function split (input, output) {
		// 256 = 9 * 26 + 22
		var mask = 0x3fffff;
	
		var outLen = Math.min(input.length, 9);
		for (var i = 0; i < outLen; i++) {
		  output.words[i] = input.words[i];
		}
		output.length = outLen;
	
		if (input.length <= 9) {
		  input.words[0] = 0;
		  input.length = 1;
		  return;
		}
	
		// Shift by 9 limbs
		var prev = input.words[9];
		output.words[output.length++] = prev & mask;
	
		for (i = 10; i < input.length; i++) {
		  var next = input.words[i] | 0;
		  input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
		  prev = next;
		}
		prev >>>= 22;
		input.words[i - 10] = prev;
		if (prev === 0 && input.length > 10) {
		  input.length -= 10;
		} else {
		  input.length -= 9;
		}
	  };
	
	  K256.prototype.imulK = function imulK (num) {
		// K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		num.words[num.length] = 0;
		num.words[num.length + 1] = 0;
		num.length += 2;
	
		// bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		var lo = 0;
		for (var i = 0; i < num.length; i++) {
		  var w = num.words[i] | 0;
		  lo += w * 0x3d1;
		  num.words[i] = lo & 0x3ffffff;
		  lo = w * 0x40 + ((lo / 0x4000000) | 0);
		}
	
		// Fast length reduction
		if (num.words[num.length - 1] === 0) {
		  num.length--;
		  if (num.words[num.length - 1] === 0) {
			num.length--;
		  }
		}
		return num;
	  };
	
	  function P224 () {
		MPrime.call(
		  this,
		  'p224',
		  'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);
	
	  function P192 () {
		MPrime.call(
		  this,
		  'p192',
		  'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);
	
	  function P25519 () {
		// 2 ^ 255 - 19
		MPrime.call(
		  this,
		  '25519',
		  '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);
	
	  P25519.prototype.imulK = function imulK (num) {
		// K = 0x13
		var carry = 0;
		for (var i = 0; i < num.length; i++) {
		  var hi = (num.words[i] | 0) * 0x13 + carry;
		  var lo = hi & 0x3ffffff;
		  hi >>>= 26;
	
		  num.words[i] = lo;
		  carry = hi;
		}
		if (carry !== 0) {
		  num.words[num.length++] = carry;
		}
		return num;
	  };
	
	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
		// Cached version of prime
		if (primes[name]) return primes[name];
	
		var prime;
		if (name === 'k256') {
		  prime = new K256();
		} else if (name === 'p224') {
		  prime = new P224();
		} else if (name === 'p192') {
		  prime = new P192();
		} else if (name === 'p25519') {
		  prime = new P25519();
		} else {
		  throw new Error('Unknown prime ' + name);
		}
		primes[name] = prime;
	
		return prime;
	  };
	
	  //
	  // Base reduction engine
	  //
	  function Red (m) {
		if (typeof m === 'string') {
		  var prime = BN._prime(m);
		  this.m = prime.p;
		  this.prime = prime;
		} else {
		  assert(m.gtn(1), 'modulus must be greater than 1');
		  this.m = m;
		  this.prime = null;
		}
	  }
	
	  Red.prototype._verify1 = function _verify1 (a) {
		assert(a.negative === 0, 'red works only with positives');
		assert(a.red, 'red works only with red numbers');
	  };
	
	  Red.prototype._verify2 = function _verify2 (a, b) {
		assert((a.negative | b.negative) === 0, 'red works only with positives');
		assert(a.red && a.red === b.red,
		  'red works only with red numbers');
	  };
	
	  Red.prototype.imod = function imod (a) {
		if (this.prime) return this.prime.ireduce(a)._forceRed(this);
		return a.umod(this.m)._forceRed(this);
	  };
	
	  Red.prototype.neg = function neg (a) {
		if (a.isZero()) {
		  return a.clone();
		}
	
		return this.m.sub(a)._forceRed(this);
	  };
	
	  Red.prototype.add = function add (a, b) {
		this._verify2(a, b);
	
		var res = a.add(b);
		if (res.cmp(this.m) >= 0) {
		  res.isub(this.m);
		}
		return res._forceRed(this);
	  };
	
	  Red.prototype.iadd = function iadd (a, b) {
		this._verify2(a, b);
	
		var res = a.iadd(b);
		if (res.cmp(this.m) >= 0) {
		  res.isub(this.m);
		}
		return res;
	  };
	
	  Red.prototype.sub = function sub (a, b) {
		this._verify2(a, b);
	
		var res = a.sub(b);
		if (res.cmpn(0) < 0) {
		  res.iadd(this.m);
		}
		return res._forceRed(this);
	  };
	
	  Red.prototype.isub = function isub (a, b) {
		this._verify2(a, b);
	
		var res = a.isub(b);
		if (res.cmpn(0) < 0) {
		  res.iadd(this.m);
		}
		return res;
	  };
	
	  Red.prototype.shl = function shl (a, num) {
		this._verify1(a);
		return this.imod(a.ushln(num));
	  };
	
	  Red.prototype.imul = function imul (a, b) {
		this._verify2(a, b);
		return this.imod(a.imul(b));
	  };
	
	  Red.prototype.mul = function mul (a, b) {
		this._verify2(a, b);
		return this.imod(a.mul(b));
	  };
	
	  Red.prototype.isqr = function isqr (a) {
		return this.imul(a, a.clone());
	  };
	
	  Red.prototype.sqr = function sqr (a) {
		return this.mul(a, a);
	  };
	
	  Red.prototype.sqrt = function sqrt (a) {
		if (a.isZero()) return a.clone();
	
		var mod3 = this.m.andln(3);
		assert(mod3 % 2 === 1);
	
		// Fast case
		if (mod3 === 3) {
		  var pow = this.m.add(new BN(1)).iushrn(2);
		  return this.pow(a, pow);
		}
	
		// Tonelli-Shanks algorithm (Totally unoptimized and slow)
		//
		// Find Q and S, that Q * 2 ^ S = (P - 1)
		var q = this.m.subn(1);
		var s = 0;
		while (!q.isZero() && q.andln(1) === 0) {
		  s++;
		  q.iushrn(1);
		}
		assert(!q.isZero());
	
		var one = new BN(1).toRed(this);
		var nOne = one.redNeg();
	
		// Find quadratic non-residue
		// NOTE: Max is such because of generalized Riemann hypothesis.
		var lpow = this.m.subn(1).iushrn(1);
		var z = this.m.bitLength();
		z = new BN(2 * z * z).toRed(this);
	
		while (this.pow(z, lpow).cmp(nOne) !== 0) {
		  z.redIAdd(nOne);
		}
	
		var c = this.pow(z, q);
		var r = this.pow(a, q.addn(1).iushrn(1));
		var t = this.pow(a, q);
		var m = s;
		while (t.cmp(one) !== 0) {
		  var tmp = t;
		  for (var i = 0; tmp.cmp(one) !== 0; i++) {
			tmp = tmp.redSqr();
		  }
		  assert(i < m);
		  var b = this.pow(c, new BN(1).iushln(m - i - 1));
	
		  r = r.redMul(b);
		  c = b.redSqr();
		  t = t.redMul(c);
		  m = i;
		}
	
		return r;
	  };
	
	  Red.prototype.invm = function invm (a) {
		var inv = a._invmp(this.m);
		if (inv.negative !== 0) {
		  inv.negative = 0;
		  return this.imod(inv).redNeg();
		} else {
		  return this.imod(inv);
		}
	  };
	
	  Red.prototype.pow = function pow (a, num) {
		if (num.isZero()) return new BN(1).toRed(this);
		if (num.cmpn(1) === 0) return a.clone();
	
		var windowSize = 4;
		var wnd = new Array(1 << windowSize);
		wnd[0] = new BN(1).toRed(this);
		wnd[1] = a;
		for (var i = 2; i < wnd.length; i++) {
		  wnd[i] = this.mul(wnd[i - 1], a);
		}
	
		var res = wnd[0];
		var current = 0;
		var currentLen = 0;
		var start = num.bitLength() % 26;
		if (start === 0) {
		  start = 26;
		}
	
		for (i = num.length - 1; i >= 0; i--) {
		  var word = num.words[i];
		  for (var j = start - 1; j >= 0; j--) {
			var bit = (word >> j) & 1;
			if (res !== wnd[0]) {
			  res = this.sqr(res);
			}
	
			if (bit === 0 && current === 0) {
			  currentLen = 0;
			  continue;
			}
	
			current <<= 1;
			current |= bit;
			currentLen++;
			if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
	
			res = this.mul(res, wnd[current]);
			currentLen = 0;
			current = 0;
		  }
		  start = 26;
		}
	
		return res;
	  };
	
	  Red.prototype.convertTo = function convertTo (num) {
		var r = num.umod(this.m);
	
		return r === num ? r.clone() : r;
	  };
	
	  Red.prototype.convertFrom = function convertFrom (num) {
		var res = num.clone();
		res.red = null;
		return res;
	  };
	
	  //
	  // Montgomery method engine
	  //
	
	  BN.mont = function mont (num) {
		return new Mont(num);
	  };
	
	  function Mont (m) {
		Red.call(this, m);
	
		this.shift = this.m.bitLength();
		if (this.shift % 26 !== 0) {
		  this.shift += 26 - (this.shift % 26);
		}
	
		this.r = new BN(1).iushln(this.shift);
		this.r2 = this.imod(this.r.sqr());
		this.rinv = this.r._invmp(this.m);
	
		this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		this.minv = this.minv.umod(this.r);
		this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);
	
	  Mont.prototype.convertTo = function convertTo (num) {
		return this.imod(num.ushln(this.shift));
	  };
	
	  Mont.prototype.convertFrom = function convertFrom (num) {
		var r = this.imod(num.mul(this.rinv));
		r.red = null;
		return r;
	  };
	
	  Mont.prototype.imul = function imul (a, b) {
		if (a.isZero() || b.isZero()) {
		  a.words[0] = 0;
		  a.length = 1;
		  return a;
		}
	
		var t = a.imul(b);
		var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		var u = t.isub(c).iushrn(this.shift);
		var res = u;
	
		if (u.cmp(this.m) >= 0) {
		  res = u.isub(this.m);
		} else if (u.cmpn(0) < 0) {
		  res = u.iadd(this.m);
		}
	
		return res._forceRed(this);
	  };
	
	  Mont.prototype.mul = function mul (a, b) {
		if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
	
		var t = a.mul(b);
		var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		var u = t.isub(c).iushrn(this.shift);
		var res = u;
		if (u.cmp(this.m) >= 0) {
		  res = u.isub(this.m);
		} else if (u.cmpn(0) < 0) {
		  res = u.iadd(this.m);
		}
	
		return res._forceRed(this);
	  };
	
	  Mont.prototype.invm = function invm (a) {
		// (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		var res = this.imod(a._invmp(this.m).mul(this.r2));
		return res._forceRed(this);
	  };
	})(typeof module === 'undefined' || module, this);
	
	},{"buffer":124}],3:[function(require,module,exports){
	var r;
	
	module.exports = function rand(len) {
	  if (!r)
		r = new Rand(null);
	
	  return r.generate(len);
	};
	
	function Rand(rand) {
	  this.rand = rand;
	}
	module.exports.Rand = Rand;
	
	Rand.prototype.generate = function generate(len) {
	  return this._rand(len);
	};
	
	// Emulate crypto API using randy
	Rand.prototype._rand = function _rand(n) {
	  if (this.rand.getBytes)
		return this.rand.getBytes(n);
	
	  var res = new Uint8Array(n);
	  for (var i = 0; i < res.length; i++)
		res[i] = this.rand.getByte();
	  return res;
	};
	
	if (typeof self === 'object') {
	  if (self.crypto && self.crypto.getRandomValues) {
		// Modern browsers
		Rand.prototype._rand = function _rand(n) {
		  var arr = new Uint8Array(n);
		  self.crypto.getRandomValues(arr);
		  return arr;
		};
	  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
		// IE
		Rand.prototype._rand = function _rand(n) {
		  var arr = new Uint8Array(n);
		  self.msCrypto.getRandomValues(arr);
		  return arr;
		};
	
	  // Safari's WebWorkers do not have `crypto`
	  } else if (typeof window === 'object') {
		// Old junk
		Rand.prototype._rand = function() {
		  throw new Error('Not implemented yet');
		};
	  }
	} else {
	  // Node.js or Web worker with no crypto support
	  try {
		var crypto = require('crypto');
		if (typeof crypto.randomBytes !== 'function')
		  throw new Error('Not supported');
	
		Rand.prototype._rand = function _rand(n) {
		  return crypto.randomBytes(n);
		};
	  } catch (e) {
	  }
	}
	
	},{"crypto":124}],4:[function(require,module,exports){
	var Buffer = require('safe-buffer').Buffer
	var Transform = require('stream').Transform
	var StringDecoder = require('string_decoder').StringDecoder
	var inherits = require('inherits')
	
	function CipherBase (hashMode) {
	  Transform.call(this)
	  this.hashMode = typeof hashMode === 'string'
	  if (this.hashMode) {
		this[hashMode] = this._finalOrDigest
	  } else {
		this.final = this._finalOrDigest
	  }
	  if (this._final) {
		this.__final = this._final
		this._final = null
	  }
	  this._decoder = null
	  this._encoding = null
	}
	inherits(CipherBase, Transform)
	
	CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
	  if (typeof data === 'string') {
		data = Buffer.from(data, inputEnc)
	  }
	
	  var outData = this._update(data)
	  if (this.hashMode) return this
	
	  if (outputEnc) {
		outData = this._toString(outData, outputEnc)
	  }
	
	  return outData
	}
	
	CipherBase.prototype.setAutoPadding = function () {}
	CipherBase.prototype.getAuthTag = function () {
	  throw new Error('trying to get auth tag in unsupported state')
	}
	
	CipherBase.prototype.setAuthTag = function () {
	  throw new Error('trying to set auth tag in unsupported state')
	}
	
	CipherBase.prototype.setAAD = function () {
	  throw new Error('trying to set aad in unsupported state')
	}
	
	CipherBase.prototype._transform = function (data, _, next) {
	  var err
	  try {
		if (this.hashMode) {
		  this._update(data)
		} else {
		  this.push(this._update(data))
		}
	  } catch (e) {
		err = e
	  } finally {
		next(err)
	  }
	}
	CipherBase.prototype._flush = function (done) {
	  var err
	  try {
		this.push(this.__final())
	  } catch (e) {
		err = e
	  }
	
	  done(err)
	}
	CipherBase.prototype._finalOrDigest = function (outputEnc) {
	  var outData = this.__final() || Buffer.alloc(0)
	  if (outputEnc) {
		outData = this._toString(outData, outputEnc, true)
	  }
	  return outData
	}
	
	CipherBase.prototype._toString = function (value, enc, fin) {
	  if (!this._decoder) {
		this._decoder = new StringDecoder(enc)
		this._encoding = enc
	  }
	
	  if (this._encoding !== enc) throw new Error('can\'t switch encodings')
	
	  var out = this._decoder.write(value)
	  if (fin) {
		out += this._decoder.end()
	  }
	
	  return out
	}
	
	module.exports = CipherBase
	
	},{"inherits":59,"safe-buffer":92,"stream":139,"string_decoder":173}],5:[function(require,module,exports){
	'use strict'
	var inherits = require('inherits')
	var MD5 = require('md5.js')
	var RIPEMD160 = require('ripemd160')
	var sha = require('sha.js')
	var Base = require('cipher-base')
	
	function Hash (hash) {
	  Base.call(this, 'digest')
	
	  this._hash = hash
	}
	
	inherits(Hash, Base)
	
	Hash.prototype._update = function (data) {
	  this._hash.update(data)
	}
	
	Hash.prototype._final = function () {
	  return this._hash.digest()
	}
	
	module.exports = function createHash (alg) {
	  alg = alg.toLowerCase()
	  if (alg === 'md5') return new MD5()
	  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()
	
	  return new Hash(sha(alg))
	}
	
	},{"cipher-base":4,"inherits":59,"md5.js":68,"ripemd160":89,"sha.js":97}],6:[function(require,module,exports){
	(function(self) {
	
	var irrelevant = (function (exports) {
	
	  var support = {
		searchParams: 'URLSearchParams' in self,
		iterable: 'Symbol' in self && 'iterator' in Symbol,
		blob:
		  'FileReader' in self &&
		  'Blob' in self &&
		  (function() {
			try {
			  new Blob();
			  return true
			} catch (e) {
			  return false
			}
		  })(),
		formData: 'FormData' in self,
		arrayBuffer: 'ArrayBuffer' in self
	  };
	
	  function isDataView(obj) {
		return obj && DataView.prototype.isPrototypeOf(obj)
	  }
	
	  if (support.arrayBuffer) {
		var viewClasses = [
		  '[object Int8Array]',
		  '[object Uint8Array]',
		  '[object Uint8ClampedArray]',
		  '[object Int16Array]',
		  '[object Uint16Array]',
		  '[object Int32Array]',
		  '[object Uint32Array]',
		  '[object Float32Array]',
		  '[object Float64Array]'
		];
	
		var isArrayBufferView =
		  ArrayBuffer.isView ||
		  function(obj) {
			return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
		  };
	  }
	
	  function normalizeName(name) {
		if (typeof name !== 'string') {
		  name = String(name);
		}
		if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
		  throw new TypeError('Invalid character in header field name')
		}
		return name.toLowerCase()
	  }
	
	  function normalizeValue(value) {
		if (typeof value !== 'string') {
		  value = String(value);
		}
		return value
	  }
	
	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
		var iterator = {
		  next: function() {
			var value = items.shift();
			return {done: value === undefined, value: value}
		  }
		};
	
		if (support.iterable) {
		  iterator[Symbol.iterator] = function() {
			return iterator
		  };
		}
	
		return iterator
	  }
	
	  function Headers(headers) {
		this.map = {};
	
		if (headers instanceof Headers) {
		  headers.forEach(function(value, name) {
			this.append(name, value);
		  }, this);
		} else if (Array.isArray(headers)) {
		  headers.forEach(function(header) {
			this.append(header[0], header[1]);
		  }, this);
		} else if (headers) {
		  Object.getOwnPropertyNames(headers).forEach(function(name) {
			this.append(name, headers[name]);
		  }, this);
		}
	  }
	
	  Headers.prototype.append = function(name, value) {
		name = normalizeName(name);
		value = normalizeValue(value);
		var oldValue = this.map[name];
		this.map[name] = oldValue ? oldValue + ', ' + value : value;
	  };
	
	  Headers.prototype['delete'] = function(name) {
		delete this.map[normalizeName(name)];
	  };
	
	  Headers.prototype.get = function(name) {
		name = normalizeName(name);
		return this.has(name) ? this.map[name] : null
	  };
	
	  Headers.prototype.has = function(name) {
		return this.map.hasOwnProperty(normalizeName(name))
	  };
	
	  Headers.prototype.set = function(name, value) {
		this.map[normalizeName(name)] = normalizeValue(value);
	  };
	
	  Headers.prototype.forEach = function(callback, thisArg) {
		for (var name in this.map) {
		  if (this.map.hasOwnProperty(name)) {
			callback.call(thisArg, this.map[name], name, this);
		  }
		}
	  };
	
	  Headers.prototype.keys = function() {
		var items = [];
		this.forEach(function(value, name) {
		  items.push(name);
		});
		return iteratorFor(items)
	  };
	
	  Headers.prototype.values = function() {
		var items = [];
		this.forEach(function(value) {
		  items.push(value);
		});
		return iteratorFor(items)
	  };
	
	  Headers.prototype.entries = function() {
		var items = [];
		this.forEach(function(value, name) {
		  items.push([name, value]);
		});
		return iteratorFor(items)
	  };
	
	  if (support.iterable) {
		Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
	  }
	
	  function consumed(body) {
		if (body.bodyUsed) {
		  return Promise.reject(new TypeError('Already read'))
		}
		body.bodyUsed = true;
	  }
	
	  function fileReaderReady(reader) {
		return new Promise(function(resolve, reject) {
		  reader.onload = function() {
			resolve(reader.result);
		  };
		  reader.onerror = function() {
			reject(reader.error);
		  };
		})
	  }
	
	  function readBlobAsArrayBuffer(blob) {
		var reader = new FileReader();
		var promise = fileReaderReady(reader);
		reader.readAsArrayBuffer(blob);
		return promise
	  }
	
	  function readBlobAsText(blob) {
		var reader = new FileReader();
		var promise = fileReaderReady(reader);
		reader.readAsText(blob);
		return promise
	  }
	
	  function readArrayBufferAsText(buf) {
		var view = new Uint8Array(buf);
		var chars = new Array(view.length);
	
		for (var i = 0; i < view.length; i++) {
		  chars[i] = String.fromCharCode(view[i]);
		}
		return chars.join('')
	  }
	
	  function bufferClone(buf) {
		if (buf.slice) {
		  return buf.slice(0)
		} else {
		  var view = new Uint8Array(buf.byteLength);
		  view.set(new Uint8Array(buf));
		  return view.buffer
		}
	  }
	
	  function Body() {
		this.bodyUsed = false;
	
		this._initBody = function(body) {
		  this._bodyInit = body;
		  if (!body) {
			this._bodyText = '';
		  } else if (typeof body === 'string') {
			this._bodyText = body;
		  } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
			this._bodyBlob = body;
		  } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
			this._bodyFormData = body;
		  } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
			this._bodyText = body.toString();
		  } else if (support.arrayBuffer && support.blob && isDataView(body)) {
			this._bodyArrayBuffer = bufferClone(body.buffer);
			// IE 10-11 can't handle a DataView body.
			this._bodyInit = new Blob([this._bodyArrayBuffer]);
		  } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
			this._bodyArrayBuffer = bufferClone(body);
		  } else {
			this._bodyText = body = Object.prototype.toString.call(body);
		  }
	
		  if (!this.headers.get('content-type')) {
			if (typeof body === 'string') {
			  this.headers.set('content-type', 'text/plain;charset=UTF-8');
			} else if (this._bodyBlob && this._bodyBlob.type) {
			  this.headers.set('content-type', this._bodyBlob.type);
			} else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
			  this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
			}
		  }
		};
	
		if (support.blob) {
		  this.blob = function() {
			var rejected = consumed(this);
			if (rejected) {
			  return rejected
			}
	
			if (this._bodyBlob) {
			  return Promise.resolve(this._bodyBlob)
			} else if (this._bodyArrayBuffer) {
			  return Promise.resolve(new Blob([this._bodyArrayBuffer]))
			} else if (this._bodyFormData) {
			  throw new Error('could not read FormData body as blob')
			} else {
			  return Promise.resolve(new Blob([this._bodyText]))
			}
		  };
	
		  this.arrayBuffer = function() {
			if (this._bodyArrayBuffer) {
			  return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
			} else {
			  return this.blob().then(readBlobAsArrayBuffer)
			}
		  };
		}
	
		this.text = function() {
		  var rejected = consumed(this);
		  if (rejected) {
			return rejected
		  }
	
		  if (this._bodyBlob) {
			return readBlobAsText(this._bodyBlob)
		  } else if (this._bodyArrayBuffer) {
			return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
		  } else if (this._bodyFormData) {
			throw new Error('could not read FormData body as text')
		  } else {
			return Promise.resolve(this._bodyText)
		  }
		};
	
		if (support.formData) {
		  this.formData = function() {
			return this.text().then(decode)
		  };
		}
	
		this.json = function() {
		  return this.text().then(JSON.parse)
		};
	
		return this
	  }
	
	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];
	
	  function normalizeMethod(method) {
		var upcased = method.toUpperCase();
		return methods.indexOf(upcased) > -1 ? upcased : method
	  }
	
	  function Request(input, options) {
		options = options || {};
		var body = options.body;
	
		if (input instanceof Request) {
		  if (input.bodyUsed) {
			throw new TypeError('Already read')
		  }
		  this.url = input.url;
		  this.credentials = input.credentials;
		  if (!options.headers) {
			this.headers = new Headers(input.headers);
		  }
		  this.method = input.method;
		  this.mode = input.mode;
		  this.signal = input.signal;
		  if (!body && input._bodyInit != null) {
			body = input._bodyInit;
			input.bodyUsed = true;
		  }
		} else {
		  this.url = String(input);
		}
	
		this.credentials = options.credentials || this.credentials || 'same-origin';
		if (options.headers || !this.headers) {
		  this.headers = new Headers(options.headers);
		}
		this.method = normalizeMethod(options.method || this.method || 'GET');
		this.mode = options.mode || this.mode || null;
		this.signal = options.signal || this.signal;
		this.referrer = null;
	
		if ((this.method === 'GET' || this.method === 'HEAD') && body) {
		  throw new TypeError('Body not allowed for GET or HEAD requests')
		}
		this._initBody(body);
	  }
	
	  Request.prototype.clone = function() {
		return new Request(this, {body: this._bodyInit})
	  };
	
	  function decode(body) {
		var form = new FormData();
		body
		  .trim()
		  .split('&')
		  .forEach(function(bytes) {
			if (bytes) {
			  var split = bytes.split('=');
			  var name = split.shift().replace(/\+/g, ' ');
			  var value = split.join('=').replace(/\+/g, ' ');
			  form.append(decodeURIComponent(name), decodeURIComponent(value));
			}
		  });
		return form
	  }
	
	  function parseHeaders(rawHeaders) {
		var headers = new Headers();
		// Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
		// https://tools.ietf.org/html/rfc7230#section-3.2
		var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
		preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
		  var parts = line.split(':');
		  var key = parts.shift().trim();
		  if (key) {
			var value = parts.join(':').trim();
			headers.append(key, value);
		  }
		});
		return headers
	  }
	
	  Body.call(Request.prototype);
	
	  function Response(bodyInit, options) {
		if (!options) {
		  options = {};
		}
	
		this.type = 'default';
		this.status = options.status === undefined ? 200 : options.status;
		this.ok = this.status >= 200 && this.status < 300;
		this.statusText = 'statusText' in options ? options.statusText : 'OK';
		this.headers = new Headers(options.headers);
		this.url = options.url || '';
		this._initBody(bodyInit);
	  }
	
	  Body.call(Response.prototype);
	
	  Response.prototype.clone = function() {
		return new Response(this._bodyInit, {
		  status: this.status,
		  statusText: this.statusText,
		  headers: new Headers(this.headers),
		  url: this.url
		})
	  };
	
	  Response.error = function() {
		var response = new Response(null, {status: 0, statusText: ''});
		response.type = 'error';
		return response
	  };
	
	  var redirectStatuses = [301, 302, 303, 307, 308];
	
	  Response.redirect = function(url, status) {
		if (redirectStatuses.indexOf(status) === -1) {
		  throw new RangeError('Invalid status code')
		}
	
		return new Response(null, {status: status, headers: {location: url}})
	  };
	
	  exports.DOMException = self.DOMException;
	  try {
		new exports.DOMException();
	  } catch (err) {
		exports.DOMException = function(message, name) {
		  this.message = message;
		  this.name = name;
		  var error = Error(message);
		  this.stack = error.stack;
		};
		exports.DOMException.prototype = Object.create(Error.prototype);
		exports.DOMException.prototype.constructor = exports.DOMException;
	  }
	
	  function fetch(input, init) {
		return new Promise(function(resolve, reject) {
		  var request = new Request(input, init);
	
		  if (request.signal && request.signal.aborted) {
			return reject(new exports.DOMException('Aborted', 'AbortError'))
		  }
	
		  var xhr = new XMLHttpRequest();
	
		  function abortXhr() {
			xhr.abort();
		  }
	
		  xhr.onload = function() {
			var options = {
			  status: xhr.status,
			  statusText: xhr.statusText,
			  headers: parseHeaders(xhr.getAllResponseHeaders() || '')
			};
			options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
			var body = 'response' in xhr ? xhr.response : xhr.responseText;
			resolve(new Response(body, options));
		  };
	
		  xhr.onerror = function() {
			reject(new TypeError('Network request failed'));
		  };
	
		  xhr.ontimeout = function() {
			reject(new TypeError('Network request failed'));
		  };
	
		  xhr.onabort = function() {
			reject(new exports.DOMException('Aborted', 'AbortError'));
		  };
	
		  xhr.open(request.method, request.url, true);
	
		  if (request.credentials === 'include') {
			xhr.withCredentials = true;
		  } else if (request.credentials === 'omit') {
			xhr.withCredentials = false;
		  }
	
		  if ('responseType' in xhr && support.blob) {
			xhr.responseType = 'blob';
		  }
	
		  request.headers.forEach(function(value, name) {
			xhr.setRequestHeader(name, value);
		  });
	
		  if (request.signal) {
			request.signal.addEventListener('abort', abortXhr);
	
			xhr.onreadystatechange = function() {
			  // DONE (success or failure)
			  if (xhr.readyState === 4) {
				request.signal.removeEventListener('abort', abortXhr);
			  }
			};
		  }
	
		  xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
		})
	  }
	
	  fetch.polyfill = true;
	
	  if (!self.fetch) {
		self.fetch = fetch;
		self.Headers = Headers;
		self.Request = Request;
		self.Response = Response;
	  }
	
	  exports.Headers = Headers;
	  exports.Request = Request;
	  exports.Response = Response;
	  exports.fetch = fetch;
	
	  Object.defineProperty(exports, '__esModule', { value: true });
	
	  return exports;
	
	})({});
	})(typeof self !== 'undefined' ? self : this);
	
	},{}],7:[function(require,module,exports){
	'use strict';
	
	var elliptic = exports;
	
	elliptic.version = require('../package.json').version;
	elliptic.utils = require('./elliptic/utils');
	elliptic.rand = require('brorand');
	elliptic.curve = require('./elliptic/curve');
	elliptic.curves = require('./elliptic/curves');
	
	// Protocols
	elliptic.ec = require('./elliptic/ec');
	elliptic.eddsa = require('./elliptic/eddsa');
	
	},{"../package.json":22,"./elliptic/curve":10,"./elliptic/curves":13,"./elliptic/ec":14,"./elliptic/eddsa":17,"./elliptic/utils":21,"brorand":3}],8:[function(require,module,exports){
	'use strict';
	
	var BN = require('bn.js');
	var utils = require('../utils');
	var getNAF = utils.getNAF;
	var getJSF = utils.getJSF;
	var assert = utils.assert;
	
	function BaseCurve(type, conf) {
	  this.type = type;
	  this.p = new BN(conf.p, 16);
	
	  // Use Montgomery, when there is no fast reduction for the prime
	  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
	
	  // Useful for many curves
	  this.zero = new BN(0).toRed(this.red);
	  this.one = new BN(1).toRed(this.red);
	  this.two = new BN(2).toRed(this.red);
	
	  // Curve configuration, optional
	  this.n = conf.n && new BN(conf.n, 16);
	  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
	
	  // Temporary arrays
	  this._wnafT1 = new Array(4);
	  this._wnafT2 = new Array(4);
	  this._wnafT3 = new Array(4);
	  this._wnafT4 = new Array(4);
	
	  this._bitLength = this.n ? this.n.bitLength() : 0;
	
	  // Generalized Greg Maxwell's trick
	  var adjustCount = this.n && this.p.div(this.n);
	  if (!adjustCount || adjustCount.cmpn(100) > 0) {
		this.redN = null;
	  } else {
		this._maxwellTrick = true;
		this.redN = this.n.toRed(this.red);
	  }
	}
	module.exports = BaseCurve;
	
	BaseCurve.prototype.point = function point() {
	  throw new Error('Not implemented');
	};
	
	BaseCurve.prototype.validate = function validate() {
	  throw new Error('Not implemented');
	};
	
	BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
	  assert(p.precomputed);
	  var doubles = p._getDoubles();
	
	  var naf = getNAF(k, 1, this._bitLength);
	  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
	  I /= 3;
	
	  // Translate into more windowed form
	  var repr = [];
	  var j;
	  var nafW;
	  for (j = 0; j < naf.length; j += doubles.step) {
		nafW = 0;
		for (var l = j + doubles.step - 1; l >= j; l--)
		  nafW = (nafW << 1) + naf[l];
		repr.push(nafW);
	  }
	
	  var a = this.jpoint(null, null, null);
	  var b = this.jpoint(null, null, null);
	  for (var i = I; i > 0; i--) {
		for (j = 0; j < repr.length; j++) {
		  nafW = repr[j];
		  if (nafW === i)
			b = b.mixedAdd(doubles.points[j]);
		  else if (nafW === -i)
			b = b.mixedAdd(doubles.points[j].neg());
		}
		a = a.add(b);
	  }
	  return a.toP();
	};
	
	BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
	  var w = 4;
	
	  // Precompute window
	  var nafPoints = p._getNAFPoints(w);
	  w = nafPoints.wnd;
	  var wnd = nafPoints.points;
	
	  // Get NAF form
	  var naf = getNAF(k, w, this._bitLength);
	
	  // Add `this`*(N+1) for every w-NAF index
	  var acc = this.jpoint(null, null, null);
	  for (var i = naf.length - 1; i >= 0; i--) {
		// Count zeroes
		for (var l = 0; i >= 0 && naf[i] === 0; i--)
		  l++;
		if (i >= 0)
		  l++;
		acc = acc.dblp(l);
	
		if (i < 0)
		  break;
		var z = naf[i];
		assert(z !== 0);
		if (p.type === 'affine') {
		  // J +- P
		  if (z > 0)
			acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
		  else
			acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
		} else {
		  // J +- J
		  if (z > 0)
			acc = acc.add(wnd[(z - 1) >> 1]);
		  else
			acc = acc.add(wnd[(-z - 1) >> 1].neg());
		}
	  }
	  return p.type === 'affine' ? acc.toP() : acc;
	};
	
	BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
	  points,
	  coeffs,
	  len,
	  jacobianResult) {
	  var wndWidth = this._wnafT1;
	  var wnd = this._wnafT2;
	  var naf = this._wnafT3;
	
	  // Fill all arrays
	  var max = 0;
	  var i;
	  var j;
	  var p;
	  for (i = 0; i < len; i++) {
		p = points[i];
		var nafPoints = p._getNAFPoints(defW);
		wndWidth[i] = nafPoints.wnd;
		wnd[i] = nafPoints.points;
	  }
	
	  // Comb small window NAFs
	  for (i = len - 1; i >= 1; i -= 2) {
		var a = i - 1;
		var b = i;
		if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
		  naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
		  naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
		  max = Math.max(naf[a].length, max);
		  max = Math.max(naf[b].length, max);
		  continue;
		}
	
		var comb = [
		  points[a], /* 1 */
		  null, /* 3 */
		  null, /* 5 */
		  points[b], /* 7 */
		];
	
		// Try to avoid Projective points, if possible
		if (points[a].y.cmp(points[b].y) === 0) {
		  comb[1] = points[a].add(points[b]);
		  comb[2] = points[a].toJ().mixedAdd(points[b].neg());
		} else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
		  comb[1] = points[a].toJ().mixedAdd(points[b]);
		  comb[2] = points[a].add(points[b].neg());
		} else {
		  comb[1] = points[a].toJ().mixedAdd(points[b]);
		  comb[2] = points[a].toJ().mixedAdd(points[b].neg());
		}
	
		var index = [
		  -3, /* -1 -1 */
		  -1, /* -1 0 */
		  -5, /* -1 1 */
		  -7, /* 0 -1 */
		  0, /* 0 0 */
		  7, /* 0 1 */
		  5, /* 1 -1 */
		  1, /* 1 0 */
		  3,  /* 1 1 */
		];
	
		var jsf = getJSF(coeffs[a], coeffs[b]);
		max = Math.max(jsf[0].length, max);
		naf[a] = new Array(max);
		naf[b] = new Array(max);
		for (j = 0; j < max; j++) {
		  var ja = jsf[0][j] | 0;
		  var jb = jsf[1][j] | 0;
	
		  naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
		  naf[b][j] = 0;
		  wnd[a] = comb;
		}
	  }
	
	  var acc = this.jpoint(null, null, null);
	  var tmp = this._wnafT4;
	  for (i = max; i >= 0; i--) {
		var k = 0;
	
		while (i >= 0) {
		  var zero = true;
		  for (j = 0; j < len; j++) {
			tmp[j] = naf[j][i] | 0;
			if (tmp[j] !== 0)
			  zero = false;
		  }
		  if (!zero)
			break;
		  k++;
		  i--;
		}
		if (i >= 0)
		  k++;
		acc = acc.dblp(k);
		if (i < 0)
		  break;
	
		for (j = 0; j < len; j++) {
		  var z = tmp[j];
		  p;
		  if (z === 0)
			continue;
		  else if (z > 0)
			p = wnd[j][(z - 1) >> 1];
		  else if (z < 0)
			p = wnd[j][(-z - 1) >> 1].neg();
	
		  if (p.type === 'affine')
			acc = acc.mixedAdd(p);
		  else
			acc = acc.add(p);
		}
	  }
	  // Zeroify references
	  for (i = 0; i < len; i++)
		wnd[i] = null;
	
	  if (jacobianResult)
		return acc;
	  else
		return acc.toP();
	};
	
	function BasePoint(curve, type) {
	  this.curve = curve;
	  this.type = type;
	  this.precomputed = null;
	}
	BaseCurve.BasePoint = BasePoint;
	
	BasePoint.prototype.eq = function eq(/*other*/) {
	  throw new Error('Not implemented');
	};
	
	BasePoint.prototype.validate = function validate() {
	  return this.curve.validate(this);
	};
	
	BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  bytes = utils.toArray(bytes, enc);
	
	  var len = this.p.byteLength();
	
	  // uncompressed, hybrid-odd, hybrid-even
	  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
		  bytes.length - 1 === 2 * len) {
		if (bytes[0] === 0x06)
		  assert(bytes[bytes.length - 1] % 2 === 0);
		else if (bytes[0] === 0x07)
		  assert(bytes[bytes.length - 1] % 2 === 1);
	
		var res =  this.point(bytes.slice(1, 1 + len),
		  bytes.slice(1 + len, 1 + 2 * len));
	
		return res;
	  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
				  bytes.length - 1 === len) {
		return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
	  }
	  throw new Error('Unknown point format');
	};
	
	BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
	  return this.encode(enc, true);
	};
	
	BasePoint.prototype._encode = function _encode(compact) {
	  var len = this.curve.p.byteLength();
	  var x = this.getX().toArray('be', len);
	
	  if (compact)
		return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);
	
	  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
	};
	
	BasePoint.prototype.encode = function encode(enc, compact) {
	  return utils.encode(this._encode(compact), enc);
	};
	
	BasePoint.prototype.precompute = function precompute(power) {
	  if (this.precomputed)
		return this;
	
	  var precomputed = {
		doubles: null,
		naf: null,
		beta: null,
	  };
	  precomputed.naf = this._getNAFPoints(8);
	  precomputed.doubles = this._getDoubles(4, power);
	  precomputed.beta = this._getBeta();
	  this.precomputed = precomputed;
	
	  return this;
	};
	
	BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
	  if (!this.precomputed)
		return false;
	
	  var doubles = this.precomputed.doubles;
	  if (!doubles)
		return false;
	
	  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
	};
	
	BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
	  if (this.precomputed && this.precomputed.doubles)
		return this.precomputed.doubles;
	
	  var doubles = [ this ];
	  var acc = this;
	  for (var i = 0; i < power; i += step) {
		for (var j = 0; j < step; j++)
		  acc = acc.dbl();
		doubles.push(acc);
	  }
	  return {
		step: step,
		points: doubles,
	  };
	};
	
	BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
	  if (this.precomputed && this.precomputed.naf)
		return this.precomputed.naf;
	
	  var res = [ this ];
	  var max = (1 << wnd) - 1;
	  var dbl = max === 1 ? null : this.dbl();
	  for (var i = 1; i < max; i++)
		res[i] = res[i - 1].add(dbl);
	  return {
		wnd: wnd,
		points: res,
	  };
	};
	
	BasePoint.prototype._getBeta = function _getBeta() {
	  return null;
	};
	
	BasePoint.prototype.dblp = function dblp(k) {
	  var r = this;
	  for (var i = 0; i < k; i++)
		r = r.dbl();
	  return r;
	};
	
	},{"../utils":21,"bn.js":2}],9:[function(require,module,exports){
	'use strict';
	
	var utils = require('../utils');
	var BN = require('bn.js');
	var inherits = require('inherits');
	var Base = require('./base');
	
	var assert = utils.assert;
	
	function EdwardsCurve(conf) {
	  // NOTE: Important as we are creating point in Base.call()
	  this.twisted = (conf.a | 0) !== 1;
	  this.mOneA = this.twisted && (conf.a | 0) === -1;
	  this.extended = this.mOneA;
	
	  Base.call(this, 'edwards', conf);
	
	  this.a = new BN(conf.a, 16).umod(this.red.m);
	  this.a = this.a.toRed(this.red);
	  this.c = new BN(conf.c, 16).toRed(this.red);
	  this.c2 = this.c.redSqr();
	  this.d = new BN(conf.d, 16).toRed(this.red);
	  this.dd = this.d.redAdd(this.d);
	
	  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
	  this.oneC = (conf.c | 0) === 1;
	}
	inherits(EdwardsCurve, Base);
	module.exports = EdwardsCurve;
	
	EdwardsCurve.prototype._mulA = function _mulA(num) {
	  if (this.mOneA)
		return num.redNeg();
	  else
		return this.a.redMul(num);
	};
	
	EdwardsCurve.prototype._mulC = function _mulC(num) {
	  if (this.oneC)
		return num;
	  else
		return this.c.redMul(num);
	};
	
	// Just for compatibility with Short curve
	EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
	  return this.point(x, y, z, t);
	};
	
	EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN(x, 16);
	  if (!x.red)
		x = x.toRed(this.red);
	
	  var x2 = x.redSqr();
	  var rhs = this.c2.redSub(this.a.redMul(x2));
	  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
	
	  var y2 = rhs.redMul(lhs.redInvm());
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
		throw new Error('invalid point');
	
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
		y = y.redNeg();
	
	  return this.point(x, y);
	};
	
	EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
	  y = new BN(y, 16);
	  if (!y.red)
		y = y.toRed(this.red);
	
	  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
	  var y2 = y.redSqr();
	  var lhs = y2.redSub(this.c2);
	  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
	  var x2 = lhs.redMul(rhs.redInvm());
	
	  if (x2.cmp(this.zero) === 0) {
		if (odd)
		  throw new Error('invalid point');
		else
		  return this.point(this.zero, y);
	  }
	
	  var x = x2.redSqrt();
	  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
		throw new Error('invalid point');
	
	  if (x.fromRed().isOdd() !== odd)
		x = x.redNeg();
	
	  return this.point(x, y);
	};
	
	EdwardsCurve.prototype.validate = function validate(point) {
	  if (point.isInfinity())
		return true;
	
	  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
	  point.normalize();
	
	  var x2 = point.x.redSqr();
	  var y2 = point.y.redSqr();
	  var lhs = x2.redMul(this.a).redAdd(y2);
	  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
	
	  return lhs.cmp(rhs) === 0;
	};
	
	function Point(curve, x, y, z, t) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && y === null && z === null) {
		this.x = this.curve.zero;
		this.y = this.curve.one;
		this.z = this.curve.one;
		this.t = this.curve.zero;
		this.zOne = true;
	  } else {
		this.x = new BN(x, 16);
		this.y = new BN(y, 16);
		this.z = z ? new BN(z, 16) : this.curve.one;
		this.t = t && new BN(t, 16);
		if (!this.x.red)
		  this.x = this.x.toRed(this.curve.red);
		if (!this.y.red)
		  this.y = this.y.toRed(this.curve.red);
		if (!this.z.red)
		  this.z = this.z.toRed(this.curve.red);
		if (this.t && !this.t.red)
		  this.t = this.t.toRed(this.curve.red);
		this.zOne = this.z === this.curve.one;
	
		// Use extended coordinates
		if (this.curve.extended && !this.t) {
		  this.t = this.x.redMul(this.y);
		  if (!this.zOne)
			this.t = this.t.redMul(this.z.redInvm());
		}
	  }
	}
	inherits(Point, Base.BasePoint);
	
	EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};
	
	EdwardsCurve.prototype.point = function point(x, y, z, t) {
	  return new Point(this, x, y, z, t);
	};
	
	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1], obj[2]);
	};
	
	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
		return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
		  ' y: ' + this.y.fromRed().toString(16, 2) +
		  ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};
	
	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.x.cmpn(0) === 0 &&
		(this.y.cmp(this.z) === 0 ||
		(this.zOne && this.y.cmp(this.curve.c) === 0));
	};
	
	Point.prototype._extDbl = function _extDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #doubling-dbl-2008-hwcd
	  // 4M + 4S
	
	  // A = X1^2
	  var a = this.x.redSqr();
	  // B = Y1^2
	  var b = this.y.redSqr();
	  // C = 2 * Z1^2
	  var c = this.z.redSqr();
	  c = c.redIAdd(c);
	  // D = a * A
	  var d = this.curve._mulA(a);
	  // E = (X1 + Y1)^2 - A - B
	  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
	  // G = D + B
	  var g = d.redAdd(b);
	  // F = G - C
	  var f = g.redSub(c);
	  // H = D - B
	  var h = d.redSub(b);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};
	
	Point.prototype._projDbl = function _projDbl() {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #doubling-dbl-2008-bbjlp
	  //     #doubling-dbl-2007-bl
	  // and others
	  // Generally 3M + 4S or 2M + 4S
	
	  // B = (X1 + Y1)^2
	  var b = this.x.redAdd(this.y).redSqr();
	  // C = X1^2
	  var c = this.x.redSqr();
	  // D = Y1^2
	  var d = this.y.redSqr();
	
	  var nx;
	  var ny;
	  var nz;
	  var e;
	  var h;
	  var j;
	  if (this.curve.twisted) {
		// E = a * C
		e = this.curve._mulA(c);
		// F = E + D
		var f = e.redAdd(d);
		if (this.zOne) {
		  // X3 = (B - C - D) * (F - 2)
		  nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
		  // Y3 = F * (E - D)
		  ny = f.redMul(e.redSub(d));
		  // Z3 = F^2 - 2 * F
		  nz = f.redSqr().redSub(f).redSub(f);
		} else {
		  // H = Z1^2
		  h = this.z.redSqr();
		  // J = F - 2 * H
		  j = f.redSub(h).redISub(h);
		  // X3 = (B-C-D)*J
		  nx = b.redSub(c).redISub(d).redMul(j);
		  // Y3 = F * (E - D)
		  ny = f.redMul(e.redSub(d));
		  // Z3 = F * J
		  nz = f.redMul(j);
		}
	  } else {
		// E = C + D
		e = c.redAdd(d);
		// H = (c * Z1)^2
		h = this.curve._mulC(this.z).redSqr();
		// J = E - 2 * H
		j = e.redSub(h).redSub(h);
		// X3 = c * (B - E) * J
		nx = this.curve._mulC(b.redISub(e)).redMul(j);
		// Y3 = c * E * (C - D)
		ny = this.curve._mulC(e).redMul(c.redISub(d));
		// Z3 = E * J
		nz = e.redMul(j);
	  }
	  return this.curve.point(nx, ny, nz);
	};
	
	Point.prototype.dbl = function dbl() {
	  if (this.isInfinity())
		return this;
	
	  // Double in extended coordinates
	  if (this.curve.extended)
		return this._extDbl();
	  else
		return this._projDbl();
	};
	
	Point.prototype._extAdd = function _extAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
	  //     #addition-add-2008-hwcd-3
	  // 8M
	
	  // A = (Y1 - X1) * (Y2 - X2)
	  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
	  // B = (Y1 + X1) * (Y2 + X2)
	  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
	  // C = T1 * k * T2
	  var c = this.t.redMul(this.curve.dd).redMul(p.t);
	  // D = Z1 * 2 * Z2
	  var d = this.z.redMul(p.z.redAdd(p.z));
	  // E = B - A
	  var e = b.redSub(a);
	  // F = D - C
	  var f = d.redSub(c);
	  // G = D + C
	  var g = d.redAdd(c);
	  // H = B + A
	  var h = b.redAdd(a);
	  // X3 = E * F
	  var nx = e.redMul(f);
	  // Y3 = G * H
	  var ny = g.redMul(h);
	  // T3 = E * H
	  var nt = e.redMul(h);
	  // Z3 = F * G
	  var nz = f.redMul(g);
	  return this.curve.point(nx, ny, nz, nt);
	};
	
	Point.prototype._projAdd = function _projAdd(p) {
	  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
	  //     #addition-add-2008-bbjlp
	  //     #addition-add-2007-bl
	  // 10M + 1S
	
	  // A = Z1 * Z2
	  var a = this.z.redMul(p.z);
	  // B = A^2
	  var b = a.redSqr();
	  // C = X1 * X2
	  var c = this.x.redMul(p.x);
	  // D = Y1 * Y2
	  var d = this.y.redMul(p.y);
	  // E = d * C * D
	  var e = this.curve.d.redMul(c).redMul(d);
	  // F = B - E
	  var f = b.redSub(e);
	  // G = B + E
	  var g = b.redAdd(e);
	  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
	  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
	  var nx = a.redMul(f).redMul(tmp);
	  var ny;
	  var nz;
	  if (this.curve.twisted) {
		// Y3 = A * G * (D - a * C)
		ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
		// Z3 = F * G
		nz = f.redMul(g);
	  } else {
		// Y3 = A * G * (D - C)
		ny = a.redMul(g).redMul(d.redSub(c));
		// Z3 = c * F * G
		nz = this.curve._mulC(f).redMul(g);
	  }
	  return this.curve.point(nx, ny, nz);
	};
	
	Point.prototype.add = function add(p) {
	  if (this.isInfinity())
		return p;
	  if (p.isInfinity())
		return this;
	
	  if (this.curve.extended)
		return this._extAdd(p);
	  else
		return this._projAdd(p);
	};
	
	Point.prototype.mul = function mul(k) {
	  if (this._hasDoubles(k))
		return this.curve._fixedNafMul(this, k);
	  else
		return this.curve._wnafMul(this, k);
	};
	
	Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
	};
	
	Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
	  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
	};
	
	Point.prototype.normalize = function normalize() {
	  if (this.zOne)
		return this;
	
	  // Normalize coordinates
	  var zi = this.z.redInvm();
	  this.x = this.x.redMul(zi);
	  this.y = this.y.redMul(zi);
	  if (this.t)
		this.t = this.t.redMul(zi);
	  this.z = this.curve.one;
	  this.zOne = true;
	  return this;
	};
	
	Point.prototype.neg = function neg() {
	  return this.curve.point(this.x.redNeg(),
		this.y,
		this.z,
		this.t && this.t.redNeg());
	};
	
	Point.prototype.getX = function getX() {
	  this.normalize();
	  return this.x.fromRed();
	};
	
	Point.prototype.getY = function getY() {
	  this.normalize();
	  return this.y.fromRed();
	};
	
	Point.prototype.eq = function eq(other) {
	  return this === other ||
			 this.getX().cmp(other.getX()) === 0 &&
			 this.getY().cmp(other.getY()) === 0;
	};
	
	Point.prototype.eqXToP = function eqXToP(x) {
	  var rx = x.toRed(this.curve.red).redMul(this.z);
	  if (this.x.cmp(rx) === 0)
		return true;
	
	  var xc = x.clone();
	  var t = this.curve.redN.redMul(this.z);
	  for (;;) {
		xc.iadd(this.curve.n);
		if (xc.cmp(this.curve.p) >= 0)
		  return false;
	
		rx.redIAdd(t);
		if (this.x.cmp(rx) === 0)
		  return true;
	  }
	};
	
	// Compatibility with BaseCurve
	Point.prototype.toP = Point.prototype.normalize;
	Point.prototype.mixedAdd = Point.prototype.add;
	
	},{"../utils":21,"./base":8,"bn.js":2,"inherits":59}],10:[function(require,module,exports){
	'use strict';
	
	var curve = exports;
	
	curve.base = require('./base');
	curve.short = require('./short');
	curve.mont = require('./mont');
	curve.edwards = require('./edwards');
	
	},{"./base":8,"./edwards":9,"./mont":11,"./short":12}],11:[function(require,module,exports){
	'use strict';
	
	var BN = require('bn.js');
	var inherits = require('inherits');
	var Base = require('./base');
	
	var utils = require('../utils');
	
	function MontCurve(conf) {
	  Base.call(this, 'mont', conf);
	
	  this.a = new BN(conf.a, 16).toRed(this.red);
	  this.b = new BN(conf.b, 16).toRed(this.red);
	  this.i4 = new BN(4).toRed(this.red).redInvm();
	  this.two = new BN(2).toRed(this.red);
	  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
	}
	inherits(MontCurve, Base);
	module.exports = MontCurve;
	
	MontCurve.prototype.validate = function validate(point) {
	  var x = point.normalize().x;
	  var x2 = x.redSqr();
	  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
	  var y = rhs.redSqrt();
	
	  return y.redSqr().cmp(rhs) === 0;
	};
	
	function Point(curve, x, z) {
	  Base.BasePoint.call(this, curve, 'projective');
	  if (x === null && z === null) {
		this.x = this.curve.one;
		this.z = this.curve.zero;
	  } else {
		this.x = new BN(x, 16);
		this.z = new BN(z, 16);
		if (!this.x.red)
		  this.x = this.x.toRed(this.curve.red);
		if (!this.z.red)
		  this.z = this.z.toRed(this.curve.red);
	  }
	}
	inherits(Point, Base.BasePoint);
	
	MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
	  return this.point(utils.toArray(bytes, enc), 1);
	};
	
	MontCurve.prototype.point = function point(x, z) {
	  return new Point(this, x, z);
	};
	
	MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
	  return Point.fromJSON(this, obj);
	};
	
	Point.prototype.precompute = function precompute() {
	  // No-op
	};
	
	Point.prototype._encode = function _encode() {
	  return this.getX().toArray('be', this.curve.p.byteLength());
	};
	
	Point.fromJSON = function fromJSON(curve, obj) {
	  return new Point(curve, obj[0], obj[1] || curve.one);
	};
	
	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
		return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
		  ' z: ' + this.z.fromRed().toString(16, 2) + '>';
	};
	
	Point.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};
	
	Point.prototype.dbl = function dbl() {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
	  // 2M + 2S + 4A
	
	  // A = X1 + Z1
	  var a = this.x.redAdd(this.z);
	  // AA = A^2
	  var aa = a.redSqr();
	  // B = X1 - Z1
	  var b = this.x.redSub(this.z);
	  // BB = B^2
	  var bb = b.redSqr();
	  // C = AA - BB
	  var c = aa.redSub(bb);
	  // X3 = AA * BB
	  var nx = aa.redMul(bb);
	  // Z3 = C * (BB + A24 * C)
	  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
	  return this.curve.point(nx, nz);
	};
	
	Point.prototype.add = function add() {
	  throw new Error('Not supported on Montgomery curve');
	};
	
	Point.prototype.diffAdd = function diffAdd(p, diff) {
	  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
	  // 4M + 2S + 6A
	
	  // A = X2 + Z2
	  var a = this.x.redAdd(this.z);
	  // B = X2 - Z2
	  var b = this.x.redSub(this.z);
	  // C = X3 + Z3
	  var c = p.x.redAdd(p.z);
	  // D = X3 - Z3
	  var d = p.x.redSub(p.z);
	  // DA = D * A
	  var da = d.redMul(a);
	  // CB = C * B
	  var cb = c.redMul(b);
	  // X5 = Z1 * (DA + CB)^2
	  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
	  // Z5 = X1 * (DA - CB)^2
	  var nz = diff.x.redMul(da.redISub(cb).redSqr());
	  return this.curve.point(nx, nz);
	};
	
	Point.prototype.mul = function mul(k) {
	  var t = k.clone();
	  var a = this; // (N / 2) * Q + Q
	  var b = this.curve.point(null, null); // (N / 2) * Q
	  var c = this; // Q
	
	  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
		bits.push(t.andln(1));
	
	  for (var i = bits.length - 1; i >= 0; i--) {
		if (bits[i] === 0) {
		  // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
		  a = a.diffAdd(b, c);
		  // N * Q = 2 * ((N / 2) * Q + Q))
		  b = b.dbl();
		} else {
		  // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
		  b = a.diffAdd(b, c);
		  // N * Q + Q = 2 * ((N / 2) * Q + Q)
		  a = a.dbl();
		}
	  }
	  return b;
	};
	
	Point.prototype.mulAdd = function mulAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};
	
	Point.prototype.jumlAdd = function jumlAdd() {
	  throw new Error('Not supported on Montgomery curve');
	};
	
	Point.prototype.eq = function eq(other) {
	  return this.getX().cmp(other.getX()) === 0;
	};
	
	Point.prototype.normalize = function normalize() {
	  this.x = this.x.redMul(this.z.redInvm());
	  this.z = this.curve.one;
	  return this;
	};
	
	Point.prototype.getX = function getX() {
	  // Normalize coordinates
	  this.normalize();
	
	  return this.x.fromRed();
	};
	
	},{"../utils":21,"./base":8,"bn.js":2,"inherits":59}],12:[function(require,module,exports){
	'use strict';
	
	var utils = require('../utils');
	var BN = require('bn.js');
	var inherits = require('inherits');
	var Base = require('./base');
	
	var assert = utils.assert;
	
	function ShortCurve(conf) {
	  Base.call(this, 'short', conf);
	
	  this.a = new BN(conf.a, 16).toRed(this.red);
	  this.b = new BN(conf.b, 16).toRed(this.red);
	  this.tinv = this.two.redInvm();
	
	  this.zeroA = this.a.fromRed().cmpn(0) === 0;
	  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
	
	  // If the curve is endomorphic, precalculate beta and lambda
	  this.endo = this._getEndomorphism(conf);
	  this._endoWnafT1 = new Array(4);
	  this._endoWnafT2 = new Array(4);
	}
	inherits(ShortCurve, Base);
	module.exports = ShortCurve;
	
	ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
	  // No efficient endomorphism
	  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
		return;
	
	  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
	  var beta;
	  var lambda;
	  if (conf.beta) {
		beta = new BN(conf.beta, 16).toRed(this.red);
	  } else {
		var betas = this._getEndoRoots(this.p);
		// Choose the smallest beta
		beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
		beta = beta.toRed(this.red);
	  }
	  if (conf.lambda) {
		lambda = new BN(conf.lambda, 16);
	  } else {
		// Choose the lambda that is matching selected beta
		var lambdas = this._getEndoRoots(this.n);
		if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
		  lambda = lambdas[0];
		} else {
		  lambda = lambdas[1];
		  assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
		}
	  }
	
	  // Get basis vectors, used for balanced length-two representation
	  var basis;
	  if (conf.basis) {
		basis = conf.basis.map(function(vec) {
		  return {
			a: new BN(vec.a, 16),
			b: new BN(vec.b, 16),
		  };
		});
	  } else {
		basis = this._getEndoBasis(lambda);
	  }
	
	  return {
		beta: beta,
		lambda: lambda,
		basis: basis,
	  };
	};
	
	ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
	  // Find roots of for x^2 + x + 1 in F
	  // Root = (-1 +- Sqrt(-3)) / 2
	  //
	  var red = num === this.p ? this.red : BN.mont(num);
	  var tinv = new BN(2).toRed(red).redInvm();
	  var ntinv = tinv.redNeg();
	
	  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
	
	  var l1 = ntinv.redAdd(s).fromRed();
	  var l2 = ntinv.redSub(s).fromRed();
	  return [ l1, l2 ];
	};
	
	ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
	  // aprxSqrt >= sqrt(this.n)
	  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
	
	  // 3.74
	  // Run EGCD, until r(L + 1) < aprxSqrt
	  var u = lambda;
	  var v = this.n.clone();
	  var x1 = new BN(1);
	  var y1 = new BN(0);
	  var x2 = new BN(0);
	  var y2 = new BN(1);
	
	  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
	  var a0;
	  var b0;
	  // First vector
	  var a1;
	  var b1;
	  // Second vector
	  var a2;
	  var b2;
	
	  var prevR;
	  var i = 0;
	  var r;
	  var x;
	  while (u.cmpn(0) !== 0) {
		var q = v.div(u);
		r = v.sub(q.mul(u));
		x = x2.sub(q.mul(x1));
		var y = y2.sub(q.mul(y1));
	
		if (!a1 && r.cmp(aprxSqrt) < 0) {
		  a0 = prevR.neg();
		  b0 = x1;
		  a1 = r.neg();
		  b1 = x;
		} else if (a1 && ++i === 2) {
		  break;
		}
		prevR = r;
	
		v = u;
		u = r;
		x2 = x1;
		x1 = x;
		y2 = y1;
		y1 = y;
	  }
	  a2 = r.neg();
	  b2 = x;
	
	  var len1 = a1.sqr().add(b1.sqr());
	  var len2 = a2.sqr().add(b2.sqr());
	  if (len2.cmp(len1) >= 0) {
		a2 = a0;
		b2 = b0;
	  }
	
	  // Normalize signs
	  if (a1.negative) {
		a1 = a1.neg();
		b1 = b1.neg();
	  }
	  if (a2.negative) {
		a2 = a2.neg();
		b2 = b2.neg();
	  }
	
	  return [
		{ a: a1, b: b1 },
		{ a: a2, b: b2 },
	  ];
	};
	
	ShortCurve.prototype._endoSplit = function _endoSplit(k) {
	  var basis = this.endo.basis;
	  var v1 = basis[0];
	  var v2 = basis[1];
	
	  var c1 = v2.b.mul(k).divRound(this.n);
	  var c2 = v1.b.neg().mul(k).divRound(this.n);
	
	  var p1 = c1.mul(v1.a);
	  var p2 = c2.mul(v2.a);
	  var q1 = c1.mul(v1.b);
	  var q2 = c2.mul(v2.b);
	
	  // Calculate answer
	  var k1 = k.sub(p1).sub(p2);
	  var k2 = q1.add(q2).neg();
	  return { k1: k1, k2: k2 };
	};
	
	ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
	  x = new BN(x, 16);
	  if (!x.red)
		x = x.toRed(this.red);
	
	  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
	  var y = y2.redSqrt();
	  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
		throw new Error('invalid point');
	
	  // XXX Is there any way to tell if the number is odd without converting it
	  // to non-red form?
	  var isOdd = y.fromRed().isOdd();
	  if (odd && !isOdd || !odd && isOdd)
		y = y.redNeg();
	
	  return this.point(x, y);
	};
	
	ShortCurve.prototype.validate = function validate(point) {
	  if (point.inf)
		return true;
	
	  var x = point.x;
	  var y = point.y;
	
	  var ax = this.a.redMul(x);
	  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
	  return y.redSqr().redISub(rhs).cmpn(0) === 0;
	};
	
	ShortCurve.prototype._endoWnafMulAdd =
		function _endoWnafMulAdd(points, coeffs, jacobianResult) {
		  var npoints = this._endoWnafT1;
		  var ncoeffs = this._endoWnafT2;
		  for (var i = 0; i < points.length; i++) {
			var split = this._endoSplit(coeffs[i]);
			var p = points[i];
			var beta = p._getBeta();
	
			if (split.k1.negative) {
			  split.k1.ineg();
			  p = p.neg(true);
			}
			if (split.k2.negative) {
			  split.k2.ineg();
			  beta = beta.neg(true);
			}
	
			npoints[i * 2] = p;
			npoints[i * 2 + 1] = beta;
			ncoeffs[i * 2] = split.k1;
			ncoeffs[i * 2 + 1] = split.k2;
		  }
		  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
	
		  // Clean-up references to points and coefficients
		  for (var j = 0; j < i * 2; j++) {
			npoints[j] = null;
			ncoeffs[j] = null;
		  }
		  return res;
		};
	
	function Point(curve, x, y, isRed) {
	  Base.BasePoint.call(this, curve, 'affine');
	  if (x === null && y === null) {
		this.x = null;
		this.y = null;
		this.inf = true;
	  } else {
		this.x = new BN(x, 16);
		this.y = new BN(y, 16);
		// Force redgomery representation when loading from JSON
		if (isRed) {
		  this.x.forceRed(this.curve.red);
		  this.y.forceRed(this.curve.red);
		}
		if (!this.x.red)
		  this.x = this.x.toRed(this.curve.red);
		if (!this.y.red)
		  this.y = this.y.toRed(this.curve.red);
		this.inf = false;
	  }
	}
	inherits(Point, Base.BasePoint);
	
	ShortCurve.prototype.point = function point(x, y, isRed) {
	  return new Point(this, x, y, isRed);
	};
	
	ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
	  return Point.fromJSON(this, obj, red);
	};
	
	Point.prototype._getBeta = function _getBeta() {
	  if (!this.curve.endo)
		return;
	
	  var pre = this.precomputed;
	  if (pre && pre.beta)
		return pre.beta;
	
	  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
	  if (pre) {
		var curve = this.curve;
		var endoMul = function(p) {
		  return curve.point(p.x.redMul(curve.endo.beta), p.y);
		};
		pre.beta = beta;
		beta.precomputed = {
		  beta: null,
		  naf: pre.naf && {
			wnd: pre.naf.wnd,
			points: pre.naf.points.map(endoMul),
		  },
		  doubles: pre.doubles && {
			step: pre.doubles.step,
			points: pre.doubles.points.map(endoMul),
		  },
		};
	  }
	  return beta;
	};
	
	Point.prototype.toJSON = function toJSON() {
	  if (!this.precomputed)
		return [ this.x, this.y ];
	
	  return [ this.x, this.y, this.precomputed && {
		doubles: this.precomputed.doubles && {
		  step: this.precomputed.doubles.step,
		  points: this.precomputed.doubles.points.slice(1),
		},
		naf: this.precomputed.naf && {
		  wnd: this.precomputed.naf.wnd,
		  points: this.precomputed.naf.points.slice(1),
		},
	  } ];
	};
	
	Point.fromJSON = function fromJSON(curve, obj, red) {
	  if (typeof obj === 'string')
		obj = JSON.parse(obj);
	  var res = curve.point(obj[0], obj[1], red);
	  if (!obj[2])
		return res;
	
	  function obj2point(obj) {
		return curve.point(obj[0], obj[1], red);
	  }
	
	  var pre = obj[2];
	  res.precomputed = {
		beta: null,
		doubles: pre.doubles && {
		  step: pre.doubles.step,
		  points: [ res ].concat(pre.doubles.points.map(obj2point)),
		},
		naf: pre.naf && {
		  wnd: pre.naf.wnd,
		  points: [ res ].concat(pre.naf.points.map(obj2point)),
		},
	  };
	  return res;
	};
	
	Point.prototype.inspect = function inspect() {
	  if (this.isInfinity())
		return '<EC Point Infinity>';
	  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
		  ' y: ' + this.y.fromRed().toString(16, 2) + '>';
	};
	
	Point.prototype.isInfinity = function isInfinity() {
	  return this.inf;
	};
	
	Point.prototype.add = function add(p) {
	  // O + P = P
	  if (this.inf)
		return p;
	
	  // P + O = P
	  if (p.inf)
		return this;
	
	  // P + P = 2P
	  if (this.eq(p))
		return this.dbl();
	
	  // P + (-P) = O
	  if (this.neg().eq(p))
		return this.curve.point(null, null);
	
	  // P + Q = O
	  if (this.x.cmp(p.x) === 0)
		return this.curve.point(null, null);
	
	  var c = this.y.redSub(p.y);
	  if (c.cmpn(0) !== 0)
		c = c.redMul(this.x.redSub(p.x).redInvm());
	  var nx = c.redSqr().redISub(this.x).redISub(p.x);
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};
	
	Point.prototype.dbl = function dbl() {
	  if (this.inf)
		return this;
	
	  // 2P = O
	  var ys1 = this.y.redAdd(this.y);
	  if (ys1.cmpn(0) === 0)
		return this.curve.point(null, null);
	
	  var a = this.curve.a;
	
	  var x2 = this.x.redSqr();
	  var dyinv = ys1.redInvm();
	  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
	
	  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
	  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
	  return this.curve.point(nx, ny);
	};
	
	Point.prototype.getX = function getX() {
	  return this.x.fromRed();
	};
	
	Point.prototype.getY = function getY() {
	  return this.y.fromRed();
	};
	
	Point.prototype.mul = function mul(k) {
	  k = new BN(k, 16);
	  if (this.isInfinity())
		return this;
	  else if (this._hasDoubles(k))
		return this.curve._fixedNafMul(this, k);
	  else if (this.curve.endo)
		return this.curve._endoWnafMulAdd([ this ], [ k ]);
	  else
		return this.curve._wnafMul(this, k);
	};
	
	Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
		return this.curve._endoWnafMulAdd(points, coeffs);
	  else
		return this.curve._wnafMulAdd(1, points, coeffs, 2);
	};
	
	Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
	  var points = [ this, p2 ];
	  var coeffs = [ k1, k2 ];
	  if (this.curve.endo)
		return this.curve._endoWnafMulAdd(points, coeffs, true);
	  else
		return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
	};
	
	Point.prototype.eq = function eq(p) {
	  return this === p ||
			 this.inf === p.inf &&
				 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
	};
	
	Point.prototype.neg = function neg(_precompute) {
	  if (this.inf)
		return this;
	
	  var res = this.curve.point(this.x, this.y.redNeg());
	  if (_precompute && this.precomputed) {
		var pre = this.precomputed;
		var negate = function(p) {
		  return p.neg();
		};
		res.precomputed = {
		  naf: pre.naf && {
			wnd: pre.naf.wnd,
			points: pre.naf.points.map(negate),
		  },
		  doubles: pre.doubles && {
			step: pre.doubles.step,
			points: pre.doubles.points.map(negate),
		  },
		};
	  }
	  return res;
	};
	
	Point.prototype.toJ = function toJ() {
	  if (this.inf)
		return this.curve.jpoint(null, null, null);
	
	  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
	  return res;
	};
	
	function JPoint(curve, x, y, z) {
	  Base.BasePoint.call(this, curve, 'jacobian');
	  if (x === null && y === null && z === null) {
		this.x = this.curve.one;
		this.y = this.curve.one;
		this.z = new BN(0);
	  } else {
		this.x = new BN(x, 16);
		this.y = new BN(y, 16);
		this.z = new BN(z, 16);
	  }
	  if (!this.x.red)
		this.x = this.x.toRed(this.curve.red);
	  if (!this.y.red)
		this.y = this.y.toRed(this.curve.red);
	  if (!this.z.red)
		this.z = this.z.toRed(this.curve.red);
	
	  this.zOne = this.z === this.curve.one;
	}
	inherits(JPoint, Base.BasePoint);
	
	ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
	  return new JPoint(this, x, y, z);
	};
	
	JPoint.prototype.toP = function toP() {
	  if (this.isInfinity())
		return this.curve.point(null, null);
	
	  var zinv = this.z.redInvm();
	  var zinv2 = zinv.redSqr();
	  var ax = this.x.redMul(zinv2);
	  var ay = this.y.redMul(zinv2).redMul(zinv);
	
	  return this.curve.point(ax, ay);
	};
	
	JPoint.prototype.neg = function neg() {
	  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
	};
	
	JPoint.prototype.add = function add(p) {
	  // O + P = P
	  if (this.isInfinity())
		return p;
	
	  // P + O = P
	  if (p.isInfinity())
		return this;
	
	  // 12M + 4S + 7A
	  var pz2 = p.z.redSqr();
	  var z2 = this.z.redSqr();
	  var u1 = this.x.redMul(pz2);
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y.redMul(pz2.redMul(p.z));
	  var s2 = p.y.redMul(z2.redMul(this.z));
	
	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
		if (r.cmpn(0) !== 0)
		  return this.curve.jpoint(null, null, null);
		else
		  return this.dbl();
	  }
	
	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);
	
	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(p.z).redMul(h);
	
	  return this.curve.jpoint(nx, ny, nz);
	};
	
	JPoint.prototype.mixedAdd = function mixedAdd(p) {
	  // O + P = P
	  if (this.isInfinity())
		return p.toJ();
	
	  // P + O = P
	  if (p.isInfinity())
		return this;
	
	  // 8M + 3S + 7A
	  var z2 = this.z.redSqr();
	  var u1 = this.x;
	  var u2 = p.x.redMul(z2);
	  var s1 = this.y;
	  var s2 = p.y.redMul(z2).redMul(this.z);
	
	  var h = u1.redSub(u2);
	  var r = s1.redSub(s2);
	  if (h.cmpn(0) === 0) {
		if (r.cmpn(0) !== 0)
		  return this.curve.jpoint(null, null, null);
		else
		  return this.dbl();
	  }
	
	  var h2 = h.redSqr();
	  var h3 = h2.redMul(h);
	  var v = u1.redMul(h2);
	
	  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
	  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
	  var nz = this.z.redMul(h);
	
	  return this.curve.jpoint(nx, ny, nz);
	};
	
	JPoint.prototype.dblp = function dblp(pow) {
	  if (pow === 0)
		return this;
	  if (this.isInfinity())
		return this;
	  if (!pow)
		return this.dbl();
	
	  var i;
	  if (this.curve.zeroA || this.curve.threeA) {
		var r = this;
		for (i = 0; i < pow; i++)
		  r = r.dbl();
		return r;
	  }
	
	  // 1M + 2S + 1A + N * (4S + 5M + 8A)
	  // N = 1 => 6M + 6S + 9A
	  var a = this.curve.a;
	  var tinv = this.curve.tinv;
	
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();
	
	  // Reuse results
	  var jyd = jy.redAdd(jy);
	  for (i = 0; i < pow; i++) {
		var jx2 = jx.redSqr();
		var jyd2 = jyd.redSqr();
		var jyd4 = jyd2.redSqr();
		var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
	
		var t1 = jx.redMul(jyd2);
		var nx = c.redSqr().redISub(t1.redAdd(t1));
		var t2 = t1.redISub(nx);
		var dny = c.redMul(t2);
		dny = dny.redIAdd(dny).redISub(jyd4);
		var nz = jyd.redMul(jz);
		if (i + 1 < pow)
		  jz4 = jz4.redMul(jyd4);
	
		jx = nx;
		jz = nz;
		jyd = dny;
	  }
	
	  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
	};
	
	JPoint.prototype.dbl = function dbl() {
	  if (this.isInfinity())
		return this;
	
	  if (this.curve.zeroA)
		return this._zeroDbl();
	  else if (this.curve.threeA)
		return this._threeDbl();
	  else
		return this._dbl();
	};
	
	JPoint.prototype._zeroDbl = function _zeroDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
		// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
		//     #doubling-mdbl-2007-bl
		// 1M + 5S + 14A
	
		// XX = X1^2
		var xx = this.x.redSqr();
		// YY = Y1^2
		var yy = this.y.redSqr();
		// YYYY = YY^2
		var yyyy = yy.redSqr();
		// S = 2 * ((X1 + YY)^2 - XX - YYYY)
		var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
		s = s.redIAdd(s);
		// M = 3 * XX + a; a = 0
		var m = xx.redAdd(xx).redIAdd(xx);
		// T = M ^ 2 - 2*S
		var t = m.redSqr().redISub(s).redISub(s);
	
		// 8 * YYYY
		var yyyy8 = yyyy.redIAdd(yyyy);
		yyyy8 = yyyy8.redIAdd(yyyy8);
		yyyy8 = yyyy8.redIAdd(yyyy8);
	
		// X3 = T
		nx = t;
		// Y3 = M * (S - T) - 8 * YYYY
		ny = m.redMul(s.redISub(t)).redISub(yyyy8);
		// Z3 = 2*Y1
		nz = this.y.redAdd(this.y);
	  } else {
		// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
		//     #doubling-dbl-2009-l
		// 2M + 5S + 13A
	
		// A = X1^2
		var a = this.x.redSqr();
		// B = Y1^2
		var b = this.y.redSqr();
		// C = B^2
		var c = b.redSqr();
		// D = 2 * ((X1 + B)^2 - A - C)
		var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
		d = d.redIAdd(d);
		// E = 3 * A
		var e = a.redAdd(a).redIAdd(a);
		// F = E^2
		var f = e.redSqr();
	
		// 8 * C
		var c8 = c.redIAdd(c);
		c8 = c8.redIAdd(c8);
		c8 = c8.redIAdd(c8);
	
		// X3 = F - 2 * D
		nx = f.redISub(d).redISub(d);
		// Y3 = E * (D - X3) - 8 * C
		ny = e.redMul(d.redISub(nx)).redISub(c8);
		// Z3 = 2 * Y1 * Z1
		nz = this.y.redMul(this.z);
		nz = nz.redIAdd(nz);
	  }
	
	  return this.curve.jpoint(nx, ny, nz);
	};
	
	JPoint.prototype._threeDbl = function _threeDbl() {
	  var nx;
	  var ny;
	  var nz;
	  // Z = 1
	  if (this.zOne) {
		// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
		//     #doubling-mdbl-2007-bl
		// 1M + 5S + 15A
	
		// XX = X1^2
		var xx = this.x.redSqr();
		// YY = Y1^2
		var yy = this.y.redSqr();
		// YYYY = YY^2
		var yyyy = yy.redSqr();
		// S = 2 * ((X1 + YY)^2 - XX - YYYY)
		var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
		s = s.redIAdd(s);
		// M = 3 * XX + a
		var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
		// T = M^2 - 2 * S
		var t = m.redSqr().redISub(s).redISub(s);
		// X3 = T
		nx = t;
		// Y3 = M * (S - T) - 8 * YYYY
		var yyyy8 = yyyy.redIAdd(yyyy);
		yyyy8 = yyyy8.redIAdd(yyyy8);
		yyyy8 = yyyy8.redIAdd(yyyy8);
		ny = m.redMul(s.redISub(t)).redISub(yyyy8);
		// Z3 = 2 * Y1
		nz = this.y.redAdd(this.y);
	  } else {
		// hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
		// 3M + 5S
	
		// delta = Z1^2
		var delta = this.z.redSqr();
		// gamma = Y1^2
		var gamma = this.y.redSqr();
		// beta = X1 * gamma
		var beta = this.x.redMul(gamma);
		// alpha = 3 * (X1 - delta) * (X1 + delta)
		var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
		alpha = alpha.redAdd(alpha).redIAdd(alpha);
		// X3 = alpha^2 - 8 * beta
		var beta4 = beta.redIAdd(beta);
		beta4 = beta4.redIAdd(beta4);
		var beta8 = beta4.redAdd(beta4);
		nx = alpha.redSqr().redISub(beta8);
		// Z3 = (Y1 + Z1)^2 - gamma - delta
		nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
		// Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
		var ggamma8 = gamma.redSqr();
		ggamma8 = ggamma8.redIAdd(ggamma8);
		ggamma8 = ggamma8.redIAdd(ggamma8);
		ggamma8 = ggamma8.redIAdd(ggamma8);
		ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
	  }
	
	  return this.curve.jpoint(nx, ny, nz);
	};
	
	JPoint.prototype._dbl = function _dbl() {
	  var a = this.curve.a;
	
	  // 4M + 6S + 10A
	  var jx = this.x;
	  var jy = this.y;
	  var jz = this.z;
	  var jz4 = jz.redSqr().redSqr();
	
	  var jx2 = jx.redSqr();
	  var jy2 = jy.redSqr();
	
	  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
	
	  var jxd4 = jx.redAdd(jx);
	  jxd4 = jxd4.redIAdd(jxd4);
	  var t1 = jxd4.redMul(jy2);
	  var nx = c.redSqr().redISub(t1.redAdd(t1));
	  var t2 = t1.redISub(nx);
	
	  var jyd8 = jy2.redSqr();
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  jyd8 = jyd8.redIAdd(jyd8);
	  var ny = c.redMul(t2).redISub(jyd8);
	  var nz = jy.redAdd(jy).redMul(jz);
	
	  return this.curve.jpoint(nx, ny, nz);
	};
	
	JPoint.prototype.trpl = function trpl() {
	  if (!this.curve.zeroA)
		return this.dbl().add(this);
	
	  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
	  // 5M + 10S + ...
	
	  // XX = X1^2
	  var xx = this.x.redSqr();
	  // YY = Y1^2
	  var yy = this.y.redSqr();
	  // ZZ = Z1^2
	  var zz = this.z.redSqr();
	  // YYYY = YY^2
	  var yyyy = yy.redSqr();
	  // M = 3 * XX + a * ZZ2; a = 0
	  var m = xx.redAdd(xx).redIAdd(xx);
	  // MM = M^2
	  var mm = m.redSqr();
	  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
	  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
	  e = e.redIAdd(e);
	  e = e.redAdd(e).redIAdd(e);
	  e = e.redISub(mm);
	  // EE = E^2
	  var ee = e.redSqr();
	  // T = 16*YYYY
	  var t = yyyy.redIAdd(yyyy);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  t = t.redIAdd(t);
	  // U = (M + E)^2 - MM - EE - T
	  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
	  // X3 = 4 * (X1 * EE - 4 * YY * U)
	  var yyu4 = yy.redMul(u);
	  yyu4 = yyu4.redIAdd(yyu4);
	  yyu4 = yyu4.redIAdd(yyu4);
	  var nx = this.x.redMul(ee).redISub(yyu4);
	  nx = nx.redIAdd(nx);
	  nx = nx.redIAdd(nx);
	  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
	  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  ny = ny.redIAdd(ny);
	  // Z3 = (Z1 + E)^2 - ZZ - EE
	  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
	
	  return this.curve.jpoint(nx, ny, nz);
	};
	
	JPoint.prototype.mul = function mul(k, kbase) {
	  k = new BN(k, kbase);
	
	  return this.curve._wnafMul(this, k);
	};
	
	JPoint.prototype.eq = function eq(p) {
	  if (p.type === 'affine')
		return this.eq(p.toJ());
	
	  if (this === p)
		return true;
	
	  // x1 * z2^2 == x2 * z1^2
	  var z2 = this.z.redSqr();
	  var pz2 = p.z.redSqr();
	  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
		return false;
	
	  // y1 * z2^3 == y2 * z1^3
	  var z3 = z2.redMul(this.z);
	  var pz3 = pz2.redMul(p.z);
	  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
	};
	
	JPoint.prototype.eqXToP = function eqXToP(x) {
	  var zs = this.z.redSqr();
	  var rx = x.toRed(this.curve.red).redMul(zs);
	  if (this.x.cmp(rx) === 0)
		return true;
	
	  var xc = x.clone();
	  var t = this.curve.redN.redMul(zs);
	  for (;;) {
		xc.iadd(this.curve.n);
		if (xc.cmp(this.curve.p) >= 0)
		  return false;
	
		rx.redIAdd(t);
		if (this.x.cmp(rx) === 0)
		  return true;
	  }
	};
	
	JPoint.prototype.inspect = function inspect() {
	  if (this.isInfinity())
		return '<EC JPoint Infinity>';
	  return '<EC JPoint x: ' + this.x.toString(16, 2) +
		  ' y: ' + this.y.toString(16, 2) +
		  ' z: ' + this.z.toString(16, 2) + '>';
	};
	
	JPoint.prototype.isInfinity = function isInfinity() {
	  // XXX This code assumes that zero is always zero in red
	  return this.z.cmpn(0) === 0;
	};
	
	},{"../utils":21,"./base":8,"bn.js":2,"inherits":59}],13:[function(require,module,exports){
	'use strict';
	
	var curves = exports;
	
	var hash = require('hash.js');
	var curve = require('./curve');
	var utils = require('./utils');
	
	var assert = utils.assert;
	
	function PresetCurve(options) {
	  if (options.type === 'short')
		this.curve = new curve.short(options);
	  else if (options.type === 'edwards')
		this.curve = new curve.edwards(options);
	  else
		this.curve = new curve.mont(options);
	  this.g = this.curve.g;
	  this.n = this.curve.n;
	  this.hash = options.hash;
	
	  assert(this.g.validate(), 'Invalid curve');
	  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
	}
	curves.PresetCurve = PresetCurve;
	
	function defineCurve(name, options) {
	  Object.defineProperty(curves, name, {
		configurable: true,
		enumerable: true,
		get: function() {
		  var curve = new PresetCurve(options);
		  Object.defineProperty(curves, name, {
			configurable: true,
			enumerable: true,
			value: curve,
		  });
		  return curve;
		},
	  });
	}
	
	defineCurve('p192', {
	  type: 'short',
	  prime: 'p192',
	  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
	  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
	  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
		'188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
		'07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
	  ],
	});
	
	defineCurve('p224', {
	  type: 'short',
	  prime: 'p224',
	  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
	  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
	  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
	  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
		'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
		'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
	  ],
	});
	
	defineCurve('p256', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
	  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
	  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
	  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
		'6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
		'4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
	  ],
	});
	
	defineCurve('p384', {
	  type: 'short',
	  prime: null,
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		 'fffffffe ffffffff 00000000 00000000 ffffffff',
	  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		 'fffffffe ffffffff 00000000 00000000 fffffffc',
	  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
		 '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
	  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
		 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
	  hash: hash.sha384,
	  gRed: false,
	  g: [
		'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
		'5502f25d bf55296c 3a545e38 72760ab7',
		'3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
		'0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
	  ],
	});
	
	defineCurve('p521', {
	  type: 'short',
	  prime: null,
	  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		 'ffffffff ffffffff ffffffff ffffffff ffffffff',
	  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		 'ffffffff ffffffff ffffffff ffffffff fffffffc',
	  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
		 '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
		 '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
	  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
		 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
		 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
	  hash: hash.sha512,
	  gRed: false,
	  g: [
		'000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
		'053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
		'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
		'00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
		'579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
		'3fad0761 353c7086 a272c240 88be9476 9fd16650',
	  ],
	});
	
	defineCurve('curve25519', {
	  type: 'mont',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '76d06',
	  b: '1',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
		'9',
	  ],
	});
	
	defineCurve('ed25519', {
	  type: 'edwards',
	  prime: 'p25519',
	  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
	  a: '-1',
	  c: '1',
	  // -121665 * (121666^(-1)) (mod P)
	  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
	  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
	  hash: hash.sha256,
	  gRed: false,
	  g: [
		'216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
	
		// 4/5
		'6666666666666666666666666666666666666666666666666666666666666658',
	  ],
	});
	
	var pre;
	try {
	  pre = require('./precomputed/secp256k1');
	} catch (e) {
	  pre = undefined;
	}
	
	defineCurve('secp256k1', {
	  type: 'short',
	  prime: 'k256',
	  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
	  a: '0',
	  b: '7',
	  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
	  h: '1',
	  hash: hash.sha256,
	
	  // Precomputed endomorphism
	  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
	  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
	  basis: [
		{
		  a: '3086d221a7d46bcde86c90e49284eb15',
		  b: '-e4437ed6010e88286f547fa90abfe4c3',
		},
		{
		  a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
		  b: '3086d221a7d46bcde86c90e49284eb15',
		},
	  ],
	
	  gRed: false,
	  g: [
		'79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
		'483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
		pre,
	  ],
	});
	
	},{"./curve":10,"./precomputed/secp256k1":20,"./utils":21,"hash.js":46}],14:[function(require,module,exports){
	'use strict';
	
	var BN = require('bn.js');
	var HmacDRBG = require('hmac-drbg');
	var utils = require('../utils');
	var curves = require('../curves');
	var rand = require('brorand');
	var assert = utils.assert;
	
	var KeyPair = require('./key');
	var Signature = require('./signature');
	
	function EC(options) {
	  if (!(this instanceof EC))
		return new EC(options);
	
	  // Shortcut `elliptic.ec(curve-name)`
	  if (typeof options === 'string') {
		assert(Object.prototype.hasOwnProperty.call(curves, options),
		  'Unknown curve ' + options);
	
		options = curves[options];
	  }
	
	  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
	  if (options instanceof curves.PresetCurve)
		options = { curve: options };
	
	  this.curve = options.curve.curve;
	  this.n = this.curve.n;
	  this.nh = this.n.ushrn(1);
	  this.g = this.curve.g;
	
	  // Point on curve
	  this.g = options.curve.g;
	  this.g.precompute(options.curve.n.bitLength() + 1);
	
	  // Hash for function for DRBG
	  this.hash = options.hash || options.curve.hash;
	}
	module.exports = EC;
	
	EC.prototype.keyPair = function keyPair(options) {
	  return new KeyPair(this, options);
	};
	
	EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
	  return KeyPair.fromPrivate(this, priv, enc);
	};
	
	EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
	  return KeyPair.fromPublic(this, pub, enc);
	};
	
	EC.prototype.genKeyPair = function genKeyPair(options) {
	  if (!options)
		options = {};
	
	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
		hash: this.hash,
		pers: options.pers,
		persEnc: options.persEnc || 'utf8',
		entropy: options.entropy || rand(this.hash.hmacStrength),
		entropyEnc: options.entropy && options.entropyEnc || 'utf8',
		nonce: this.n.toArray(),
	  });
	
	  var bytes = this.n.byteLength();
	  var ns2 = this.n.sub(new BN(2));
	  for (;;) {
		var priv = new BN(drbg.generate(bytes));
		if (priv.cmp(ns2) > 0)
		  continue;
	
		priv.iaddn(1);
		return this.keyFromPrivate(priv);
	  }
	};
	
	EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
	  var delta = msg.byteLength() * 8 - this.n.bitLength();
	  if (delta > 0)
		msg = msg.ushrn(delta);
	  if (!truncOnly && msg.cmp(this.n) >= 0)
		return msg.sub(this.n);
	  else
		return msg;
	};
	
	EC.prototype.sign = function sign(msg, key, enc, options) {
	  if (typeof enc === 'object') {
		options = enc;
		enc = null;
	  }
	  if (!options)
		options = {};
	
	  key = this.keyFromPrivate(key, enc);
	  msg = this._truncateToN(new BN(msg, 16));
	
	  // Zero-extend key to provide enough entropy
	  var bytes = this.n.byteLength();
	  var bkey = key.getPrivate().toArray('be', bytes);
	
	  // Zero-extend nonce to have the same byte size as N
	  var nonce = msg.toArray('be', bytes);
	
	  // Instantiate Hmac_DRBG
	  var drbg = new HmacDRBG({
		hash: this.hash,
		entropy: bkey,
		nonce: nonce,
		pers: options.pers,
		persEnc: options.persEnc || 'utf8',
	  });
	
	  // Number of bytes to generate
	  var ns1 = this.n.sub(new BN(1));
	
	  for (var iter = 0; ; iter++) {
		var k = options.k ?
		  options.k(iter) :
		  new BN(drbg.generate(this.n.byteLength()));
		k = this._truncateToN(k, true);
		if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
		  continue;
	
		var kp = this.g.mul(k);
		if (kp.isInfinity())
		  continue;
	
		var kpX = kp.getX();
		var r = kpX.umod(this.n);
		if (r.cmpn(0) === 0)
		  continue;
	
		var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
		s = s.umod(this.n);
		if (s.cmpn(0) === 0)
		  continue;
	
		var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
							(kpX.cmp(r) !== 0 ? 2 : 0);
	
		// Use complement of `s`, if it is > `n / 2`
		if (options.canonical && s.cmp(this.nh) > 0) {
		  s = this.n.sub(s);
		  recoveryParam ^= 1;
		}
	
		return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
	  }
	};
	
	EC.prototype.verify = function verify(msg, signature, key, enc) {
	  msg = this._truncateToN(new BN(msg, 16));
	  key = this.keyFromPublic(key, enc);
	  signature = new Signature(signature, 'hex');
	
	  // Perform primitive values validation
	  var r = signature.r;
	  var s = signature.s;
	  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
		return false;
	  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
		return false;
	
	  // Validate signature
	  var sinv = s.invm(this.n);
	  var u1 = sinv.mul(msg).umod(this.n);
	  var u2 = sinv.mul(r).umod(this.n);
	  var p;
	
	  if (!this.curve._maxwellTrick) {
		p = this.g.mulAdd(u1, key.getPublic(), u2);
		if (p.isInfinity())
		  return false;
	
		return p.getX().umod(this.n).cmp(r) === 0;
	  }
	
	  // NOTE: Greg Maxwell's trick, inspired by:
	  // https://git.io/vad3K
	
	  p = this.g.jmulAdd(u1, key.getPublic(), u2);
	  if (p.isInfinity())
		return false;
	
	  // Compare `p.x` of Jacobian point with `r`,
	  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
	  // inverse of `p.z^2`
	  return p.eqXToP(r);
	};
	
	EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
	  assert((3 & j) === j, 'The recovery param is more than two bits');
	  signature = new Signature(signature, enc);
	
	  var n = this.n;
	  var e = new BN(msg);
	  var r = signature.r;
	  var s = signature.s;
	
	  // A set LSB signifies that the y-coordinate is odd
	  var isYOdd = j & 1;
	  var isSecondKey = j >> 1;
	  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
		throw new Error('Unable to find sencond key candinate');
	
	  // 1.1. Let x = r + jn.
	  if (isSecondKey)
		r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
	  else
		r = this.curve.pointFromX(r, isYOdd);
	
	  var rInv = signature.r.invm(n);
	  var s1 = n.sub(e).mul(rInv).umod(n);
	  var s2 = s.mul(rInv).umod(n);
	
	  // 1.6.1 Compute Q = r^-1 (sR -  eG)
	  //               Q = r^-1 (sR + -eG)
	  return this.g.mulAdd(s1, r, s2);
	};
	
	EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
	  signature = new Signature(signature, enc);
	  if (signature.recoveryParam !== null)
		return signature.recoveryParam;
	
	  for (var i = 0; i < 4; i++) {
		var Qprime;
		try {
		  Qprime = this.recoverPubKey(e, signature, i);
		} catch (e) {
		  continue;
		}
	
		if (Qprime.eq(Q))
		  return i;
	  }
	  throw new Error('Unable to find valid recovery factor');
	};
	
	},{"../curves":13,"../utils":21,"./key":15,"./signature":16,"bn.js":2,"brorand":3,"hmac-drbg":58}],15:[function(require,module,exports){
	'use strict';
	
	var BN = require('bn.js');
	var utils = require('../utils');
	var assert = utils.assert;
	
	function KeyPair(ec, options) {
	  this.ec = ec;
	  this.priv = null;
	  this.pub = null;
	
	  // KeyPair(ec, { priv: ..., pub: ... })
	  if (options.priv)
		this._importPrivate(options.priv, options.privEnc);
	  if (options.pub)
		this._importPublic(options.pub, options.pubEnc);
	}
	module.exports = KeyPair;
	
	KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
	  if (pub instanceof KeyPair)
		return pub;
	
	  return new KeyPair(ec, {
		pub: pub,
		pubEnc: enc,
	  });
	};
	
	KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
	  if (priv instanceof KeyPair)
		return priv;
	
	  return new KeyPair(ec, {
		priv: priv,
		privEnc: enc,
	  });
	};
	
	KeyPair.prototype.validate = function validate() {
	  var pub = this.getPublic();
	
	  if (pub.isInfinity())
		return { result: false, reason: 'Invalid public key' };
	  if (!pub.validate())
		return { result: false, reason: 'Public key is not a point' };
	  if (!pub.mul(this.ec.curve.n).isInfinity())
		return { result: false, reason: 'Public key * N != O' };
	
	  return { result: true, reason: null };
	};
	
	KeyPair.prototype.getPublic = function getPublic(compact, enc) {
	  // compact is optional argument
	  if (typeof compact === 'string') {
		enc = compact;
		compact = null;
	  }
	
	  if (!this.pub)
		this.pub = this.ec.g.mul(this.priv);
	
	  if (!enc)
		return this.pub;
	
	  return this.pub.encode(enc, compact);
	};
	
	KeyPair.prototype.getPrivate = function getPrivate(enc) {
	  if (enc === 'hex')
		return this.priv.toString(16, 2);
	  else
		return this.priv;
	};
	
	KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
	  this.priv = new BN(key, enc || 16);
	
	  // Ensure that the priv won't be bigger than n, otherwise we may fail
	  // in fixed multiplication method
	  this.priv = this.priv.umod(this.ec.curve.n);
	};
	
	KeyPair.prototype._importPublic = function _importPublic(key, enc) {
	  if (key.x || key.y) {
		// Montgomery points only have an `x` coordinate.
		// Weierstrass/Edwards points on the other hand have both `x` and
		// `y` coordinates.
		if (this.ec.curve.type === 'mont') {
		  assert(key.x, 'Need x coordinate');
		} else if (this.ec.curve.type === 'short' ||
				   this.ec.curve.type === 'edwards') {
		  assert(key.x && key.y, 'Need both x and y coordinate');
		}
		this.pub = this.ec.curve.point(key.x, key.y);
		return;
	  }
	  this.pub = this.ec.curve.decodePoint(key, enc);
	};
	
	// ECDH
	KeyPair.prototype.derive = function derive(pub) {
	  if(!pub.validate()) {
		assert(pub.validate(), 'public point not validated');
	  }
	  return pub.mul(this.priv).getX();
	};
	
	// ECDSA
	KeyPair.prototype.sign = function sign(msg, enc, options) {
	  return this.ec.sign(msg, this, enc, options);
	};
	
	KeyPair.prototype.verify = function verify(msg, signature) {
	  return this.ec.verify(msg, signature, this);
	};
	
	KeyPair.prototype.inspect = function inspect() {
	  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
			 ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
	};
	
	},{"../utils":21,"bn.js":2}],16:[function(require,module,exports){
	'use strict';
	
	var BN = require('bn.js');
	
	var utils = require('../utils');
	var assert = utils.assert;
	
	function Signature(options, enc) {
	  if (options instanceof Signature)
		return options;
	
	  if (this._importDER(options, enc))
		return;
	
	  assert(options.r && options.s, 'Signature without r or s');
	  this.r = new BN(options.r, 16);
	  this.s = new BN(options.s, 16);
	  if (options.recoveryParam === undefined)
		this.recoveryParam = null;
	  else
		this.recoveryParam = options.recoveryParam;
	}
	module.exports = Signature;
	
	function Position() {
	  this.place = 0;
	}
	
	function getLength(buf, p) {
	  var initial = buf[p.place++];
	  if (!(initial & 0x80)) {
		return initial;
	  }
	  var octetLen = initial & 0xf;
	
	  // Indefinite length or overflow
	  if (octetLen === 0 || octetLen > 4) {
		return false;
	  }
	
	  var val = 0;
	  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
		val <<= 8;
		val |= buf[off];
		val >>>= 0;
	  }
	
	  // Leading zeroes
	  if (val <= 0x7f) {
		return false;
	  }
	
	  p.place = off;
	  return val;
	}
	
	function rmPadding(buf) {
	  var i = 0;
	  var len = buf.length - 1;
	  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
		i++;
	  }
	  if (i === 0) {
		return buf;
	  }
	  return buf.slice(i);
	}
	
	Signature.prototype._importDER = function _importDER(data, enc) {
	  data = utils.toArray(data, enc);
	  var p = new Position();
	  if (data[p.place++] !== 0x30) {
		return false;
	  }
	  var len = getLength(data, p);
	  if (len === false) {
		return false;
	  }
	  if ((len + p.place) !== data.length) {
		return false;
	  }
	  if (data[p.place++] !== 0x02) {
		return false;
	  }
	  var rlen = getLength(data, p);
	  if (rlen === false) {
		return false;
	  }
	  var r = data.slice(p.place, rlen + p.place);
	  p.place += rlen;
	  if (data[p.place++] !== 0x02) {
		return false;
	  }
	  var slen = getLength(data, p);
	  if (slen === false) {
		return false;
	  }
	  if (data.length !== slen + p.place) {
		return false;
	  }
	  var s = data.slice(p.place, slen + p.place);
	  if (r[0] === 0) {
		if (r[1] & 0x80) {
		  r = r.slice(1);
		} else {
		  // Leading zeroes
		  return false;
		}
	  }
	  if (s[0] === 0) {
		if (s[1] & 0x80) {
		  s = s.slice(1);
		} else {
		  // Leading zeroes
		  return false;
		}
	  }
	
	  this.r = new BN(r);
	  this.s = new BN(s);
	  this.recoveryParam = null;
	
	  return true;
	};
	
	function constructLength(arr, len) {
	  if (len < 0x80) {
		arr.push(len);
		return;
	  }
	  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
	  arr.push(octets | 0x80);
	  while (--octets) {
		arr.push((len >>> (octets << 3)) & 0xff);
	  }
	  arr.push(len);
	}
	
	Signature.prototype.toDER = function toDER(enc) {
	  var r = this.r.toArray();
	  var s = this.s.toArray();
	
	  // Pad values
	  if (r[0] & 0x80)
		r = [ 0 ].concat(r);
	  // Pad values
	  if (s[0] & 0x80)
		s = [ 0 ].concat(s);
	
	  r = rmPadding(r);
	  s = rmPadding(s);
	
	  while (!s[0] && !(s[1] & 0x80)) {
		s = s.slice(1);
	  }
	  var arr = [ 0x02 ];
	  constructLength(arr, r.length);
	  arr = arr.concat(r);
	  arr.push(0x02);
	  constructLength(arr, s.length);
	  var backHalf = arr.concat(s);
	  var res = [ 0x30 ];
	  constructLength(res, backHalf.length);
	  res = res.concat(backHalf);
	  return utils.encode(res, enc);
	};
	
	},{"../utils":21,"bn.js":2}],17:[function(require,module,exports){
	'use strict';
	
	var hash = require('hash.js');
	var curves = require('../curves');
	var utils = require('../utils');
	var assert = utils.assert;
	var parseBytes = utils.parseBytes;
	var KeyPair = require('./key');
	var Signature = require('./signature');
	
	function EDDSA(curve) {
	  assert(curve === 'ed25519', 'only tested with ed25519 so far');
	
	  if (!(this instanceof EDDSA))
		return new EDDSA(curve);
	
	  curve = curves[curve].curve;
	  this.curve = curve;
	  this.g = curve.g;
	  this.g.precompute(curve.n.bitLength() + 1);
	
	  this.pointClass = curve.point().constructor;
	  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
	  this.hash = hash.sha512;
	}
	
	module.exports = EDDSA;
	
	/**
	* @param {Array|String} message - message bytes
	* @param {Array|String|KeyPair} secret - secret bytes or a keypair
	* @returns {Signature} - signature
	*/
	EDDSA.prototype.sign = function sign(message, secret) {
	  message = parseBytes(message);
	  var key = this.keyFromSecret(secret);
	  var r = this.hashInt(key.messagePrefix(), message);
	  var R = this.g.mul(r);
	  var Rencoded = this.encodePoint(R);
	  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
		.mul(key.priv());
	  var S = r.add(s_).umod(this.curve.n);
	  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
	};
	
	/**
	* @param {Array} message - message bytes
	* @param {Array|String|Signature} sig - sig bytes
	* @param {Array|String|Point|KeyPair} pub - public key
	* @returns {Boolean} - true if public key matches sig of message
	*/
	EDDSA.prototype.verify = function verify(message, sig, pub) {
	  message = parseBytes(message);
	  sig = this.makeSignature(sig);
	  var key = this.keyFromPublic(pub);
	  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
	  var SG = this.g.mul(sig.S());
	  var RplusAh = sig.R().add(key.pub().mul(h));
	  return RplusAh.eq(SG);
	};
	
	EDDSA.prototype.hashInt = function hashInt() {
	  var hash = this.hash();
	  for (var i = 0; i < arguments.length; i++)
		hash.update(arguments[i]);
	  return utils.intFromLE(hash.digest()).umod(this.curve.n);
	};
	
	EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
	  return KeyPair.fromPublic(this, pub);
	};
	
	EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
	  return KeyPair.fromSecret(this, secret);
	};
	
	EDDSA.prototype.makeSignature = function makeSignature(sig) {
	  if (sig instanceof Signature)
		return sig;
	  return new Signature(this, sig);
	};
	
	/**
	* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
	*
	* EDDSA defines methods for encoding and decoding points and integers. These are
	* helper convenience methods, that pass along to utility functions implied
	* parameters.
	*
	*/
	EDDSA.prototype.encodePoint = function encodePoint(point) {
	  var enc = point.getY().toArray('le', this.encodingLength);
	  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
	  return enc;
	};
	
	EDDSA.prototype.decodePoint = function decodePoint(bytes) {
	  bytes = utils.parseBytes(bytes);
	
	  var lastIx = bytes.length - 1;
	  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
	  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
	
	  var y = utils.intFromLE(normed);
	  return this.curve.pointFromY(y, xIsOdd);
	};
	
	EDDSA.prototype.encodeInt = function encodeInt(num) {
	  return num.toArray('le', this.encodingLength);
	};
	
	EDDSA.prototype.decodeInt = function decodeInt(bytes) {
	  return utils.intFromLE(bytes);
	};
	
	EDDSA.prototype.isPoint = function isPoint(val) {
	  return val instanceof this.pointClass;
	};
	
	},{"../curves":13,"../utils":21,"./key":18,"./signature":19,"hash.js":46}],18:[function(require,module,exports){
	'use strict';
	
	var utils = require('../utils');
	var assert = utils.assert;
	var parseBytes = utils.parseBytes;
	var cachedProperty = utils.cachedProperty;
	
	/**
	* @param {EDDSA} eddsa - instance
	* @param {Object} params - public/private key parameters
	*
	* @param {Array<Byte>} [params.secret] - secret seed bytes
	* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
	* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
	*
	*/
	function KeyPair(eddsa, params) {
	  this.eddsa = eddsa;
	  this._secret = parseBytes(params.secret);
	  if (eddsa.isPoint(params.pub))
		this._pub = params.pub;
	  else
		this._pubBytes = parseBytes(params.pub);
	}
	
	KeyPair.fromPublic = function fromPublic(eddsa, pub) {
	  if (pub instanceof KeyPair)
		return pub;
	  return new KeyPair(eddsa, { pub: pub });
	};
	
	KeyPair.fromSecret = function fromSecret(eddsa, secret) {
	  if (secret instanceof KeyPair)
		return secret;
	  return new KeyPair(eddsa, { secret: secret });
	};
	
	KeyPair.prototype.secret = function secret() {
	  return this._secret;
	};
	
	cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
	  return this.eddsa.encodePoint(this.pub());
	});
	
	cachedProperty(KeyPair, 'pub', function pub() {
	  if (this._pubBytes)
		return this.eddsa.decodePoint(this._pubBytes);
	  return this.eddsa.g.mul(this.priv());
	});
	
	cachedProperty(KeyPair, 'privBytes', function privBytes() {
	  var eddsa = this.eddsa;
	  var hash = this.hash();
	  var lastIx = eddsa.encodingLength - 1;
	
	  var a = hash.slice(0, eddsa.encodingLength);
	  a[0] &= 248;
	  a[lastIx] &= 127;
	  a[lastIx] |= 64;
	
	  return a;
	});
	
	cachedProperty(KeyPair, 'priv', function priv() {
	  return this.eddsa.decodeInt(this.privBytes());
	});
	
	cachedProperty(KeyPair, 'hash', function hash() {
	  return this.eddsa.hash().update(this.secret()).digest();
	});
	
	cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
	  return this.hash().slice(this.eddsa.encodingLength);
	});
	
	KeyPair.prototype.sign = function sign(message) {
	  assert(this._secret, 'KeyPair can only verify');
	  return this.eddsa.sign(message, this);
	};
	
	KeyPair.prototype.verify = function verify(message, sig) {
	  return this.eddsa.verify(message, sig, this);
	};
	
	KeyPair.prototype.getSecret = function getSecret(enc) {
	  assert(this._secret, 'KeyPair is public only');
	  return utils.encode(this.secret(), enc);
	};
	
	KeyPair.prototype.getPublic = function getPublic(enc) {
	  return utils.encode(this.pubBytes(), enc);
	};
	
	module.exports = KeyPair;
	
	},{"../utils":21}],19:[function(require,module,exports){
	'use strict';
	
	var BN = require('bn.js');
	var utils = require('../utils');
	var assert = utils.assert;
	var cachedProperty = utils.cachedProperty;
	var parseBytes = utils.parseBytes;
	
	/**
	* @param {EDDSA} eddsa - eddsa instance
	* @param {Array<Bytes>|Object} sig -
	* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
	* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
	* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
	* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
	*/
	function Signature(eddsa, sig) {
	  this.eddsa = eddsa;
	
	  if (typeof sig !== 'object')
		sig = parseBytes(sig);
	
	  if (Array.isArray(sig)) {
		sig = {
		  R: sig.slice(0, eddsa.encodingLength),
		  S: sig.slice(eddsa.encodingLength),
		};
	  }
	
	  assert(sig.R && sig.S, 'Signature without R or S');
	
	  if (eddsa.isPoint(sig.R))
		this._R = sig.R;
	  if (sig.S instanceof BN)
		this._S = sig.S;
	
	  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
	  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
	}
	
	cachedProperty(Signature, 'S', function S() {
	  return this.eddsa.decodeInt(this.Sencoded());
	});
	
	cachedProperty(Signature, 'R', function R() {
	  return this.eddsa.decodePoint(this.Rencoded());
	});
	
	cachedProperty(Signature, 'Rencoded', function Rencoded() {
	  return this.eddsa.encodePoint(this.R());
	});
	
	cachedProperty(Signature, 'Sencoded', function Sencoded() {
	  return this.eddsa.encodeInt(this.S());
	});
	
	Signature.prototype.toBytes = function toBytes() {
	  return this.Rencoded().concat(this.Sencoded());
	};
	
	Signature.prototype.toHex = function toHex() {
	  return utils.encode(this.toBytes(), 'hex').toUpperCase();
	};
	
	module.exports = Signature;
	
	},{"../utils":21,"bn.js":2}],20:[function(require,module,exports){
	module.exports = {
	  doubles: {
		step: 4,
		points: [
		  [
			'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
			'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
		  ],
		  [
			'8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
			'11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
		  ],
		  [
			'175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
			'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
		  ],
		  [
			'363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
			'4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
		  ],
		  [
			'8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
			'4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
		  ],
		  [
			'723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
			'96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
		  ],
		  [
			'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
			'5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
		  ],
		  [
			'100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
			'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
		  ],
		  [
			'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
			'9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
		  ],
		  [
			'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
			'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
		  ],
		  [
			'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
			'9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
		  ],
		  [
			'53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
			'5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
		  ],
		  [
			'8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
			'10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
		  ],
		  [
			'385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
			'283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
		  ],
		  [
			'6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
			'7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
		  ],
		  [
			'3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
			'56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
		  ],
		  [
			'85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
			'7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
		  ],
		  [
			'948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
			'53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
		  ],
		  [
			'6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
			'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
		  ],
		  [
			'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
			'4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
		  ],
		  [
			'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
			'7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
		  ],
		  [
			'213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
			'4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
		  ],
		  [
			'4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
			'17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
		  ],
		  [
			'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
			'6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
		  ],
		  [
			'76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
			'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
		  ],
		  [
			'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
			'893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
		  ],
		  [
			'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
			'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
		  ],
		  [
			'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
			'2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
		  ],
		  [
			'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
			'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
		  ],
		  [
			'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
			'7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
		  ],
		  [
			'90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
			'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
		  ],
		  [
			'8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
			'662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
		  ],
		  [
			'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
			'1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
		  ],
		  [
			'8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
			'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
		  ],
		  [
			'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
			'2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
		  ],
		  [
			'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
			'67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
		  ],
		  [
			'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
			'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
		  ],
		  [
			'324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
			'648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
		  ],
		  [
			'4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
			'35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
		  ],
		  [
			'9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
			'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
		  ],
		  [
			'6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
			'9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
		  ],
		  [
			'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
			'40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
		  ],
		  [
			'7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
			'34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
		  ],
		  [
			'928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
			'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
		  ],
		  [
			'85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
			'1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
		  ],
		  [
			'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
			'493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
		  ],
		  [
			'827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
			'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
		  ],
		  [
			'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
			'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
		  ],
		  [
			'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
			'4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
		  ],
		  [
			'1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
			'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
		  ],
		  [
			'146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
			'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
		  ],
		  [
			'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
			'6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
		  ],
		  [
			'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
			'8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
		  ],
		  [
			'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
			'7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
		  ],
		  [
			'174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
			'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
		  ],
		  [
			'959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
			'2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
		  ],
		  [
			'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
			'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
		  ],
		  [
			'64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
			'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
		  ],
		  [
			'8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
			'38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
		  ],
		  [
			'13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
			'69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
		  ],
		  [
			'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
			'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
		  ],
		  [
			'8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
			'40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
		  ],
		  [
			'8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
			'620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
		  ],
		  [
			'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
			'7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
		  ],
		  [
			'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
			'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
		  ],
		],
	  },
	  naf: {
		wnd: 7,
		points: [
		  [
			'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
			'388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
		  ],
		  [
			'2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
			'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
		  ],
		  [
			'5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
			'6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
		  ],
		  [
			'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
			'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
		  ],
		  [
			'774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
			'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
		  ],
		  [
			'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
			'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
		  ],
		  [
			'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
			'581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
		  ],
		  [
			'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
			'4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
		  ],
		  [
			'2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
			'85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
		  ],
		  [
			'352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
			'321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
		  ],
		  [
			'2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
			'2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
		  ],
		  [
			'9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
			'73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
		  ],
		  [
			'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
			'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
		  ],
		  [
			'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
			'2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
		  ],
		  [
			'6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
			'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
		  ],
		  [
			'1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
			'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
		  ],
		  [
			'605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
			'2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
		  ],
		  [
			'62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
			'80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
		  ],
		  [
			'80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
			'1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
		  ],
		  [
			'7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
			'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
		  ],
		  [
			'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
			'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
		  ],
		  [
			'49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
			'758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
		  ],
		  [
			'77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
			'958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
		  ],
		  [
			'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
			'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
		  ],
		  [
			'463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
			'5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
		  ],
		  [
			'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
			'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
		  ],
		  [
			'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
			'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
		  ],
		  [
			'2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
			'4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
		  ],
		  [
			'7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
			'91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
		  ],
		  [
			'754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
			'673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
		  ],
		  [
			'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
			'59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
		  ],
		  [
			'186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
			'3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
		  ],
		  [
			'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
			'55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
		  ],
		  [
			'5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
			'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
		  ],
		  [
			'290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
			'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
		  ],
		  [
			'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
			'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
		  ],
		  [
			'766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
			'744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
		  ],
		  [
			'59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
			'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
		  ],
		  [
			'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
			'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
		  ],
		  [
			'7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
			'30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
		  ],
		  [
			'948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
			'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
		  ],
		  [
			'7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
			'100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
		  ],
		  [
			'3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
			'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
		  ],
		  [
			'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
			'8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
		  ],
		  [
			'1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
			'68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
		  ],
		  [
			'733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
			'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
		  ],
		  [
			'15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
			'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
		  ],
		  [
			'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
			'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
		  ],
		  [
			'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
			'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
		  ],
		  [
			'311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
			'66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
		  ],
		  [
			'34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
			'9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
		  ],
		  [
			'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
			'4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
		  ],
		  [
			'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
			'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
		  ],
		  [
			'32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
			'5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
		  ],
		  [
			'7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
			'8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
		  ],
		  [
			'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
			'8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
		  ],
		  [
			'16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
			'5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
		  ],
		  [
			'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
			'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
		  ],
		  [
			'78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
			'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
		  ],
		  [
			'494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
			'42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
		  ],
		  [
			'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
			'204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
		  ],
		  [
			'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
			'4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
		  ],
		  [
			'841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
			'73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
		  ],
		  [
			'5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
			'39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
		  ],
		  [
			'36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
			'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
		  ],
		  [
			'336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
			'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
		  ],
		  [
			'8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
			'6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
		  ],
		  [
			'1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
			'60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
		  ],
		  [
			'85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
			'3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
		  ],
		  [
			'29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
			'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
		  ],
		  [
			'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
			'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
		  ],
		  [
			'4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
			'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
		  ],
		  [
			'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
			'6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
		  ],
		  [
			'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
			'322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
		  ],
		  [
			'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
			'6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
		  ],
		  [
			'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
			'2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
		  ],
		  [
			'591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
			'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
		  ],
		  [
			'11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
			'998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
		  ],
		  [
			'3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
			'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
		  ],
		  [
			'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
			'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
		  ],
		  [
			'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
			'6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
		  ],
		  [
			'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
			'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
		  ],
		  [
			'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
			'21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
		  ],
		  [
			'347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
			'60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
		  ],
		  [
			'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
			'49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
		  ],
		  [
			'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
			'5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
		  ],
		  [
			'4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
			'7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
		  ],
		  [
			'3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
			'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
		  ],
		  [
			'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
			'8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
		  ],
		  [
			'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
			'39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
		  ],
		  [
			'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
			'62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
		  ],
		  [
			'48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
			'25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
		  ],
		  [
			'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
			'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
		  ],
		  [
			'6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
			'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
		  ],
		  [
			'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
			'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
		  ],
		  [
			'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
			'6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
		  ],
		  [
			'13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
			'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
		  ],
		  [
			'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
			'1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
		  ],
		  [
			'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
			'5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
		  ],
		  [
			'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
			'438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
		  ],
		  [
			'8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
			'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
		  ],
		  [
			'52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
			'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
		  ],
		  [
			'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
			'6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
		  ],
		  [
			'7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
			'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
		  ],
		  [
			'5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
			'9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
		  ],
		  [
			'32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
			'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
		  ],
		  [
			'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
			'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
		  ],
		  [
			'8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
			'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
		  ],
		  [
			'4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
			'67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
		  ],
		  [
			'3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
			'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
		  ],
		  [
			'674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
			'299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
		  ],
		  [
			'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
			'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
		  ],
		  [
			'30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
			'462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
		  ],
		  [
			'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
			'62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
		  ],
		  [
			'93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
			'7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
		  ],
		  [
			'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
			'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
		  ],
		  [
			'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
			'4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
		  ],
		  [
			'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
			'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
		  ],
		  [
			'463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
			'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
		  ],
		  [
			'7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
			'603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
		  ],
		  [
			'74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
			'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
		  ],
		  [
			'30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
			'553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
		  ],
		  [
			'9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
			'712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
		  ],
		  [
			'176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
			'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
		  ],
		  [
			'75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
			'9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
		  ],
		  [
			'809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
			'9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
		  ],
		  [
			'1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
			'4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
		  ],
		],
	  },
	};
	
	},{}],21:[function(require,module,exports){
	'use strict';
	
	var utils = exports;
	var BN = require('bn.js');
	var minAssert = require('minimalistic-assert');
	var minUtils = require('minimalistic-crypto-utils');
	
	utils.assert = minAssert;
	utils.toArray = minUtils.toArray;
	utils.zero2 = minUtils.zero2;
	utils.toHex = minUtils.toHex;
	utils.encode = minUtils.encode;
	
	// Represent num in a w-NAF form
	function getNAF(num, w, bits) {
	  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
	  naf.fill(0);
	
	  var ws = 1 << (w + 1);
	  var k = num.clone();
	
	  for (var i = 0; i < naf.length; i++) {
		var z;
		var mod = k.andln(ws - 1);
		if (k.isOdd()) {
		  if (mod > (ws >> 1) - 1)
			z = (ws >> 1) - mod;
		  else
			z = mod;
		  k.isubn(z);
		} else {
		  z = 0;
		}
	
		naf[i] = z;
		k.iushrn(1);
	  }
	
	  return naf;
	}
	utils.getNAF = getNAF;
	
	// Represent k1, k2 in a Joint Sparse Form
	function getJSF(k1, k2) {
	  var jsf = [
		[],
		[],
	  ];
	
	  k1 = k1.clone();
	  k2 = k2.clone();
	  var d1 = 0;
	  var d2 = 0;
	  var m8;
	  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
		// First phase
		var m14 = (k1.andln(3) + d1) & 3;
		var m24 = (k2.andln(3) + d2) & 3;
		if (m14 === 3)
		  m14 = -1;
		if (m24 === 3)
		  m24 = -1;
		var u1;
		if ((m14 & 1) === 0) {
		  u1 = 0;
		} else {
		  m8 = (k1.andln(7) + d1) & 7;
		  if ((m8 === 3 || m8 === 5) && m24 === 2)
			u1 = -m14;
		  else
			u1 = m14;
		}
		jsf[0].push(u1);
	
		var u2;
		if ((m24 & 1) === 0) {
		  u2 = 0;
		} else {
		  m8 = (k2.andln(7) + d2) & 7;
		  if ((m8 === 3 || m8 === 5) && m14 === 2)
			u2 = -m24;
		  else
			u2 = m24;
		}
		jsf[1].push(u2);
	
		// Second phase
		if (2 * d1 === u1 + 1)
		  d1 = 1 - d1;
		if (2 * d2 === u2 + 1)
		  d2 = 1 - d2;
		k1.iushrn(1);
		k2.iushrn(1);
	  }
	
	  return jsf;
	}
	utils.getJSF = getJSF;
	
	function cachedProperty(obj, name, computer) {
	  var key = '_' + name;
	  obj.prototype[name] = function cachedProperty() {
		return this[key] !== undefined ? this[key] :
		  this[key] = computer.call(this);
	  };
	}
	utils.cachedProperty = cachedProperty;
	
	function parseBytes(bytes) {
	  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
		bytes;
	}
	utils.parseBytes = parseBytes;
	
	function intFromLE(bytes) {
	  return new BN(bytes, 'hex', 'le');
	}
	utils.intFromLE = intFromLE;
	
	
	},{"bn.js":2,"minimalistic-assert":69,"minimalistic-crypto-utils":70}],22:[function(require,module,exports){
	module.exports={
	  "name": "elliptic",
	  "version": "6.5.4",
	  "description": "EC cryptography",
	  "main": "lib/elliptic.js",
	  "files": [
		"lib"
	  ],
	  "scripts": {
		"lint": "eslint lib test",
		"lint:fix": "npm run lint -- --fix",
		"unit": "istanbul test _mocha --reporter=spec test/index.js",
		"test": "npm run lint && npm run unit",
		"version": "grunt dist && git add dist/"
	  },
	  "repository": {
		"type": "git",
		"url": "git@github.com:indutny/elliptic"
	  },
	  "keywords": [
		"EC",
		"Elliptic",
		"curve",
		"Cryptography"
	  ],
	  "author": "Fedor Indutny <fedor@indutny.com>",
	  "license": "MIT",
	  "bugs": {
		"url": "https://github.com/indutny/elliptic/issues"
	  },
	  "homepage": "https://github.com/indutny/elliptic",
	  "devDependencies": {
		"brfs": "^2.0.2",
		"coveralls": "^3.1.0",
		"eslint": "^7.6.0",
		"grunt": "^1.2.1",
		"grunt-browserify": "^5.3.0",
		"grunt-cli": "^1.3.2",
		"grunt-contrib-connect": "^3.0.0",
		"grunt-contrib-copy": "^1.0.0",
		"grunt-contrib-uglify": "^5.0.0",
		"grunt-mocha-istanbul": "^5.0.2",
		"grunt-saucelabs": "^9.0.1",
		"istanbul": "^0.4.5",
		"mocha": "^8.0.1"
	  },
	  "dependencies": {
		"bn.js": "^4.11.9",
		"brorand": "^1.1.0",
		"hash.js": "^1.0.0",
		"hmac-drbg": "^1.0.1",
		"inherits": "^2.0.4",
		"minimalistic-assert": "^1.0.1",
		"minimalistic-crypto-utils": "^1.0.1"
	  }
	}
	
	},{}],23:[function(require,module,exports){
	(function (process,global){(function (){
	/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   v4.2.8+1e68dce6
	 */
	
	(function (global, factory) {
		typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.ES6Promise = factory());
	}(this, (function () { 'use strict';
	
	function objectOrFunction(x) {
	  var type = typeof x;
	  return x !== null && (type === 'object' || type === 'function');
	}
	
	function isFunction(x) {
	  return typeof x === 'function';
	}
	
	
	
	var _isArray = void 0;
	if (Array.isArray) {
	  _isArray = Array.isArray;
	} else {
	  _isArray = function (x) {
		return Object.prototype.toString.call(x) === '[object Array]';
	  };
	}
	
	var isArray = _isArray;
	
	var len = 0;
	var vertxNext = void 0;
	var customSchedulerFn = void 0;
	
	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
		// If len is 2, that means that we need to schedule an async flush.
		// If additional callbacks are queued before the queue is flushed, they
		// will be processed by this flush that we are scheduling.
		if (customSchedulerFn) {
		  customSchedulerFn(flush);
		} else {
		  scheduleFlush();
		}
	  }
	};
	
	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}
	
	function setAsap(asapFn) {
	  asap = asapFn;
	}
	
	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
	
	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	
	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
		return process.nextTick(flush);
	  };
	}
	
	// vertx
	function useVertxTimer() {
	  if (typeof vertxNext !== 'undefined') {
		return function () {
		  vertxNext(flush);
		};
	  }
	
	  return useSetTimeout();
	}
	
	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });
	
	  return function () {
		node.data = iterations = ++iterations % 2;
	  };
	}
	
	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
		return channel.port2.postMessage(0);
	  };
	}
	
	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
		return globalSetTimeout(flush, 1);
	  };
	}
	
	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
		var callback = queue[i];
		var arg = queue[i + 1];
	
		callback(arg);
	
		queue[i] = undefined;
		queue[i + 1] = undefined;
	  }
	
	  len = 0;
	}
	
	function attemptVertx() {
	  try {
		var vertx = Function('return this')().require('vertx');
		vertxNext = vertx.runOnLoop || vertx.runOnContext;
		return useVertxTimer();
	  } catch (e) {
		return useSetTimeout();
	  }
	}
	
	var scheduleFlush = void 0;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && typeof require === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}
	
	function then(onFulfillment, onRejection) {
	  var parent = this;
	
	  var child = new this.constructor(noop);
	
	  if (child[PROMISE_ID] === undefined) {
		makePromise(child);
	  }
	
	  var _state = parent._state;
	
	
	  if (_state) {
		var callback = arguments[_state - 1];
		asap(function () {
		  return invokeCallback(_state, child, callback, parent._result);
		});
	  } else {
		subscribe(parent, child, onFulfillment, onRejection);
	  }
	
	  return child;
	}
	
	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
		resolve(1);
	  });
	
	  promise.then(function(value){
		// value === 1
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.resolve(1);
	
	  promise.then(function(value){
		// value === 1
	  });
	  ```
	
	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve$1(object) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (object && typeof object === 'object' && object.constructor === Constructor) {
		return object;
	  }
	
	  var promise = new Constructor(noop);
	  resolve(promise, object);
	  return promise;
	}
	
	var PROMISE_ID = Math.random().toString(36).substring(2);
	
	function noop() {}
	
	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	
	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}
	
	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}
	
	function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
	  try {
		then$$1.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
		return e;
	  }
	}
	
	function handleForeignThenable(promise, thenable, then$$1) {
	  asap(function (promise) {
		var sealed = false;
		var error = tryThen(then$$1, thenable, function (value) {
		  if (sealed) {
			return;
		  }
		  sealed = true;
		  if (thenable !== value) {
			resolve(promise, value);
		  } else {
			fulfill(promise, value);
		  }
		}, function (reason) {
		  if (sealed) {
			return;
		  }
		  sealed = true;
	
		  reject(promise, reason);
		}, 'Settle: ' + (promise._label || ' unknown promise'));
	
		if (!sealed && error) {
		  sealed = true;
		  reject(promise, error);
		}
	  }, promise);
	}
	
	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
		fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
		reject(promise, thenable._result);
	  } else {
		subscribe(thenable, undefined, function (value) {
		  return resolve(promise, value);
		}, function (reason) {
		  return reject(promise, reason);
		});
	  }
	}
	
	function handleMaybeThenable(promise, maybeThenable, then$$1) {
	  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
		handleOwnThenable(promise, maybeThenable);
	  } else {
		if (then$$1 === undefined) {
		  fulfill(promise, maybeThenable);
		} else if (isFunction(then$$1)) {
		  handleForeignThenable(promise, maybeThenable, then$$1);
		} else {
		  fulfill(promise, maybeThenable);
		}
	  }
	}
	
	function resolve(promise, value) {
	  if (promise === value) {
		reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
		var then$$1 = void 0;
		try {
		  then$$1 = value.then;
		} catch (error) {
		  reject(promise, error);
		  return;
		}
		handleMaybeThenable(promise, value, then$$1);
	  } else {
		fulfill(promise, value);
	  }
	}
	
	function publishRejection(promise) {
	  if (promise._onerror) {
		promise._onerror(promise._result);
	  }
	
	  publish(promise);
	}
	
	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
		return;
	  }
	
	  promise._result = value;
	  promise._state = FULFILLED;
	
	  if (promise._subscribers.length !== 0) {
		asap(publish, promise);
	  }
	}
	
	function reject(promise, reason) {
	  if (promise._state !== PENDING) {
		return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;
	
	  asap(publishRejection, promise);
	}
	
	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;
	
	
	  parent._onerror = null;
	
	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;
	
	  if (length === 0 && parent._state) {
		asap(publish, parent);
	  }
	}
	
	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;
	
	  if (subscribers.length === 0) {
		return;
	  }
	
	  var child = void 0,
		  callback = void 0,
		  detail = promise._result;
	
	  for (var i = 0; i < subscribers.length; i += 3) {
		child = subscribers[i];
		callback = subscribers[i + settled];
	
		if (child) {
		  invokeCallback(settled, child, callback, detail);
		} else {
		  callback(detail);
		}
	  }
	
	  promise._subscribers.length = 0;
	}
	
	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
		  value = void 0,
		  error = void 0,
		  succeeded = true;
	
	  if (hasCallback) {
		try {
		  value = callback(detail);
		} catch (e) {
		  succeeded = false;
		  error = e;
		}
	
		if (promise === value) {
		  reject(promise, cannotReturnOwn());
		  return;
		}
	  } else {
		value = detail;
	  }
	
	  if (promise._state !== PENDING) {
		// noop
	  } else if (hasCallback && succeeded) {
		resolve(promise, value);
	  } else if (succeeded === false) {
		reject(promise, error);
	  } else if (settled === FULFILLED) {
		fulfill(promise, value);
	  } else if (settled === REJECTED) {
		reject(promise, value);
	  }
	}
	
	function initializePromise(promise, resolver) {
	  try {
		resolver(function resolvePromise(value) {
		  resolve(promise, value);
		}, function rejectPromise(reason) {
		  reject(promise, reason);
		});
	  } catch (e) {
		reject(promise, e);
	  }
	}
	
	var id = 0;
	function nextId() {
	  return id++;
	}
	
	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}
	
	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	}
	
	var Enumerator = function () {
	  function Enumerator(Constructor, input) {
		this._instanceConstructor = Constructor;
		this.promise = new Constructor(noop);
	
		if (!this.promise[PROMISE_ID]) {
		  makePromise(this.promise);
		}
	
		if (isArray(input)) {
		  this.length = input.length;
		  this._remaining = input.length;
	
		  this._result = new Array(this.length);
	
		  if (this.length === 0) {
			fulfill(this.promise, this._result);
		  } else {
			this.length = this.length || 0;
			this._enumerate(input);
			if (this._remaining === 0) {
			  fulfill(this.promise, this._result);
			}
		  }
		} else {
		  reject(this.promise, validationError());
		}
	  }
	
	  Enumerator.prototype._enumerate = function _enumerate(input) {
		for (var i = 0; this._state === PENDING && i < input.length; i++) {
		  this._eachEntry(input[i], i);
		}
	  };
	
	  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
		var c = this._instanceConstructor;
		var resolve$$1 = c.resolve;
	
	
		if (resolve$$1 === resolve$1) {
		  var _then = void 0;
		  var error = void 0;
		  var didError = false;
		  try {
			_then = entry.then;
		  } catch (e) {
			didError = true;
			error = e;
		  }
	
		  if (_then === then && entry._state !== PENDING) {
			this._settledAt(entry._state, i, entry._result);
		  } else if (typeof _then !== 'function') {
			this._remaining--;
			this._result[i] = entry;
		  } else if (c === Promise$1) {
			var promise = new c(noop);
			if (didError) {
			  reject(promise, error);
			} else {
			  handleMaybeThenable(promise, entry, _then);
			}
			this._willSettleAt(promise, i);
		  } else {
			this._willSettleAt(new c(function (resolve$$1) {
			  return resolve$$1(entry);
			}), i);
		  }
		} else {
		  this._willSettleAt(resolve$$1(entry), i);
		}
	  };
	
	  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
		var promise = this.promise;
	
	
		if (promise._state === PENDING) {
		  this._remaining--;
	
		  if (state === REJECTED) {
			reject(promise, value);
		  } else {
			this._result[i] = value;
		  }
		}
	
		if (this._remaining === 0) {
		  fulfill(promise, this._result);
		}
	  };
	
	  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
		var enumerator = this;
	
		subscribe(promise, undefined, function (value) {
		  return enumerator._settledAt(FULFILLED, i, value);
		}, function (reason) {
		  return enumerator._settledAt(REJECTED, i, reason);
		});
	  };
	
	  return Enumerator;
	}();
	
	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
		// The array here would be [ 1, 2, 3 ];
	  });
	  ```
	
	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
		// Code here never runs because there are rejected promises!
	  }, function(error) {
		// error.message === "2"
	  });
	  ```
	
	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}
	
	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.
	
	  Example:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
		setTimeout(function(){
		  resolve('promise 1');
		}, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
		setTimeout(function(){
		  resolve('promise 2');
		}, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
		// result === 'promise 2' because it was resolved before promise1
		// was resolved.
	  });
	  ```
	
	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
		setTimeout(function(){
		  resolve('promise 1');
		}, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
		setTimeout(function(){
		  reject(new Error('promise 2'));
		}, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
		// Code here never runs
	  }, function(reason){
		// reason.message === 'promise 2' because promise 2 became rejected before
		// promise 1 became fulfilled
	  });
	  ```
	
	  An example real-world use case is implementing timeouts:
	
	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```
	
	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (!isArray(entries)) {
		return new Constructor(function (_, reject) {
		  return reject(new TypeError('You must pass an array to race.'));
		});
	  } else {
		return new Constructor(function (resolve, reject) {
		  var length = entries.length;
		  for (var i = 0; i < length; i++) {
			Constructor.resolve(entries[i]).then(resolve, reject);
		  }
		});
	  }
	}
	
	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
		reject(new Error('WHOOPS'));
	  });
	
	  promise.then(function(value){
		// Code here doesn't run because the promise is rejected!
	  }, function(reason){
		// reason.message === 'WHOOPS'
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));
	
	  promise.then(function(value){
		// Code here doesn't run because the promise is rejected!
	  }, function(reason){
		// reason.message === 'WHOOPS'
	  });
	  ```
	
	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject$1(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  reject(promise, reason);
	  return promise;
	}
	
	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}
	
	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}
	
	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.
	
	  Terminology
	  -----------
	
	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.
	
	  A promise can be in one of three states: pending, fulfilled, or rejected.
	
	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.
	
	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.
	
	
	  Basic Usage:
	  ------------
	
	  ```js
	  let promise = new Promise(function(resolve, reject) {
		// on success
		resolve(value);
	
		// on failure
		reject(reason);
	  });
	
	  promise.then(function(value) {
		// on fulfillment
	  }, function(reason) {
		// on rejection
	  });
	  ```
	
	  Advanced Usage:
	  ---------------
	
	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.
	
	  ```js
	  function getJSON(url) {
		return new Promise(function(resolve, reject){
		  let xhr = new XMLHttpRequest();
	
		  xhr.open('GET', url);
		  xhr.onreadystatechange = handler;
		  xhr.responseType = 'json';
		  xhr.setRequestHeader('Accept', 'application/json');
		  xhr.send();
	
		  function handler() {
			if (this.readyState === this.DONE) {
			  if (this.status === 200) {
				resolve(this.response);
			  } else {
				reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
			  }
			}
		  };
		});
	  }
	
	  getJSON('/posts.json').then(function(json) {
		// on fulfillment
	  }, function(reason) {
		// on rejection
	  });
	  ```
	
	  Unlike callbacks, promises are great composable primitives.
	
	  ```js
	  Promise.all([
		getJSON('/posts'),
		getJSON('/comments')
	  ]).then(function(values){
		values[0] // => postsJSON
		values[1] // => commentsJSON
	
		return values;
	  });
	  ```
	
	  @class Promise
	  @param {Function} resolver
	  Useful for tooling.
	  @constructor
	*/
	
	var Promise$1 = function () {
	  function Promise(resolver) {
		this[PROMISE_ID] = nextId();
		this._result = this._state = undefined;
		this._subscribers = [];
	
		if (noop !== resolver) {
		  typeof resolver !== 'function' && needsResolver();
		  this instanceof Promise ? initializePromise(this, resolver) : needsNew();
		}
	  }
	
	  /**
	  The primary way of interacting with a promise is through its `then` method,
	  which registers callbacks to receive either a promise's eventual value or the
	  reason why the promise cannot be fulfilled.
	   ```js
	  findUser().then(function(user){
		// user is available
	  }, function(reason){
		// user is unavailable, and you are given the reason why
	  });
	  ```
	   Chaining
	  --------
	   The return value of `then` is itself a promise.  This second, 'downstream'
	  promise is resolved with the return value of the first promise's fulfillment
	  or rejection handler, or rejected if the handler throws an exception.
	   ```js
	  findUser().then(function (user) {
		return user.name;
	  }, function (reason) {
		return 'default name';
	  }).then(function (userName) {
		// If `findUser` fulfilled, `userName` will be the user's name, otherwise it
		// will be `'default name'`
	  });
	   findUser().then(function (user) {
		throw new Error('Found user, but still unhappy');
	  }, function (reason) {
		throw new Error('`findUser` rejected and we're unhappy');
	  }).then(function (value) {
		// never reached
	  }, function (reason) {
		// if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
		// If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	  });
	  ```
	  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	   ```js
	  findUser().then(function (user) {
		throw new PedagogicalException('Upstream error');
	  }).then(function (value) {
		// never reached
	  }).then(function (value) {
		// never reached
	  }, function (reason) {
		// The `PedgagocialException` is propagated all the way down to here
	  });
	  ```
	   Assimilation
	  ------------
	   Sometimes the value you want to propagate to a downstream promise can only be
	  retrieved asynchronously. This can be achieved by returning a promise in the
	  fulfillment or rejection handler. The downstream promise will then be pending
	  until the returned promise is settled. This is called *assimilation*.
	   ```js
	  findUser().then(function (user) {
		return findCommentsByAuthor(user);
	  }).then(function (comments) {
		// The user's comments are now available
	  });
	  ```
	   If the assimliated promise rejects, then the downstream promise will also reject.
	   ```js
	  findUser().then(function (user) {
		return findCommentsByAuthor(user);
	  }).then(function (comments) {
		// If `findCommentsByAuthor` fulfills, we'll have the value here
	  }, function (reason) {
		// If `findCommentsByAuthor` rejects, we'll have the reason here
	  });
	  ```
	   Simple Example
	  --------------
	   Synchronous Example
	   ```javascript
	  let result;
	   try {
		result = findResult();
		// success
	  } catch(reason) {
		// failure
	  }
	  ```
	   Errback Example
	   ```js
	  findResult(function(result, err){
		if (err) {
		  // failure
		} else {
		  // success
		}
	  });
	  ```
	   Promise Example;
	   ```javascript
	  findResult().then(function(result){
		// success
	  }, function(reason){
		// failure
	  });
	  ```
	   Advanced Example
	  --------------
	   Synchronous Example
	   ```javascript
	  let author, books;
	   try {
		author = findAuthor();
		books  = findBooksByAuthor(author);
		// success
	  } catch(reason) {
		// failure
	  }
	  ```
	   Errback Example
	   ```js
	   function foundBooks(books) {
	   }
	   function failure(reason) {
	   }
	   findAuthor(function(author, err){
		if (err) {
		  failure(err);
		  // failure
		} else {
		  try {
			findBoooksByAuthor(author, function(books, err) {
			  if (err) {
				failure(err);
			  } else {
				try {
				  foundBooks(books);
				} catch(reason) {
				  failure(reason);
				}
			  }
			});
		  } catch(error) {
			failure(err);
		  }
		  // success
		}
	  });
	  ```
	   Promise Example;
	   ```javascript
	  findAuthor().
		then(findBooksByAuthor).
		then(function(books){
		  // found books
	  }).catch(function(reason){
		// something went wrong
	  });
	  ```
	   @method then
	  @param {Function} onFulfilled
	  @param {Function} onRejected
	  Useful for tooling.
	  @return {Promise}
	  */
	
	  /**
	  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	  as the catch block of a try/catch statement.
	  ```js
	  function findAuthor(){
	  throw new Error('couldn't find that author');
	  }
	  // synchronous
	  try {
	  findAuthor();
	  } catch(reason) {
	  // something went wrong
	  }
	  // async with promises
	  findAuthor().catch(function(reason){
	  // something went wrong
	  });
	  ```
	  @method catch
	  @param {Function} onRejection
	  Useful for tooling.
	  @return {Promise}
	  */
	
	
	  Promise.prototype.catch = function _catch(onRejection) {
		return this.then(null, onRejection);
	  };
	
	  /**
		`finally` will be invoked regardless of the promise's fate just as native
		try/catch/finally behaves
	  
		Synchronous example:
	  
		```js
		findAuthor() {
		  if (Math.random() > 0.5) {
			throw new Error();
		  }
		  return new Author();
		}
	  
		try {
		  return findAuthor(); // succeed or fail
		} catch(error) {
		  return findOtherAuther();
		} finally {
		  // always runs
		  // doesn't affect the return value
		}
		```
	  
		Asynchronous example:
	  
		```js
		findAuthor().catch(function(reason){
		  return findOtherAuther();
		}).finally(function(){
		  // author was either found, or not
		});
		```
	  
		@method finally
		@param {Function} callback
		@return {Promise}
	  */
	
	
	  Promise.prototype.finally = function _finally(callback) {
		var promise = this;
		var constructor = promise.constructor;
	
		if (isFunction(callback)) {
		  return promise.then(function (value) {
			return constructor.resolve(callback()).then(function () {
			  return value;
			});
		  }, function (reason) {
			return constructor.resolve(callback()).then(function () {
			  throw reason;
			});
		  });
		}
	
		return promise.then(callback, callback);
	  };
	
	  return Promise;
	}();
	
	Promise$1.prototype.then = then;
	Promise$1.all = all;
	Promise$1.race = race;
	Promise$1.resolve = resolve$1;
	Promise$1.reject = reject$1;
	Promise$1._setScheduler = setScheduler;
	Promise$1._setAsap = setAsap;
	Promise$1._asap = asap;
	
	/*global self*/
	function polyfill() {
	  var local = void 0;
	
	  if (typeof global !== 'undefined') {
		local = global;
	  } else if (typeof self !== 'undefined') {
		local = self;
	  } else {
		try {
		  local = Function('return this')();
		} catch (e) {
		  throw new Error('polyfill failed because global object is unavailable in this environment');
		}
	  }
	
	  var P = local.Promise;
	
	  if (P) {
		var promiseToString = null;
		try {
		  promiseToString = Object.prototype.toString.call(P.resolve());
		} catch (e) {
		  // silently ignored
		}
	
		if (promiseToString === '[object Promise]' && !P.cast) {
		  return;
		}
	  }
	
	  local.Promise = Promise$1;
	}
	
	// Strange compat..
	Promise$1.polyfill = polyfill;
	Promise$1.Promise = Promise$1;
	
	return Promise$1;
	
	})));
	
	
	
	
	
	}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"_process":133}],24:[function(require,module,exports){
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	const utils_1 = require("./utils");
	/**
	 * Returns true if the bloom is a valid bloom
	 * @param bloom The bloom
	 */
	function isBloom(bloom) {
		if (typeof bloom !== 'string') {
			return false;
		}
		if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
			return false;
		}
		if (/^(0x)?[0-9a-f]{512}$/.test(bloom) ||
			/^(0x)?[0-9A-F]{512}$/.test(bloom)) {
			return true;
		}
		return false;
	}
	exports.isBloom = isBloom;
	/**
	 * Returns true if the value is part of the given bloom
	 * note: false positives are possible.
	 * @param bloom encoded bloom
	 * @param value The value
	 */
	function isInBloom(bloom, value) {
		if (typeof value === 'object' && value.constructor === Uint8Array) {
			value = utils_1.bytesToHex(value);
		}
		const hash = utils_1.keccak256(value).replace('0x', '');
		for (let i = 0; i < 12; i += 4) {
			// calculate bit position in bloom filter that must be active
			const bitpos = ((parseInt(hash.substr(i, 2), 16) << 8) +
				parseInt(hash.substr(i + 2, 2), 16)) &
				2047;
			// test if bitpos in bloom is active
			const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
			const offset = 1 << bitpos % 4;
			if ((code & offset) !== offset) {
				return false;
			}
		}
		return true;
	}
	exports.isInBloom = isInBloom;
	/**
	 * Code points to int
	 * @param codePoint The code point
	 */
	function codePointToInt(codePoint) {
		if (codePoint >= 48 && codePoint <= 57) {
			/* ['0'..'9'] -> [0..9] */
			return codePoint - 48;
		}
		if (codePoint >= 65 && codePoint <= 70) {
			/* ['A'..'F'] -> [10..15] */
			return codePoint - 55;
		}
		if (codePoint >= 97 && codePoint <= 102) {
			/* ['a'..'f'] -> [10..15] */
			return codePoint - 87;
		}
		throw new Error('invalid bloom');
	}
	/**
	 * Returns true if the ethereum users address is part of the given bloom.
	 * note: false positives are possible.
	 * @param bloom encoded bloom
	 * @param address the address to test
	 */
	function isUserEthereumAddressInBloom(bloom, ethereumAddress) {
		if (!isBloom(bloom)) {
			throw new Error('Invalid bloom given');
		}
		if (!isAddress(ethereumAddress)) {
			throw new Error(`Invalid ethereum address given: "${ethereumAddress}"`);
		}
		// you have to pad the ethereum address to 32 bytes
		// else the bloom filter does not work
		// this is only if your matching the USERS
		// ethereum address. Contract address do not need this
		// hence why we have 2 methods
		// (0x is not in the 2nd parameter of padleft so 64 chars is fine)
		const address = utils_1.padLeft(ethereumAddress, 64);
		return isInBloom(bloom, address);
	}
	exports.isUserEthereumAddressInBloom = isUserEthereumAddressInBloom;
	/**
	 * Returns true if the contract address is part of the given bloom.
	 * note: false positives are possible.
	 * @param bloom encoded bloom
	 * @param contractAddress the contract address to test
	 */
	function isContractAddressInBloom(bloom, contractAddress) {
		if (!isBloom(bloom)) {
			throw new Error('Invalid bloom given');
		}
		if (!isAddress(contractAddress)) {
			throw new Error(`Invalid contract address given: "${contractAddress}"`);
		}
		return isInBloom(bloom, contractAddress);
	}
	exports.isContractAddressInBloom = isContractAddressInBloom;
	/**
	 * Returns true if the topic is part of the given bloom.
	 * note: false positives are possible.
	 * @param bloom encoded bloom
	 * @param topic the topic encoded hex
	 */
	function isTopicInBloom(bloom, topic) {
		if (!isBloom(bloom)) {
			throw new Error('Invalid bloom given');
		}
		if (!isTopic(topic)) {
			throw new Error('Invalid topic');
		}
		return isInBloom(bloom, topic);
	}
	exports.isTopicInBloom = isTopicInBloom;
	/**
	 * Checks if its a valid topic
	 * @param topic encoded hex topic
	 */
	function isTopic(topic) {
		if (typeof topic !== 'string') {
			return false;
		}
		if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
			return false;
		}
		else if (/^(0x)?[0-9a-f]{64}$/.test(topic) ||
			/^(0x)?[0-9A-F]{64}$/.test(topic)) {
			return true;
		}
		return false;
	}
	exports.isTopic = isTopic;
	/**
	 * Is valid address
	 * @param address The address
	 */
	function isAddress(address) {
		if (typeof address !== 'string') {
			return false;
		}
		if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
			return true;
		}
		if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
			return true;
		}
		return false;
	}
	exports.isAddress = isAddress;
	
	},{"./utils":25}],25:[function(require,module,exports){
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	const sha3 = require("js-sha3");
	/**
	 * Keccak256 hash
	 * @param data The data
	 */
	function keccak256(data) {
		return '0x' + sha3.keccak_256(toByteArray(data));
	}
	exports.keccak256 = keccak256;
	/**
	 * Adding padding to string on the left
	 * @param value The value
	 * @param chars The chars
	 */
	exports.padLeft = (value, chars) => {
		const hasPrefix = /^0x/i.test(value) || typeof value === 'number';
		value = value.toString().replace(/^0x/i, '');
		const padding = chars - value.length + 1 >= 0 ? chars - value.length + 1 : 0;
		return (hasPrefix ? '0x' : '') + new Array(padding).join('0') + value;
	};
	/**
	 * Convert bytes to hex
	 * @param bytes The bytes
	 */
	function bytesToHex(bytes) {
		const hex = [];
		for (let i = 0; i < bytes.length; i++) {
			hex.push((bytes[i] >>> 4).toString(16));
			hex.push((bytes[i] & 0xf).toString(16));
		}
		return `0x${hex.join('').replace(/^0+/, '')}`;
	}
	exports.bytesToHex = bytesToHex;
	/**
	 * To byte array
	 * @param value The value
	 */
	function toByteArray(value) {
		if (value == null) {
			throw new Error('cannot convert null value to array');
		}
		if (typeof value === 'string') {
			const match = value.match(/^(0x)?[0-9a-fA-F]*$/);
			if (!match) {
				throw new Error('invalid hexidecimal string');
			}
			if (match[1] !== '0x') {
				throw new Error('hex string must have 0x prefix');
			}
			value = value.substring(2);
			if (value.length % 2) {
				value = '0' + value;
			}
			const result = [];
			for (let i = 0; i < value.length; i += 2) {
				result.push(parseInt(value.substr(i, 2), 16));
			}
			return addSlice(new Uint8Array(result));
		}
		if (isByteArray(value)) {
			return addSlice(new Uint8Array(value));
		}
		throw new Error('invalid arrayify value');
	}
	exports.toByteArray = toByteArray;
	/**
	 * Is byte array
	 * @param value The value
	 */
	function isByteArray(value) {
		if (!value ||
			// tslint:disable-next-line: radix
			parseInt(String(value.length)) != value.length ||
			typeof value === 'string') {
			return false;
		}
		for (let i = 0; i < value.length; i++) {
			const v = value[i];
			// tslint:disable-next-line: radix
			if (v < 0 || v >= 256 || parseInt(String(v)) != v) {
				return false;
			}
		}
		return true;
	}
	/**
	 * Add slice to array
	 * @param array The array
	 */
	function addSlice(array) {
		if (array.slice !== undefined) {
			return array;
		}
		array.slice = () => {
			const args = Array.prototype.slice.call(arguments);
			return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
		};
		return array;
	}
	
	},{"js-sha3":61}],26:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	function createHashFunction(hashConstructor) {
		return function (msg) {
			var hash = hashConstructor();
			hash.update(msg);
			return Buffer.from(hash.digest());
		};
	}
	exports.createHashFunction = createHashFunction;
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"buffer":125}],27:[function(require,module,exports){
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var hash_utils_1 = require("./hash-utils");
	var createKeccakHash = require("keccak");
	exports.keccak224 = hash_utils_1.createHashFunction(function () {
		return createKeccakHash("keccak224");
	});
	exports.keccak256 = hash_utils_1.createHashFunction(function () {
		return createKeccakHash("keccak256");
	});
	exports.keccak384 = hash_utils_1.createHashFunction(function () {
		return createKeccakHash("keccak384");
	});
	exports.keccak512 = hash_utils_1.createHashFunction(function () {
		return createKeccakHash("keccak512");
	});
	
	},{"./hash-utils":26,"keccak":62}],28:[function(require,module,exports){
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	var randombytes = require("randombytes");
	function getRandomBytes(bytes) {
		return new Promise(function (resolve, reject) {
			randombytes(bytes, function (err, resp) {
				if (err) {
					reject(err);
					return;
				}
				resolve(resp);
			});
		});
	}
	exports.getRandomBytes = getRandomBytes;
	function getRandomBytesSync(bytes) {
		return randombytes(bytes);
	}
	exports.getRandomBytesSync = getRandomBytesSync;
	
	},{"randombytes":73}],29:[function(require,module,exports){
	"use strict";
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
		function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
		return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
			function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
			function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
		var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
		return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
		function verb(n) { return function (v) { return step([n, v]); }; }
		function step(op) {
			if (f) throw new TypeError("Generator is already executing.");
			while (_) try {
				if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
				if (y = 0, t) op = [op[0] & 2, t.value];
				switch (op[0]) {
					case 0: case 1: t = op; break;
					case 4: _.label++; return { value: op[1], done: false };
					case 5: _.label++; y = op[1]; op = [0]; continue;
					case 7: op = _.ops.pop(); _.trys.pop(); continue;
					default:
						if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
						if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
						if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
						if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
						if (t[2]) _.ops.pop();
						_.trys.pop(); continue;
				}
				op = body.call(thisArg, _);
			} catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
			if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
		}
	};
	function __export(m) {
		for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	var secp256k1_1 = require("secp256k1");
	var random_1 = require("./random");
	var SECP256K1_PRIVATE_KEY_SIZE = 32;
	function createPrivateKey() {
		return __awaiter(this, void 0, void 0, function () {
			var pk;
			return __generator(this, function (_a) {
				switch (_a.label) {
					case 0:
						if (!true) return [3 /*break*/, 2];
						return [4 /*yield*/, random_1.getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE)];
					case 1:
						pk = _a.sent();
						if (secp256k1_1.privateKeyVerify(pk)) {
							return [2 /*return*/, pk];
						}
						return [3 /*break*/, 0];
					case 2: return [2 /*return*/];
				}
			});
		});
	}
	exports.createPrivateKey = createPrivateKey;
	function createPrivateKeySync() {
		while (true) {
			var pk = random_1.getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);
			if (secp256k1_1.privateKeyVerify(pk)) {
				return pk;
			}
		}
	}
	exports.createPrivateKeySync = createPrivateKeySync;
	__export(require("secp256k1"));
	
	},{"./random":28,"secp256k1":93}],30:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	var __read = (this && this.__read) || function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o), r, ar = [], e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		}
		catch (error) { e = { error: error }; }
		finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			}
			finally { if (e) throw e.error; }
		}
		return ar;
	};
	var __importDefault = (this && this.__importDefault) || function (mod) {
		return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;
	var assert_1 = __importDefault(require("assert"));
	var externals_1 = require("./externals");
	var secp256k1_1 = require("ethereum-cryptography/secp256k1");
	var internal_1 = require("./internal");
	var constants_1 = require("./constants");
	var bytes_1 = require("./bytes");
	var hash_1 = require("./hash");
	var helpers_1 = require("./helpers");
	var types_1 = require("./types");
	var Account = /** @class */ (function () {
		/**
		 * This constructor assigns and validates the values.
		 * Use the static factory methods to assist in creating an Account from varying data types.
		 */
		function Account(nonce, balance, stateRoot, codeHash) {
			if (nonce === void 0) { nonce = new externals_1.BN(0); }
			if (balance === void 0) { balance = new externals_1.BN(0); }
			if (stateRoot === void 0) { stateRoot = constants_1.KECCAK256_RLP; }
			if (codeHash === void 0) { codeHash = constants_1.KECCAK256_NULL; }
			this.nonce = nonce;
			this.balance = balance;
			this.stateRoot = stateRoot;
			this.codeHash = codeHash;
			this._validate();
		}
		Account.fromAccountData = function (accountData) {
			var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;
			return new Account(nonce ? new externals_1.BN((0, bytes_1.toBuffer)(nonce)) : undefined, balance ? new externals_1.BN((0, bytes_1.toBuffer)(balance)) : undefined, stateRoot ? (0, bytes_1.toBuffer)(stateRoot) : undefined, codeHash ? (0, bytes_1.toBuffer)(codeHash) : undefined);
		};
		Account.fromRlpSerializedAccount = function (serialized) {
			var values = externals_1.rlp.decode(serialized);
			if (!Array.isArray(values)) {
				throw new Error('Invalid serialized account input. Must be array');
			}
			return this.fromValuesArray(values);
		};
		Account.fromValuesArray = function (values) {
			var _a = __read(values, 4), nonce = _a[0], balance = _a[1], stateRoot = _a[2], codeHash = _a[3];
			return new Account(new externals_1.BN(nonce), new externals_1.BN(balance), stateRoot, codeHash);
		};
		Account.prototype._validate = function () {
			if (this.nonce.lt(new externals_1.BN(0))) {
				throw new Error('nonce must be greater than zero');
			}
			if (this.balance.lt(new externals_1.BN(0))) {
				throw new Error('balance must be greater than zero');
			}
			if (this.stateRoot.length !== 32) {
				throw new Error('stateRoot must have a length of 32');
			}
			if (this.codeHash.length !== 32) {
				throw new Error('codeHash must have a length of 32');
			}
		};
		/**
		 * Returns a Buffer Array of the raw Buffers for the account, in order.
		 */
		Account.prototype.raw = function () {
			return [
				(0, types_1.bnToUnpaddedBuffer)(this.nonce),
				(0, types_1.bnToUnpaddedBuffer)(this.balance),
				this.stateRoot,
				this.codeHash,
			];
		};
		/**
		 * Returns the RLP serialization of the account as a `Buffer`.
		 */
		Account.prototype.serialize = function () {
			return externals_1.rlp.encode(this.raw());
		};
		/**
		 * Returns a `Boolean` determining if the account is a contract.
		 */
		Account.prototype.isContract = function () {
			return !this.codeHash.equals(constants_1.KECCAK256_NULL);
		};
		/**
		 * Returns a `Boolean` determining if the account is empty complying to the definition of
		 * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):
		 * "An account is considered empty when it has no code and zero nonce and zero balance."
		 */
		Account.prototype.isEmpty = function () {
			return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(constants_1.KECCAK256_NULL);
		};
		return Account;
	}());
	exports.Account = Account;
	/**
	 * Checks if the address is a valid. Accepts checksummed addresses too.
	 */
	var isValidAddress = function (hexAddress) {
		try {
			(0, helpers_1.assertIsString)(hexAddress);
		}
		catch (e) {
			return false;
		}
		return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);
	};
	exports.isValidAddress = isValidAddress;
	/**
	 * Returns a checksummed address.
	 *
	 * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
	 * has the effect of checksummed addresses for one chain having invalid checksums for others.
	 * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).
	 *
	 * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not
	 * backwards compatible to the original widely adopted checksum format standard introduced in
	 * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.
	 * Usage of this EIP is therefore discouraged unless you have a very targeted use case.
	 */
	var toChecksumAddress = function (hexAddress, eip1191ChainId) {
		(0, helpers_1.assertIsHexString)(hexAddress);
		var address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();
		var prefix = '';
		if (eip1191ChainId) {
			var chainId = (0, types_1.toType)(eip1191ChainId, types_1.TypeOutput.BN);
			prefix = chainId.toString() + '0x';
		}
		var hash = (0, hash_1.keccakFromString)(prefix + address).toString('hex');
		var ret = '0x';
		for (var i = 0; i < address.length; i++) {
			if (parseInt(hash[i], 16) >= 8) {
				ret += address[i].toUpperCase();
			}
			else {
				ret += address[i];
			}
		}
		return ret;
	};
	exports.toChecksumAddress = toChecksumAddress;
	/**
	 * Checks if the address is a valid checksummed address.
	 *
	 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
	 */
	var isValidChecksumAddress = function (hexAddress, eip1191ChainId) {
		return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;
	};
	exports.isValidChecksumAddress = isValidChecksumAddress;
	/**
	 * Generates an address of a newly created contract.
	 * @param from The address which is creating this new address
	 * @param nonce The nonce of the from account
	 */
	var generateAddress = function (from, nonce) {
		(0, helpers_1.assertIsBuffer)(from);
		(0, helpers_1.assertIsBuffer)(nonce);
		var nonceBN = new externals_1.BN(nonce);
		if (nonceBN.isZero()) {
			// in RLP we want to encode null in the case of zero nonce
			// read the RLP documentation for an answer if you dare
			return (0, hash_1.rlphash)([from, null]).slice(-20);
		}
		// Only take the lower 160bits of the hash
		return (0, hash_1.rlphash)([from, Buffer.from(nonceBN.toArray())]).slice(-20);
	};
	exports.generateAddress = generateAddress;
	/**
	 * Generates an address for a contract created using CREATE2.
	 * @param from The address which is creating this new address
	 * @param salt A salt
	 * @param initCode The init code of the contract being created
	 */
	var generateAddress2 = function (from, salt, initCode) {
		(0, helpers_1.assertIsBuffer)(from);
		(0, helpers_1.assertIsBuffer)(salt);
		(0, helpers_1.assertIsBuffer)(initCode);
		(0, assert_1.default)(from.length === 20);
		(0, assert_1.default)(salt.length === 32);
		var address = (0, hash_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, hash_1.keccak256)(initCode)]));
		return address.slice(-20);
	};
	exports.generateAddress2 = generateAddress2;
	/**
	 * Checks if the private key satisfies the rules of the curve secp256k1.
	 */
	var isValidPrivate = function (privateKey) {
		return (0, secp256k1_1.privateKeyVerify)(privateKey);
	};
	exports.isValidPrivate = isValidPrivate;
	/**
	 * Checks if the public key satisfies the rules of the curve secp256k1
	 * and the requirements of Ethereum.
	 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param sanitize Accept public keys in other formats
	 */
	var isValidPublic = function (publicKey, sanitize) {
		if (sanitize === void 0) { sanitize = false; }
		(0, helpers_1.assertIsBuffer)(publicKey);
		if (publicKey.length === 64) {
			// Convert to SEC1 for secp256k1
			return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));
		}
		if (!sanitize) {
			return false;
		}
		return (0, secp256k1_1.publicKeyVerify)(publicKey);
	};
	exports.isValidPublic = isValidPublic;
	/**
	 * Returns the ethereum address of a given public key.
	 * Accepts "Ethereum public keys" and SEC1 encoded keys.
	 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
	 * @param sanitize Accept public keys in other formats
	 */
	var pubToAddress = function (pubKey, sanitize) {
		if (sanitize === void 0) { sanitize = false; }
		(0, helpers_1.assertIsBuffer)(pubKey);
		if (sanitize && pubKey.length !== 64) {
			pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));
		}
		(0, assert_1.default)(pubKey.length === 64);
		// Only take the lower 160bits of the hash
		return (0, hash_1.keccak)(pubKey).slice(-20);
	};
	exports.pubToAddress = pubToAddress;
	exports.publicToAddress = exports.pubToAddress;
	/**
	 * Returns the ethereum public key of a given private key.
	 * @param privateKey A private key must be 256 bits wide
	 */
	var privateToPublic = function (privateKey) {
		(0, helpers_1.assertIsBuffer)(privateKey);
		// skip the type flag and use the X, Y points
		return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);
	};
	exports.privateToPublic = privateToPublic;
	/**
	 * Returns the ethereum address of a given private key.
	 * @param privateKey A private key must be 256 bits wide
	 */
	var privateToAddress = function (privateKey) {
		return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));
	};
	exports.privateToAddress = privateToAddress;
	/**
	 * Converts a public key to the Ethereum format.
	 */
	var importPublic = function (publicKey) {
		(0, helpers_1.assertIsBuffer)(publicKey);
		if (publicKey.length !== 64) {
			publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));
		}
		return publicKey;
	};
	exports.importPublic = importPublic;
	/**
	 * Returns the zero address.
	 */
	var zeroAddress = function () {
		var addressLength = 20;
		var addr = (0, bytes_1.zeros)(addressLength);
		return (0, bytes_1.bufferToHex)(addr);
	};
	exports.zeroAddress = zeroAddress;
	/**
	 * Checks if a given address is the zero address.
	 */
	var isZeroAddress = function (hexAddress) {
		try {
			(0, helpers_1.assertIsString)(hexAddress);
		}
		catch (e) {
			return false;
		}
		var zeroAddr = (0, exports.zeroAddress)();
		return zeroAddr === hexAddress;
	};
	exports.isZeroAddress = isZeroAddress;
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"./bytes":32,"./constants":33,"./externals":34,"./hash":35,"./helpers":36,"./internal":38,"./types":41,"assert":119,"buffer":125,"ethereum-cryptography/secp256k1":29}],31:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	var __importDefault = (this && this.__importDefault) || function (mod) {
		return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Address = void 0;
	var assert_1 = __importDefault(require("assert"));
	var externals_1 = require("./externals");
	var bytes_1 = require("./bytes");
	var account_1 = require("./account");
	var Address = /** @class */ (function () {
		function Address(buf) {
			(0, assert_1.default)(buf.length === 20, 'Invalid address length');
			this.buf = buf;
		}
		/**
		 * Returns the zero address.
		 */
		Address.zero = function () {
			return new Address((0, bytes_1.zeros)(20));
		};
		/**
		 * Returns an Address object from a hex-encoded string.
		 * @param str - Hex-encoded address
		 */
		Address.fromString = function (str) {
			(0, assert_1.default)((0, account_1.isValidAddress)(str), 'Invalid address');
			return new Address((0, bytes_1.toBuffer)(str));
		};
		/**
		 * Returns an address for a given public key.
		 * @param pubKey The two points of an uncompressed key
		 */
		Address.fromPublicKey = function (pubKey) {
			(0, assert_1.default)(Buffer.isBuffer(pubKey), 'Public key should be Buffer');
			var buf = (0, account_1.pubToAddress)(pubKey);
			return new Address(buf);
		};
		/**
		 * Returns an address for a given private key.
		 * @param privateKey A private key must be 256 bits wide
		 */
		Address.fromPrivateKey = function (privateKey) {
			(0, assert_1.default)(Buffer.isBuffer(privateKey), 'Private key should be Buffer');
			var buf = (0, account_1.privateToAddress)(privateKey);
			return new Address(buf);
		};
		/**
		 * Generates an address for a newly created contract.
		 * @param from The address which is creating this new address
		 * @param nonce The nonce of the from account
		 */
		Address.generate = function (from, nonce) {
			(0, assert_1.default)(externals_1.BN.isBN(nonce));
			return new Address((0, account_1.generateAddress)(from.buf, nonce.toArrayLike(Buffer)));
		};
		/**
		 * Generates an address for a contract created using CREATE2.
		 * @param from The address which is creating this new address
		 * @param salt A salt
		 * @param initCode The init code of the contract being created
		 */
		Address.generate2 = function (from, salt, initCode) {
			(0, assert_1.default)(Buffer.isBuffer(salt));
			(0, assert_1.default)(Buffer.isBuffer(initCode));
			return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));
		};
		/**
		 * Is address equal to another.
		 */
		Address.prototype.equals = function (address) {
			return this.buf.equals(address.buf);
		};
		/**
		 * Is address zero.
		 */
		Address.prototype.isZero = function () {
			return this.equals(Address.zero());
		};
		/**
		 * True if address is in the address range defined
		 * by EIP-1352
		 */
		Address.prototype.isPrecompileOrSystemAddress = function () {
			var addressBN = new externals_1.BN(this.buf);
			var rangeMin = new externals_1.BN(0);
			var rangeMax = new externals_1.BN('ffff', 'hex');
			return addressBN.gte(rangeMin) && addressBN.lte(rangeMax);
		};
		/**
		 * Returns hex encoding of address.
		 */
		Address.prototype.toString = function () {
			return '0x' + this.buf.toString('hex');
		};
		/**
		 * Returns Buffer representation of address.
		 */
		Address.prototype.toBuffer = function () {
			return Buffer.from(this.buf);
		};
		return Address;
	}());
	exports.Address = Address;
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"./account":30,"./bytes":32,"./externals":34,"assert":119,"buffer":125}],32:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	var __values = (this && this.__values) || function(o) {
		var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
		if (m) return m.call(o);
		if (o && typeof o.length === "number") return {
			next: function () {
				if (o && i >= o.length) o = void 0;
				return { value: o && o[i++], done: !o };
			}
		};
		throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	};
	var __read = (this && this.__read) || function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o), r, ar = [], e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		}
		catch (error) { e = { error: error }; }
		finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			}
			finally { if (e) throw e.error; }
		}
		return ar;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;
	var externals_1 = require("./externals");
	var internal_1 = require("./internal");
	var helpers_1 = require("./helpers");
	/**
	 * Converts a `Number` into a hex `String`
	 * @param {Number} i
	 * @return {String}
	 */
	var intToHex = function (i) {
		if (!Number.isSafeInteger(i) || i < 0) {
			throw new Error("Received an invalid integer type: ".concat(i));
		}
		return "0x".concat(i.toString(16));
	};
	exports.intToHex = intToHex;
	/**
	 * Converts an `Number` to a `Buffer`
	 * @param {Number} i
	 * @return {Buffer}
	 */
	var intToBuffer = function (i) {
		var hex = (0, exports.intToHex)(i);
		return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');
	};
	exports.intToBuffer = intToBuffer;
	/**
	 * Returns a buffer filled with 0s.
	 * @param bytes the number of bytes the buffer should be
	 */
	var zeros = function (bytes) {
		return Buffer.allocUnsafe(bytes).fill(0);
	};
	exports.zeros = zeros;
	/**
	 * Pads a `Buffer` with zeros till it has `length` bytes.
	 * Truncates the beginning or end of input if its length exceeds `length`.
	 * @param msg the value to pad (Buffer)
	 * @param length the number of bytes the output should be
	 * @param right whether to start padding form the left or right
	 * @return (Buffer)
	 */
	var setLength = function (msg, length, right) {
		var buf = (0, exports.zeros)(length);
		if (right) {
			if (msg.length < length) {
				msg.copy(buf);
				return buf;
			}
			return msg.slice(0, length);
		}
		else {
			if (msg.length < length) {
				msg.copy(buf, length - msg.length);
				return buf;
			}
			return msg.slice(-length);
		}
	};
	/**
	 * Left Pads a `Buffer` with leading zeros till it has `length` bytes.
	 * Or it truncates the beginning if it exceeds.
	 * @param msg the value to pad (Buffer)
	 * @param length the number of bytes the output should be
	 * @return (Buffer)
	 */
	var setLengthLeft = function (msg, length) {
		(0, helpers_1.assertIsBuffer)(msg);
		return setLength(msg, length, false);
	};
	exports.setLengthLeft = setLengthLeft;
	/**
	 * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.
	 * it truncates the end if it exceeds.
	 * @param msg the value to pad (Buffer)
	 * @param length the number of bytes the output should be
	 * @return (Buffer)
	 */
	var setLengthRight = function (msg, length) {
		(0, helpers_1.assertIsBuffer)(msg);
		return setLength(msg, length, true);
	};
	exports.setLengthRight = setLengthRight;
	/**
	 * Trims leading zeros from a `Buffer`, `String` or `Number[]`.
	 * @param a (Buffer|Array|String)
	 * @return (Buffer|Array|String)
	 */
	var stripZeros = function (a) {
		var first = a[0];
		while (a.length > 0 && first.toString() === '0') {
			a = a.slice(1);
			first = a[0];
		}
		return a;
	};
	/**
	 * Trims leading zeros from a `Buffer`.
	 * @param a (Buffer)
	 * @return (Buffer)
	 */
	var unpadBuffer = function (a) {
		(0, helpers_1.assertIsBuffer)(a);
		return stripZeros(a);
	};
	exports.unpadBuffer = unpadBuffer;
	/**
	 * Trims leading zeros from an `Array` (of numbers).
	 * @param a (number[])
	 * @return (number[])
	 */
	var unpadArray = function (a) {
		(0, helpers_1.assertIsArray)(a);
		return stripZeros(a);
	};
	exports.unpadArray = unpadArray;
	/**
	 * Trims leading zeros from a hex-prefixed `String`.
	 * @param a (String)
	 * @return (String)
	 */
	var unpadHexString = function (a) {
		(0, helpers_1.assertIsHexString)(a);
		a = (0, internal_1.stripHexPrefix)(a);
		return stripZeros(a);
	};
	exports.unpadHexString = unpadHexString;
	/**
	 * Attempts to turn a value into a `Buffer`.
	 * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects
	 * with a `toArray()` or `toBuffer()` method.
	 * @param v the value
	 */
	var toBuffer = function (v) {
		if (v === null || v === undefined) {
			return Buffer.allocUnsafe(0);
		}
		if (Buffer.isBuffer(v)) {
			return Buffer.from(v);
		}
		if (Array.isArray(v) || v instanceof Uint8Array) {
			return Buffer.from(v);
		}
		if (typeof v === 'string') {
			if (!(0, internal_1.isHexString)(v)) {
				throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ".concat(v));
			}
			return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');
		}
		if (typeof v === 'number') {
			return (0, exports.intToBuffer)(v);
		}
		if (externals_1.BN.isBN(v)) {
			if (v.isNeg()) {
				throw new Error("Cannot convert negative BN to buffer. Given: ".concat(v));
			}
			return v.toArrayLike(Buffer);
		}
		if (v.toArray) {
			// converts a BN to a Buffer
			return Buffer.from(v.toArray());
		}
		if (v.toBuffer) {
			return Buffer.from(v.toBuffer());
		}
		throw new Error('invalid type');
	};
	exports.toBuffer = toBuffer;
	/**
	 * Converts a `Buffer` to a `Number`.
	 * @param buf `Buffer` object to convert
	 * @throws If the input number exceeds 53 bits.
	 */
	var bufferToInt = function (buf) {
		return new externals_1.BN((0, exports.toBuffer)(buf)).toNumber();
	};
	exports.bufferToInt = bufferToInt;
	/**
	 * Converts a `Buffer` into a `0x`-prefixed hex `String`.
	 * @param buf `Buffer` object to convert
	 */
	var bufferToHex = function (buf) {
		buf = (0, exports.toBuffer)(buf);
		return '0x' + buf.toString('hex');
	};
	exports.bufferToHex = bufferToHex;
	/**
	 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
	 * @param num Signed integer value
	 */
	var fromSigned = function (num) {
		return new externals_1.BN(num).fromTwos(256);
	};
	exports.fromSigned = fromSigned;
	/**
	 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
	 * @param num
	 */
	var toUnsigned = function (num) {
		return Buffer.from(num.toTwos(256).toArray());
	};
	exports.toUnsigned = toUnsigned;
	/**
	 * Adds "0x" to a given `String` if it does not already start with "0x".
	 */
	var addHexPrefix = function (str) {
		if (typeof str !== 'string') {
			return str;
		}
		return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;
	};
	exports.addHexPrefix = addHexPrefix;
	/**
	 * Returns the utf8 string representation from a hex string.
	 *
	 * Examples:
	 *
	 * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'
	 * Input 2: '657468657265756d'
	 * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'
	 *
	 * Output (all 3 input variants): 'ethereum'
	 *
	 * Note that this method is not intended to be used with hex strings
	 * representing quantities in both big endian or little endian notation.
	 *
	 * @param string Hex string, should be `0x` prefixed
	 * @return Utf8 string
	 */
	var toUtf8 = function (hex) {
		var zerosRegexp = /^(00)+|(00)+$/g;
		hex = (0, internal_1.stripHexPrefix)(hex);
		if (hex.length % 2 !== 0) {
			throw new Error('Invalid non-even hex string input for toUtf8() provided');
		}
		var bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');
		return bufferVal.toString('utf8');
	};
	exports.toUtf8 = toUtf8;
	/**
	 * Converts a `Buffer` or `Array` to JSON.
	 * @param ba (Buffer|Array)
	 * @return (Array|String|null)
	 */
	var baToJSON = function (ba) {
		if (Buffer.isBuffer(ba)) {
			return "0x".concat(ba.toString('hex'));
		}
		else if (ba instanceof Array) {
			var array = [];
			for (var i = 0; i < ba.length; i++) {
				array.push((0, exports.baToJSON)(ba[i]));
			}
			return array;
		}
	};
	exports.baToJSON = baToJSON;
	/**
	 * Checks provided Buffers for leading zeroes and throws if found.
	 *
	 * Examples:
	 *
	 * Valid values: 0x1, 0x, 0x01, 0x1234
	 * Invalid values: 0x0, 0x00, 0x001, 0x0001
	 *
	 * Note: This method is useful for validating that RLP encoded integers comply with the rule that all
	 * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes
	 * @param values An object containing string keys and Buffer values
	 * @throws if any provided value is found to have leading zero bytes
	 */
	var validateNoLeadingZeroes = function (values) {
		var e_1, _a;
		try {
			for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {
				var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
				if (v !== undefined && v.length > 0 && v[0] === 0) {
					throw new Error("".concat(k, " cannot have leading zeroes, received: ").concat(v.toString('hex')));
				}
			}
		}
		catch (e_1_1) { e_1 = { error: e_1_1 }; }
		finally {
			try {
				if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
			}
			finally { if (e_1) throw e_1.error; }
		}
	};
	exports.validateNoLeadingZeroes = validateNoLeadingZeroes;
	function arrToBufArr(arr) {
		if (!Array.isArray(arr)) {
			return Buffer.from(arr);
		}
		return arr.map(function (a) { return arrToBufArr(a); });
	}
	exports.arrToBufArr = arrToBufArr;
	function bufArrToArr(arr) {
		if (!Array.isArray(arr)) {
			return Uint8Array.from(arr !== null && arr !== void 0 ? arr : []);
		}
		return arr.map(function (a) { return bufArrToArr(a); });
	}
	exports.bufArrToArr = bufArrToArr;
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"./externals":34,"./helpers":36,"./internal":38,"buffer":125}],33:[function(require,module,exports){
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;
	var buffer_1 = require("buffer");
	var externals_1 = require("./externals");
	/**
	 * 2^64-1
	 */
	exports.MAX_UINT64 = new externals_1.BN('ffffffffffffffff', 16);
	/**
	 * The max integer that the evm can handle (2^256-1)
	 */
	exports.MAX_INTEGER = new externals_1.BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
	/**
	 * 2^256
	 */
	exports.TWO_POW256 = new externals_1.BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
	/**
	 * Keccak-256 hash of null
	 */
	exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
	/**
	 * Keccak-256 hash of null
	 */
	exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, 'hex');
	/**
	 * Keccak-256 of an RLP of an empty array
	 */
	exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
	/**
	 * Keccak-256 of an RLP of an empty array
	 */
	exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
	/**
	 * Keccak-256 hash of the RLP of null
	 */
	exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
	/**
	 * Keccak-256 hash of the RLP of null
	 */
	exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, 'hex');
	
	},{"./externals":34,"buffer":125}],34:[function(require,module,exports){
	"use strict";
	/**
	 * Re-exports commonly used modules:
	 * * Exports [`BN`](https://github.com/indutny/bn.js), [`rlp`](https://github.com/ethereumjs/rlp).
	 * @packageDocumentation
	 */
	var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		  desc = { enumerable: true, get: function() { return m[k]; } };
		}
		Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	}));
	var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
		Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
		o["default"] = v;
	});
	var __importStar = (this && this.__importStar) || function (mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
		__setModuleDefault(result, mod);
		return result;
	};
	var __importDefault = (this && this.__importDefault) || function (mod) {
		return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.rlp = exports.BN = void 0;
	var bn_js_1 = __importDefault(require("bn.js"));
	exports.BN = bn_js_1.default;
	var rlp = __importStar(require("rlp"));
	exports.rlp = rlp;
	
	},{"bn.js":42,"rlp":90}],35:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;
	var keccak_1 = require("ethereum-cryptography/keccak");
	var createHash = require('create-hash');
	var externals_1 = require("./externals");
	var bytes_1 = require("./bytes");
	var helpers_1 = require("./helpers");
	/**
	 * Creates Keccak hash of a Buffer input
	 * @param a The input data (Buffer)
	 * @param bits (number = 256) The Keccak width
	 */
	var keccak = function (a, bits) {
		if (bits === void 0) { bits = 256; }
		(0, helpers_1.assertIsBuffer)(a);
		switch (bits) {
			case 224: {
				return (0, keccak_1.keccak224)(a);
			}
			case 256: {
				return (0, keccak_1.keccak256)(a);
			}
			case 384: {
				return (0, keccak_1.keccak384)(a);
			}
			case 512: {
				return (0, keccak_1.keccak512)(a);
			}
			default: {
				throw new Error("Invald algorithm: keccak".concat(bits));
			}
		}
	};
	exports.keccak = keccak;
	/**
	 * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
	 * @param a The input data (Buffer)
	 */
	var keccak256 = function (a) {
		return (0, exports.keccak)(a);
	};
	exports.keccak256 = keccak256;
	/**
	 * Creates Keccak hash of a utf-8 string input
	 * @param a The input data (String)
	 * @param bits (number = 256) The Keccak width
	 */
	var keccakFromString = function (a, bits) {
		if (bits === void 0) { bits = 256; }
		(0, helpers_1.assertIsString)(a);
		var buf = Buffer.from(a, 'utf8');
		return (0, exports.keccak)(buf, bits);
	};
	exports.keccakFromString = keccakFromString;
	/**
	 * Creates Keccak hash of an 0x-prefixed string input
	 * @param a The input data (String)
	 * @param bits (number = 256) The Keccak width
	 */
	var keccakFromHexString = function (a, bits) {
		if (bits === void 0) { bits = 256; }
		(0, helpers_1.assertIsHexString)(a);
		return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
	};
	exports.keccakFromHexString = keccakFromHexString;
	/**
	 * Creates Keccak hash of a number array input
	 * @param a The input data (number[])
	 * @param bits (number = 256) The Keccak width
	 */
	var keccakFromArray = function (a, bits) {
		if (bits === void 0) { bits = 256; }
		(0, helpers_1.assertIsArray)(a);
		return (0, exports.keccak)((0, bytes_1.toBuffer)(a), bits);
	};
	exports.keccakFromArray = keccakFromArray;
	/**
	 * Creates SHA256 hash of an input.
	 * @param  a The input data (Buffer|Array|String)
	 */
	var _sha256 = function (a) {
		a = (0, bytes_1.toBuffer)(a);
		return createHash('sha256').update(a).digest();
	};
	/**
	 * Creates SHA256 hash of a Buffer input.
	 * @param a The input data (Buffer)
	 */
	var sha256 = function (a) {
		(0, helpers_1.assertIsBuffer)(a);
		return _sha256(a);
	};
	exports.sha256 = sha256;
	/**
	 * Creates SHA256 hash of a string input.
	 * @param a The input data (string)
	 */
	var sha256FromString = function (a) {
		(0, helpers_1.assertIsString)(a);
		return _sha256(a);
	};
	exports.sha256FromString = sha256FromString;
	/**
	 * Creates SHA256 hash of a number[] input.
	 * @param a The input data (number[])
	 */
	var sha256FromArray = function (a) {
		(0, helpers_1.assertIsArray)(a);
		return _sha256(a);
	};
	exports.sha256FromArray = sha256FromArray;
	/**
	 * Creates RIPEMD160 hash of the input.
	 * @param a The input data (Buffer|Array|String|Number)
	 * @param padded Whether it should be padded to 256 bits or not
	 */
	var _ripemd160 = function (a, padded) {
		a = (0, bytes_1.toBuffer)(a);
		var hash = createHash('rmd160').update(a).digest();
		if (padded === true) {
			return (0, bytes_1.setLengthLeft)(hash, 32);
		}
		else {
			return hash;
		}
	};
	/**
	 * Creates RIPEMD160 hash of a Buffer input.
	 * @param a The input data (Buffer)
	 * @param padded Whether it should be padded to 256 bits or not
	 */
	var ripemd160 = function (a, padded) {
		(0, helpers_1.assertIsBuffer)(a);
		return _ripemd160(a, padded);
	};
	exports.ripemd160 = ripemd160;
	/**
	 * Creates RIPEMD160 hash of a string input.
	 * @param a The input data (String)
	 * @param padded Whether it should be padded to 256 bits or not
	 */
	var ripemd160FromString = function (a, padded) {
		(0, helpers_1.assertIsString)(a);
		return _ripemd160(a, padded);
	};
	exports.ripemd160FromString = ripemd160FromString;
	/**
	 * Creates RIPEMD160 hash of a number[] input.
	 * @param a The input data (number[])
	 * @param padded Whether it should be padded to 256 bits or not
	 */
	var ripemd160FromArray = function (a, padded) {
		(0, helpers_1.assertIsArray)(a);
		return _ripemd160(a, padded);
	};
	exports.ripemd160FromArray = ripemd160FromArray;
	/**
	 * Creates SHA-3 hash of the RLP encoded version of the input.
	 * @param a The input data
	 */
	var rlphash = function (a) {
		return (0, exports.keccak)(externals_1.rlp.encode(a));
	};
	exports.rlphash = rlphash;
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"./bytes":32,"./externals":34,"./helpers":36,"buffer":125,"create-hash":5,"ethereum-cryptography/keccak":27}],36:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;
	var internal_1 = require("./internal");
	/**
	 * Throws if a string is not hex prefixed
	 * @param {string} input string to check hex prefix of
	 */
	var assertIsHexString = function (input) {
		if (!(0, internal_1.isHexString)(input)) {
			var msg = "This method only supports 0x-prefixed hex strings but input was: ".concat(input);
			throw new Error(msg);
		}
	};
	exports.assertIsHexString = assertIsHexString;
	/**
	 * Throws if input is not a buffer
	 * @param {Buffer} input value to check
	 */
	var assertIsBuffer = function (input) {
		if (!Buffer.isBuffer(input)) {
			var msg = "This method only supports Buffer but input was: ".concat(input);
			throw new Error(msg);
		}
	};
	exports.assertIsBuffer = assertIsBuffer;
	/**
	 * Throws if input is not an array
	 * @param {number[]} input value to check
	 */
	var assertIsArray = function (input) {
		if (!Array.isArray(input)) {
			var msg = "This method only supports number arrays but input was: ".concat(input);
			throw new Error(msg);
		}
	};
	exports.assertIsArray = assertIsArray;
	/**
	 * Throws if input is not a string
	 * @param {string} input value to check
	 */
	var assertIsString = function (input) {
		if (typeof input !== 'string') {
			var msg = "This method only supports strings but input was: ".concat(input);
			throw new Error(msg);
		}
	};
	exports.assertIsString = assertIsString;
	
	}).call(this)}).call(this,{"isBuffer":require("../../../../../../../../opt/homebrew/lib/node_modules/browserify/node_modules/is-buffer/index.js")})
	},{"../../../../../../../../opt/homebrew/lib/node_modules/browserify/node_modules/is-buffer/index.js":131,"./internal":38}],37:[function(require,module,exports){
	"use strict";
	var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		var desc = Object.getOwnPropertyDescriptor(m, k);
		if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		  desc = { enumerable: true, get: function() { return m[k]; } };
		}
		Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
		if (k2 === undefined) k2 = k;
		o[k2] = m[k];
	}));
	var __exportStar = (this && this.__exportStar) || function(m, exports) {
		for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
	/**
	 * Constants
	 */
	__exportStar(require("./constants"), exports);
	/**
	 * Account class and helper functions
	 */
	__exportStar(require("./account"), exports);
	/**
	 * Address type
	 */
	__exportStar(require("./address"), exports);
	/**
	 * Hash functions
	 */
	__exportStar(require("./hash"), exports);
	/**
	 * ECDSA signature
	 */
	__exportStar(require("./signature"), exports);
	/**
	 * Utilities for manipulating Buffers, byte arrays, etc.
	 */
	__exportStar(require("./bytes"), exports);
	/**
	 * Function for definining properties on an object
	 */
	__exportStar(require("./object"), exports);
	/**
	 * External exports (BN, rlp)
	 */
	__exportStar(require("./externals"), exports);
	/**
	 * Helpful TypeScript types
	 */
	__exportStar(require("./types"), exports);
	/**
	 * Export ethjs-util methods
	 */
	var internal_1 = require("./internal");
	Object.defineProperty(exports, "isHexPrefixed", { enumerable: true, get: function () { return internal_1.isHexPrefixed; } });
	Object.defineProperty(exports, "stripHexPrefix", { enumerable: true, get: function () { return internal_1.stripHexPrefix; } });
	Object.defineProperty(exports, "padToEven", { enumerable: true, get: function () { return internal_1.padToEven; } });
	Object.defineProperty(exports, "getBinarySize", { enumerable: true, get: function () { return internal_1.getBinarySize; } });
	Object.defineProperty(exports, "arrayContainsArray", { enumerable: true, get: function () { return internal_1.arrayContainsArray; } });
	Object.defineProperty(exports, "toAscii", { enumerable: true, get: function () { return internal_1.toAscii; } });
	Object.defineProperty(exports, "fromUtf8", { enumerable: true, get: function () { return internal_1.fromUtf8; } });
	Object.defineProperty(exports, "fromAscii", { enumerable: true, get: function () { return internal_1.fromAscii; } });
	Object.defineProperty(exports, "getKeys", { enumerable: true, get: function () { return internal_1.getKeys; } });
	Object.defineProperty(exports, "isHexString", { enumerable: true, get: function () { return internal_1.isHexString; } });
	
	},{"./account":30,"./address":31,"./bytes":32,"./constants":33,"./externals":34,"./hash":35,"./internal":38,"./object":39,"./signature":40,"./types":41}],38:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	/*
	The MIT License
	
	Copyright (c) 2016 Nick Dodson. nickdodson.com
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE
	 */
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;
	/**
	 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
	 * @param str the string input value
	 * @return a boolean if it is or is not hex prefixed
	 * @throws if the str input is not a string
	 */
	function isHexPrefixed(str) {
		if (typeof str !== 'string') {
			throw new Error("[isHexPrefixed] input must be type 'string', received type ".concat(typeof str));
		}
		return str[0] === '0' && str[1] === 'x';
	}
	exports.isHexPrefixed = isHexPrefixed;
	/**
	 * Removes '0x' from a given `String` if present
	 * @param str the string value
	 * @returns the string without 0x prefix
	 */
	var stripHexPrefix = function (str) {
		if (typeof str !== 'string')
			throw new Error("[stripHexPrefix] input must be type 'string', received ".concat(typeof str));
		return isHexPrefixed(str) ? str.slice(2) : str;
	};
	exports.stripHexPrefix = stripHexPrefix;
	/**
	 * Pads a `String` to have an even length
	 * @param value
	 * @return output
	 */
	function padToEven(value) {
		var a = value;
		if (typeof a !== 'string') {
			throw new Error("[padToEven] value must be type 'string', received ".concat(typeof a));
		}
		if (a.length % 2)
			a = "0".concat(a);
		return a;
	}
	exports.padToEven = padToEven;
	/**
	 * Get the binary size of a string
	 * @param str
	 * @returns the number of bytes contained within the string
	 */
	function getBinarySize(str) {
		if (typeof str !== 'string') {
			throw new Error("[getBinarySize] method requires input type 'string', recieved ".concat(typeof str));
		}
		return Buffer.byteLength(str, 'utf8');
	}
	exports.getBinarySize = getBinarySize;
	/**
	 * Returns TRUE if the first specified array contains all elements
	 * from the second one. FALSE otherwise.
	 *
	 * @param superset
	 * @param subset
	 *
	 */
	function arrayContainsArray(superset, subset, some) {
		if (Array.isArray(superset) !== true) {
			throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '".concat(typeof superset, "'"));
		}
		if (Array.isArray(subset) !== true) {
			throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '".concat(typeof subset, "'"));
		}
		return subset[some ? 'some' : 'every'](function (value) { return superset.indexOf(value) >= 0; });
	}
	exports.arrayContainsArray = arrayContainsArray;
	/**
	 * Should be called to get ascii from its hex representation
	 *
	 * @param string in hex
	 * @returns ascii string representation of hex value
	 */
	function toAscii(hex) {
		var str = '';
		var i = 0;
		var l = hex.length;
		if (hex.substring(0, 2) === '0x')
			i = 2;
		for (; i < l; i += 2) {
			var code = parseInt(hex.substr(i, 2), 16);
			str += String.fromCharCode(code);
		}
		return str;
	}
	exports.toAscii = toAscii;
	/**
	 * Should be called to get hex representation (prefixed by 0x) of utf8 string
	 *
	 * @param string
	 * @param optional padding
	 * @returns hex representation of input string
	 */
	function fromUtf8(stringValue) {
		var str = Buffer.from(stringValue, 'utf8');
		return "0x".concat(padToEven(str.toString('hex')).replace(/^0+|0+$/g, ''));
	}
	exports.fromUtf8 = fromUtf8;
	/**
	 * Should be called to get hex representation (prefixed by 0x) of ascii string
	 *
	 * @param  string
	 * @param  optional padding
	 * @returns  hex representation of input string
	 */
	function fromAscii(stringValue) {
		var hex = '';
		for (var i = 0; i < stringValue.length; i++) {
			var code = stringValue.charCodeAt(i);
			var n = code.toString(16);
			hex += n.length < 2 ? "0".concat(n) : n;
		}
		return "0x".concat(hex);
	}
	exports.fromAscii = fromAscii;
	/**
	 * Returns the keys from an array of objects.
	 * @example
	 * ```js
	 * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']
	 *````
	 * @param  params
	 * @param  key
	 * @param  allowEmpty
	 * @returns output just a simple array of output keys
	 */
	function getKeys(params, key, allowEmpty) {
		if (!Array.isArray(params)) {
			throw new Error("[getKeys] method expects input 'params' to be an array, got ".concat(typeof params));
		}
		if (typeof key !== 'string') {
			throw new Error("[getKeys] method expects input 'key' to be type 'string', got ".concat(typeof params));
		}
		var result = [];
		for (var i = 0; i < params.length; i++) {
			var value = params[i][key];
			if (allowEmpty && !value) {
				value = '';
			}
			else if (typeof value !== 'string') {
				throw new Error("invalid abi - expected type 'string', received ".concat(typeof value));
			}
			result.push(value);
		}
		return result;
	}
	exports.getKeys = getKeys;
	/**
	 * Is the string a hex string.
	 *
	 * @param  value
	 * @param  length
	 * @returns  output the string is a hex string
	 */
	function isHexString(value, length) {
		if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/))
			return false;
		if (length && value.length !== 2 + 2 * length)
			return false;
		return true;
	}
	exports.isHexString = isHexString;
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"buffer":125}],39:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	var __importDefault = (this && this.__importDefault) || function (mod) {
		return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.defineProperties = void 0;
	var assert_1 = __importDefault(require("assert"));
	var internal_1 = require("./internal");
	var externals_1 = require("./externals");
	var bytes_1 = require("./bytes");
	/**
	 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
	 * @param self the `Object` to define properties on
	 * @param fields an array fields to define. Fields can contain:
	 * * `name` - the name of the properties
	 * * `length` - the number of bytes the field can have
	 * * `allowLess` - if the field can be less than the length
	 * * `allowEmpty`
	 * @param data data to be validated against the definitions
	 * @deprecated
	 */
	var defineProperties = function (self, fields, data) {
		self.raw = [];
		self._fields = [];
		// attach the `toJSON`
		self.toJSON = function (label) {
			if (label === void 0) { label = false; }
			if (label) {
				var obj_1 = {};
				self._fields.forEach(function (field) {
					obj_1[field] = "0x".concat(self[field].toString('hex'));
				});
				return obj_1;
			}
			return (0, bytes_1.baToJSON)(self.raw);
		};
		self.serialize = function serialize() {
			return externals_1.rlp.encode(self.raw);
		};
		fields.forEach(function (field, i) {
			self._fields.push(field.name);
			function getter() {
				return self.raw[i];
			}
			function setter(v) {
				v = (0, bytes_1.toBuffer)(v);
				if (v.toString('hex') === '00' && !field.allowZero) {
					v = Buffer.allocUnsafe(0);
				}
				if (field.allowLess && field.length) {
					v = (0, bytes_1.unpadBuffer)(v);
					(0, assert_1.default)(field.length >= v.length, "The field ".concat(field.name, " must not have more ").concat(field.length, " bytes"));
				}
				else if (!(field.allowZero && v.length === 0) && field.length) {
					(0, assert_1.default)(field.length === v.length, "The field ".concat(field.name, " must have byte length of ").concat(field.length));
				}
				self.raw[i] = v;
			}
			Object.defineProperty(self, field.name, {
				enumerable: true,
				configurable: true,
				get: getter,
				set: setter,
			});
			if (field.default) {
				self[field.name] = field.default;
			}
			// attach alias
			if (field.alias) {
				Object.defineProperty(self, field.alias, {
					enumerable: false,
					configurable: true,
					set: setter,
					get: getter,
				});
			}
		});
		// if the constuctor is passed data
		if (data) {
			if (typeof data === 'string') {
				data = Buffer.from((0, internal_1.stripHexPrefix)(data), 'hex');
			}
			if (Buffer.isBuffer(data)) {
				data = externals_1.rlp.decode(data);
			}
			if (Array.isArray(data)) {
				if (data.length > self._fields.length) {
					throw new Error('wrong number of fields in data');
				}
				// make sure all the items are buffers
				data.forEach(function (d, i) {
					self[self._fields[i]] = (0, bytes_1.toBuffer)(d);
				});
			}
			else if (typeof data === 'object') {
				var keys_1 = Object.keys(data);
				fields.forEach(function (field) {
					if (keys_1.indexOf(field.name) !== -1)
						self[field.name] = data[field.name];
					if (keys_1.indexOf(field.alias) !== -1)
						self[field.alias] = data[field.alias];
				});
			}
			else {
				throw new Error('invalid data');
			}
		}
	};
	exports.defineProperties = defineProperties;
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"./bytes":32,"./externals":34,"./internal":38,"assert":119,"buffer":125}],40:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;
	var secp256k1_1 = require("ethereum-cryptography/secp256k1");
	var externals_1 = require("./externals");
	var bytes_1 = require("./bytes");
	var hash_1 = require("./hash");
	var helpers_1 = require("./helpers");
	var types_1 = require("./types");
	function ecsign(msgHash, privateKey, chainId) {
		var _a = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey), signature = _a.signature, recovery = _a.recid;
		var r = Buffer.from(signature.slice(0, 32));
		var s = Buffer.from(signature.slice(32, 64));
		if (!chainId || typeof chainId === 'number') {
			// return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)
			if (chainId && !Number.isSafeInteger(chainId)) {
				throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
			}
			var v_1 = chainId ? recovery + (chainId * 2 + 35) : recovery + 27;
			return { r: r, s: s, v: v_1 };
		}
		var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
		var v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer);
		return { r: r, s: s, v: v };
	}
	exports.ecsign = ecsign;
	function calculateSigRecovery(v, chainId) {
		var vBN = (0, types_1.toType)(v, types_1.TypeOutput.BN);
		if (vBN.eqn(0) || vBN.eqn(1))
			return (0, types_1.toType)(v, types_1.TypeOutput.BN);
		if (!chainId) {
			return vBN.subn(27);
		}
		var chainIdBN = (0, types_1.toType)(chainId, types_1.TypeOutput.BN);
		return vBN.sub(chainIdBN.muln(2).addn(35));
	}
	function isValidSigRecovery(recovery) {
		var rec = new externals_1.BN(recovery);
		return rec.eqn(0) || rec.eqn(1);
	}
	/**
	 * ECDSA public key recovery from signature.
	 * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
	 * @returns Recovered public key
	 */
	var ecrecover = function (msgHash, v, r, s, chainId) {
		var signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);
		var recovery = calculateSigRecovery(v, chainId);
		if (!isValidSigRecovery(recovery)) {
			throw new Error('Invalid signature v value');
		}
		var senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);
		return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));
	};
	exports.ecrecover = ecrecover;
	/**
	 * Convert signature parameters into the format of `eth_sign` RPC method.
	 * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
	 * @returns Signature
	 */
	var toRpcSig = function (v, r, s, chainId) {
		var recovery = calculateSigRecovery(v, chainId);
		if (!isValidSigRecovery(recovery)) {
			throw new Error('Invalid signature v value');
		}
		// geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
		return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));
	};
	exports.toRpcSig = toRpcSig;
	/**
	 * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).
	 * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
	 * @returns Signature
	 */
	var toCompactSig = function (v, r, s, chainId) {
		var recovery = calculateSigRecovery(v, chainId);
		if (!isValidSigRecovery(recovery)) {
			throw new Error('Invalid signature v value');
		}
		var vn = (0, types_1.toType)(v, types_1.TypeOutput.Number);
		var ss = s;
		if ((vn > 28 && vn % 2 === 1) || vn === 1 || vn === 28) {
			ss = Buffer.from(s);
			ss[0] |= 0x80;
		}
		return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));
	};
	exports.toCompactSig = toCompactSig;
	/**
	 * Convert signature format of the `eth_sign` RPC method to signature parameters
	 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
	 * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes
	 * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.
	 */
	var fromRpcSig = function (sig) {
		var buf = (0, bytes_1.toBuffer)(sig);
		var r;
		var s;
		var v;
		if (buf.length >= 65) {
			r = buf.slice(0, 32);
			s = buf.slice(32, 64);
			v = (0, bytes_1.bufferToInt)(buf.slice(64));
		}
		else if (buf.length === 64) {
			// Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)
			r = buf.slice(0, 32);
			s = buf.slice(32, 64);
			v = (0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7;
			s[0] &= 0x7f;
		}
		else {
			throw new Error('Invalid signature length');
		}
		// support both versions of `eth_sign` responses
		if (v < 27) {
			v += 27;
		}
		return {
			v: v,
			r: r,
			s: s,
		};
	};
	exports.fromRpcSig = fromRpcSig;
	/**
	 * Validate a ECDSA signature.
	 * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions
	 * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
	 */
	var isValidSignature = function (v, r, s, homesteadOrLater, chainId) {
		if (homesteadOrLater === void 0) { homesteadOrLater = true; }
		var SECP256K1_N_DIV_2 = new externals_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
		var SECP256K1_N = new externals_1.BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
		if (r.length !== 32 || s.length !== 32) {
			return false;
		}
		if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {
			return false;
		}
		var rBN = new externals_1.BN(r);
		var sBN = new externals_1.BN(s);
		if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {
			return false;
		}
		if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {
			return false;
		}
		return true;
	};
	exports.isValidSignature = isValidSignature;
	/**
	 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
	 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
	 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
	 * used to produce the signature.
	 */
	var hashPersonalMessage = function (message) {
		(0, helpers_1.assertIsBuffer)(message);
		var prefix = Buffer.from("\u0019Ethereum Signed Message:\n".concat(message.length), 'utf-8');
		return (0, hash_1.keccak)(Buffer.concat([prefix, message]));
	};
	exports.hashPersonalMessage = hashPersonalMessage;
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"./bytes":32,"./externals":34,"./hash":35,"./helpers":36,"./types":41,"buffer":125,"ethereum-cryptography/secp256k1":29}],41:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toType = exports.TypeOutput = exports.bnToRlp = exports.bnToUnpaddedBuffer = exports.bnToHex = void 0;
	var externals_1 = require("./externals");
	var internal_1 = require("./internal");
	var bytes_1 = require("./bytes");
	/**
	 * Convert BN to 0x-prefixed hex string.
	 */
	function bnToHex(value) {
		return "0x".concat(value.toString(16));
	}
	exports.bnToHex = bnToHex;
	/**
	 * Convert value from BN to an unpadded Buffer
	 * (useful for RLP transport)
	 * @param value value to convert
	 */
	function bnToUnpaddedBuffer(value) {
		// Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`
		// for compatibility with browserify and similar tools
		return (0, bytes_1.unpadBuffer)(value.toArrayLike(Buffer));
	}
	exports.bnToUnpaddedBuffer = bnToUnpaddedBuffer;
	/**
	 * Deprecated alias for {@link bnToUnpaddedBuffer}
	 * @deprecated
	 */
	function bnToRlp(value) {
		return bnToUnpaddedBuffer(value);
	}
	exports.bnToRlp = bnToRlp;
	/**
	 * Type output options
	 */
	var TypeOutput;
	(function (TypeOutput) {
		TypeOutput[TypeOutput["Number"] = 0] = "Number";
		TypeOutput[TypeOutput["BN"] = 1] = "BN";
		TypeOutput[TypeOutput["Buffer"] = 2] = "Buffer";
		TypeOutput[TypeOutput["PrefixedHexString"] = 3] = "PrefixedHexString";
	})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));
	function toType(input, outputType) {
		if (input === null) {
			return null;
		}
		if (input === undefined) {
			return undefined;
		}
		if (typeof input === 'string' && !(0, internal_1.isHexString)(input)) {
			throw new Error("A string must be provided with a 0x-prefix, given: ".concat(input));
		}
		else if (typeof input === 'number' && !Number.isSafeInteger(input)) {
			throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)');
		}
		var output = (0, bytes_1.toBuffer)(input);
		if (outputType === TypeOutput.Buffer) {
			return output;
		}
		else if (outputType === TypeOutput.BN) {
			return new externals_1.BN(output);
		}
		else if (outputType === TypeOutput.Number) {
			var bn = new externals_1.BN(output);
			var max = new externals_1.BN(Number.MAX_SAFE_INTEGER.toString());
			if (bn.gt(max)) {
				throw new Error('The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)');
			}
			return bn.toNumber();
		}
		else {
			// outputType === TypeOutput.PrefixedHexString
			return "0x".concat(output.toString('hex'));
		}
	}
	exports.toType = toType;
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"./bytes":32,"./externals":34,"./internal":38,"buffer":125}],42:[function(require,module,exports){
	(function (module, exports) {
	  'use strict';
	
	  // Utils
	  function assert (val, msg) {
		if (!val) throw new Error(msg || 'Assertion failed');
	  }
	
	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
		ctor.super_ = superCtor;
		var TempCtor = function () {};
		TempCtor.prototype = superCtor.prototype;
		ctor.prototype = new TempCtor();
		ctor.prototype.constructor = ctor;
	  }
	
	  // BN
	
	  function BN (number, base, endian) {
		if (BN.isBN(number)) {
		  return number;
		}
	
		this.negative = 0;
		this.words = null;
		this.length = 0;
	
		// Reduction context
		this.red = null;
	
		if (number !== null) {
		  if (base === 'le' || base === 'be') {
			endian = base;
			base = 10;
		  }
	
		  this._init(number || 0, base || 10, endian || 'be');
		}
	  }
	  if (typeof module === 'object') {
		module.exports = BN;
	  } else {
		exports.BN = BN;
	  }
	
	  BN.BN = BN;
	  BN.wordSize = 26;
	
	  var Buffer;
	  try {
		if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
		  Buffer = window.Buffer;
		} else {
		  Buffer = require('buffer').Buffer;
		}
	  } catch (e) {
	  }
	
	  BN.isBN = function isBN (num) {
		if (num instanceof BN) {
		  return true;
		}
	
		return num !== null && typeof num === 'object' &&
		  num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };
	
	  BN.max = function max (left, right) {
		if (left.cmp(right) > 0) return left;
		return right;
	  };
	
	  BN.min = function min (left, right) {
		if (left.cmp(right) < 0) return left;
		return right;
	  };
	
	  BN.prototype._init = function init (number, base, endian) {
		if (typeof number === 'number') {
		  return this._initNumber(number, base, endian);
		}
	
		if (typeof number === 'object') {
		  return this._initArray(number, base, endian);
		}
	
		if (base === 'hex') {
		  base = 16;
		}
		assert(base === (base | 0) && base >= 2 && base <= 36);
	
		number = number.toString().replace(/\s+/g, '');
		var start = 0;
		if (number[0] === '-') {
		  start++;
		  this.negative = 1;
		}
	
		if (start < number.length) {
		  if (base === 16) {
			this._parseHex(number, start, endian);
		  } else {
			this._parseBase(number, base, start);
			if (endian === 'le') {
			  this._initArray(this.toArray(), base, endian);
			}
		  }
		}
	  };
	
	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
		if (number < 0) {
		  this.negative = 1;
		  number = -number;
		}
		if (number < 0x4000000) {
		  this.words = [number & 0x3ffffff];
		  this.length = 1;
		} else if (number < 0x10000000000000) {
		  this.words = [
			number & 0x3ffffff,
			(number / 0x4000000) & 0x3ffffff
		  ];
		  this.length = 2;
		} else {
		  assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		  this.words = [
			number & 0x3ffffff,
			(number / 0x4000000) & 0x3ffffff,
			1
		  ];
		  this.length = 3;
		}
	
		if (endian !== 'le') return;
	
		// Reverse the bytes
		this._initArray(this.toArray(), base, endian);
	  };
	
	  BN.prototype._initArray = function _initArray (number, base, endian) {
		// Perhaps a Uint8Array
		assert(typeof number.length === 'number');
		if (number.length <= 0) {
		  this.words = [0];
		  this.length = 1;
		  return this;
		}
	
		this.length = Math.ceil(number.length / 3);
		this.words = new Array(this.length);
		for (var i = 0; i < this.length; i++) {
		  this.words[i] = 0;
		}
	
		var j, w;
		var off = 0;
		if (endian === 'be') {
		  for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
			w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
			this.words[j] |= (w << off) & 0x3ffffff;
			this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
			off += 24;
			if (off >= 26) {
			  off -= 26;
			  j++;
			}
		  }
		} else if (endian === 'le') {
		  for (i = 0, j = 0; i < number.length; i += 3) {
			w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
			this.words[j] |= (w << off) & 0x3ffffff;
			this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
			off += 24;
			if (off >= 26) {
			  off -= 26;
			  j++;
			}
		  }
		}
		return this._strip();
	  };
	
	  function parseHex4Bits (string, index) {
		var c = string.charCodeAt(index);
		// '0' - '9'
		if (c >= 48 && c <= 57) {
		  return c - 48;
		// 'A' - 'F'
		} else if (c >= 65 && c <= 70) {
		  return c - 55;
		// 'a' - 'f'
		} else if (c >= 97 && c <= 102) {
		  return c - 87;
		} else {
		  assert(false, 'Invalid character in ' + string);
		}
	  }
	
	  function parseHexByte (string, lowerBound, index) {
		var r = parseHex4Bits(string, index);
		if (index - 1 >= lowerBound) {
		  r |= parseHex4Bits(string, index - 1) << 4;
		}
		return r;
	  }
	
	  BN.prototype._parseHex = function _parseHex (number, start, endian) {
		// Create possibly bigger array to ensure that it fits the number
		this.length = Math.ceil((number.length - start) / 6);
		this.words = new Array(this.length);
		for (var i = 0; i < this.length; i++) {
		  this.words[i] = 0;
		}
	
		// 24-bits chunks
		var off = 0;
		var j = 0;
	
		var w;
		if (endian === 'be') {
		  for (i = number.length - 1; i >= start; i -= 2) {
			w = parseHexByte(number, start, i) << off;
			this.words[j] |= w & 0x3ffffff;
			if (off >= 18) {
			  off -= 18;
			  j += 1;
			  this.words[j] |= w >>> 26;
			} else {
			  off += 8;
			}
		  }
		} else {
		  var parseLength = number.length - start;
		  for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
			w = parseHexByte(number, start, i) << off;
			this.words[j] |= w & 0x3ffffff;
			if (off >= 18) {
			  off -= 18;
			  j += 1;
			  this.words[j] |= w >>> 26;
			} else {
			  off += 8;
			}
		  }
		}
	
		this._strip();
	  };
	
	  function parseBase (str, start, end, mul) {
		var r = 0;
		var b = 0;
		var len = Math.min(str.length, end);
		for (var i = start; i < len; i++) {
		  var c = str.charCodeAt(i) - 48;
	
		  r *= mul;
	
		  // 'a'
		  if (c >= 49) {
			b = c - 49 + 0xa;
	
		  // 'A'
		  } else if (c >= 17) {
			b = c - 17 + 0xa;
	
		  // '0' - '9'
		  } else {
			b = c;
		  }
		  assert(c >= 0 && b < mul, 'Invalid character');
		  r += b;
		}
		return r;
	  }
	
	  BN.prototype._parseBase = function _parseBase (number, base, start) {
		// Initialize as zero
		this.words = [0];
		this.length = 1;
	
		// Find length of limb in base
		for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		  limbLen++;
		}
		limbLen--;
		limbPow = (limbPow / base) | 0;
	
		var total = number.length - start;
		var mod = total % limbLen;
		var end = Math.min(total, total - mod) + start;
	
		var word = 0;
		for (var i = start; i < end; i += limbLen) {
		  word = parseBase(number, i, i + limbLen, base);
	
		  this.imuln(limbPow);
		  if (this.words[0] + word < 0x4000000) {
			this.words[0] += word;
		  } else {
			this._iaddn(word);
		  }
		}
	
		if (mod !== 0) {
		  var pow = 1;
		  word = parseBase(number, i, number.length, base);
	
		  for (i = 0; i < mod; i++) {
			pow *= base;
		  }
	
		  this.imuln(pow);
		  if (this.words[0] + word < 0x4000000) {
			this.words[0] += word;
		  } else {
			this._iaddn(word);
		  }
		}
	
		this._strip();
	  };
	
	  BN.prototype.copy = function copy (dest) {
		dest.words = new Array(this.length);
		for (var i = 0; i < this.length; i++) {
		  dest.words[i] = this.words[i];
		}
		dest.length = this.length;
		dest.negative = this.negative;
		dest.red = this.red;
	  };
	
	  function move (dest, src) {
		dest.words = src.words;
		dest.length = src.length;
		dest.negative = src.negative;
		dest.red = src.red;
	  }
	
	  BN.prototype._move = function _move (dest) {
		move(dest, this);
	  };
	
	  BN.prototype.clone = function clone () {
		var r = new BN(null);
		this.copy(r);
		return r;
	  };
	
	  BN.prototype._expand = function _expand (size) {
		while (this.length < size) {
		  this.words[this.length++] = 0;
		}
		return this;
	  };
	
	  // Remove leading `0` from `this`
	  BN.prototype._strip = function strip () {
		while (this.length > 1 && this.words[this.length - 1] === 0) {
		  this.length--;
		}
		return this._normSign();
	  };
	
	  BN.prototype._normSign = function _normSign () {
		// -0 = 0
		if (this.length === 1 && this.words[0] === 0) {
		  this.negative = 0;
		}
		return this;
	  };
	
	  // Check Symbol.for because not everywhere where Symbol defined
	  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
	  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
		try {
		  BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
		} catch (e) {
		  BN.prototype.inspect = inspect;
		}
	  } else {
		BN.prototype.inspect = inspect;
	  }
	
	  function inspect () {
		return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  }
	
	  /*
	
	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];
	
	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
		zeros[i] = s;
		s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
		var groupSize = 0;
		var groupBase = 1;
		while (groupBase < (1 << BN.wordSize) / base) {
		  groupBase *= base;
		  groupSize += 1;
		}
		groupSizes[base] = groupSize;
		groupBases[base] = groupBase;
	  }
	
	  */
	
	  var zeros = [
		'',
		'0',
		'00',
		'000',
		'0000',
		'00000',
		'000000',
		'0000000',
		'00000000',
		'000000000',
		'0000000000',
		'00000000000',
		'000000000000',
		'0000000000000',
		'00000000000000',
		'000000000000000',
		'0000000000000000',
		'00000000000000000',
		'000000000000000000',
		'0000000000000000000',
		'00000000000000000000',
		'000000000000000000000',
		'0000000000000000000000',
		'00000000000000000000000',
		'000000000000000000000000',
		'0000000000000000000000000'
	  ];
	
	  var groupSizes = [
		0, 0,
		25, 16, 12, 11, 10, 9, 8,
		8, 7, 7, 7, 7, 6, 6,
		6, 6, 6, 6, 6, 5, 5,
		5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5
	  ];
	
	  var groupBases = [
		0, 0,
		33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
		43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
		16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
		6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
		24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];
	
	  BN.prototype.toString = function toString (base, padding) {
		base = base || 10;
		padding = padding | 0 || 1;
	
		var out;
		if (base === 16 || base === 'hex') {
		  out = '';
		  var off = 0;
		  var carry = 0;
		  for (var i = 0; i < this.length; i++) {
			var w = this.words[i];
			var word = (((w << off) | carry) & 0xffffff).toString(16);
			carry = (w >>> (24 - off)) & 0xffffff;
			off += 2;
			if (off >= 26) {
			  off -= 26;
			  i--;
			}
			if (carry !== 0 || i !== this.length - 1) {
			  out = zeros[6 - word.length] + word + out;
			} else {
			  out = word + out;
			}
		  }
		  if (carry !== 0) {
			out = carry.toString(16) + out;
		  }
		  while (out.length % padding !== 0) {
			out = '0' + out;
		  }
		  if (this.negative !== 0) {
			out = '-' + out;
		  }
		  return out;
		}
	
		if (base === (base | 0) && base >= 2 && base <= 36) {
		  // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		  var groupSize = groupSizes[base];
		  // var groupBase = Math.pow(base, groupSize);
		  var groupBase = groupBases[base];
		  out = '';
		  var c = this.clone();
		  c.negative = 0;
		  while (!c.isZero()) {
			var r = c.modrn(groupBase).toString(base);
			c = c.idivn(groupBase);
	
			if (!c.isZero()) {
			  out = zeros[groupSize - r.length] + r + out;
			} else {
			  out = r + out;
			}
		  }
		  if (this.isZero()) {
			out = '0' + out;
		  }
		  while (out.length % padding !== 0) {
			out = '0' + out;
		  }
		  if (this.negative !== 0) {
			out = '-' + out;
		  }
		  return out;
		}
	
		assert(false, 'Base should be between 2 and 36');
	  };
	
	  BN.prototype.toNumber = function toNumber () {
		var ret = this.words[0];
		if (this.length === 2) {
		  ret += this.words[1] * 0x4000000;
		} else if (this.length === 3 && this.words[2] === 0x01) {
		  // NOTE: at this stage it is known that the top bit is set
		  ret += 0x10000000000000 + (this.words[1] * 0x4000000);
		} else if (this.length > 2) {
		  assert(false, 'Number can only safely store up to 53 bits');
		}
		return (this.negative !== 0) ? -ret : ret;
	  };
	
	  BN.prototype.toJSON = function toJSON () {
		return this.toString(16, 2);
	  };
	
	  if (Buffer) {
		BN.prototype.toBuffer = function toBuffer (endian, length) {
		  return this.toArrayLike(Buffer, endian, length);
		};
	  }
	
	  BN.prototype.toArray = function toArray (endian, length) {
		return this.toArrayLike(Array, endian, length);
	  };
	
	  var allocate = function allocate (ArrayType, size) {
		if (ArrayType.allocUnsafe) {
		  return ArrayType.allocUnsafe(size);
		}
		return new ArrayType(size);
	  };
	
	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
		this._strip();
	
		var byteLength = this.byteLength();
		var reqLength = length || Math.max(1, byteLength);
		assert(byteLength <= reqLength, 'byte array longer than desired length');
		assert(reqLength > 0, 'Requested array length <= 0');
	
		var res = allocate(ArrayType, reqLength);
		var postfix = endian === 'le' ? 'LE' : 'BE';
		this['_toArrayLike' + postfix](res, byteLength);
		return res;
	  };
	
	  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
		var position = 0;
		var carry = 0;
	
		for (var i = 0, shift = 0; i < this.length; i++) {
		  var word = (this.words[i] << shift) | carry;
	
		  res[position++] = word & 0xff;
		  if (position < res.length) {
			res[position++] = (word >> 8) & 0xff;
		  }
		  if (position < res.length) {
			res[position++] = (word >> 16) & 0xff;
		  }
	
		  if (shift === 6) {
			if (position < res.length) {
			  res[position++] = (word >> 24) & 0xff;
			}
			carry = 0;
			shift = 0;
		  } else {
			carry = word >>> 24;
			shift += 2;
		  }
		}
	
		if (position < res.length) {
		  res[position++] = carry;
	
		  while (position < res.length) {
			res[position++] = 0;
		  }
		}
	  };
	
	  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
		var position = res.length - 1;
		var carry = 0;
	
		for (var i = 0, shift = 0; i < this.length; i++) {
		  var word = (this.words[i] << shift) | carry;
	
		  res[position--] = word & 0xff;
		  if (position >= 0) {
			res[position--] = (word >> 8) & 0xff;
		  }
		  if (position >= 0) {
			res[position--] = (word >> 16) & 0xff;
		  }
	
		  if (shift === 6) {
			if (position >= 0) {
			  res[position--] = (word >> 24) & 0xff;
			}
			carry = 0;
			shift = 0;
		  } else {
			carry = word >>> 24;
			shift += 2;
		  }
		}
	
		if (position >= 0) {
		  res[position--] = carry;
	
		  while (position >= 0) {
			res[position--] = 0;
		  }
		}
	  };
	
	  if (Math.clz32) {
		BN.prototype._countBits = function _countBits (w) {
		  return 32 - Math.clz32(w);
		};
	  } else {
		BN.prototype._countBits = function _countBits (w) {
		  var t = w;
		  var r = 0;
		  if (t >= 0x1000) {
			r += 13;
			t >>>= 13;
		  }
		  if (t >= 0x40) {
			r += 7;
			t >>>= 7;
		  }
		  if (t >= 0x8) {
			r += 4;
			t >>>= 4;
		  }
		  if (t >= 0x02) {
			r += 2;
			t >>>= 2;
		  }
		  return r + t;
		};
	  }
	
	  BN.prototype._zeroBits = function _zeroBits (w) {
		// Short-cut
		if (w === 0) return 26;
	
		var t = w;
		var r = 0;
		if ((t & 0x1fff) === 0) {
		  r += 13;
		  t >>>= 13;
		}
		if ((t & 0x7f) === 0) {
		  r += 7;
		  t >>>= 7;
		}
		if ((t & 0xf) === 0) {
		  r += 4;
		  t >>>= 4;
		}
		if ((t & 0x3) === 0) {
		  r += 2;
		  t >>>= 2;
		}
		if ((t & 0x1) === 0) {
		  r++;
		}
		return r;
	  };
	
	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
		var w = this.words[this.length - 1];
		var hi = this._countBits(w);
		return (this.length - 1) * 26 + hi;
	  };
	
	  function toBitArray (num) {
		var w = new Array(num.bitLength());
	
		for (var bit = 0; bit < w.length; bit++) {
		  var off = (bit / 26) | 0;
		  var wbit = bit % 26;
	
		  w[bit] = (num.words[off] >>> wbit) & 0x01;
		}
	
		return w;
	  }
	
	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
		if (this.isZero()) return 0;
	
		var r = 0;
		for (var i = 0; i < this.length; i++) {
		  var b = this._zeroBits(this.words[i]);
		  r += b;
		  if (b !== 26) break;
		}
		return r;
	  };
	
	  BN.prototype.byteLength = function byteLength () {
		return Math.ceil(this.bitLength() / 8);
	  };
	
	  BN.prototype.toTwos = function toTwos (width) {
		if (this.negative !== 0) {
		  return this.abs().inotn(width).iaddn(1);
		}
		return this.clone();
	  };
	
	  BN.prototype.fromTwos = function fromTwos (width) {
		if (this.testn(width - 1)) {
		  return this.notn(width).iaddn(1).ineg();
		}
		return this.clone();
	  };
	
	  BN.prototype.isNeg = function isNeg () {
		return this.negative !== 0;
	  };
	
	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
		return this.clone().ineg();
	  };
	
	  BN.prototype.ineg = function ineg () {
		if (!this.isZero()) {
		  this.negative ^= 1;
		}
	
		return this;
	  };
	
	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
		while (this.length < num.length) {
		  this.words[this.length++] = 0;
		}
	
		for (var i = 0; i < num.length; i++) {
		  this.words[i] = this.words[i] | num.words[i];
		}
	
		return this._strip();
	  };
	
	  BN.prototype.ior = function ior (num) {
		assert((this.negative | num.negative) === 0);
		return this.iuor(num);
	  };
	
	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
		if (this.length > num.length) return this.clone().ior(num);
		return num.clone().ior(this);
	  };
	
	  BN.prototype.uor = function uor (num) {
		if (this.length > num.length) return this.clone().iuor(num);
		return num.clone().iuor(this);
	  };
	
	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
		// b = min-length(num, this)
		var b;
		if (this.length > num.length) {
		  b = num;
		} else {
		  b = this;
		}
	
		for (var i = 0; i < b.length; i++) {
		  this.words[i] = this.words[i] & num.words[i];
		}
	
		this.length = b.length;
	
		return this._strip();
	  };
	
	  BN.prototype.iand = function iand (num) {
		assert((this.negative | num.negative) === 0);
		return this.iuand(num);
	  };
	
	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
		if (this.length > num.length) return this.clone().iand(num);
		return num.clone().iand(this);
	  };
	
	  BN.prototype.uand = function uand (num) {
		if (this.length > num.length) return this.clone().iuand(num);
		return num.clone().iuand(this);
	  };
	
	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
		// a.length > b.length
		var a;
		var b;
		if (this.length > num.length) {
		  a = this;
		  b = num;
		} else {
		  a = num;
		  b = this;
		}
	
		for (var i = 0; i < b.length; i++) {
		  this.words[i] = a.words[i] ^ b.words[i];
		}
	
		if (this !== a) {
		  for (; i < a.length; i++) {
			this.words[i] = a.words[i];
		  }
		}
	
		this.length = a.length;
	
		return this._strip();
	  };
	
	  BN.prototype.ixor = function ixor (num) {
		assert((this.negative | num.negative) === 0);
		return this.iuxor(num);
	  };
	
	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
		if (this.length > num.length) return this.clone().ixor(num);
		return num.clone().ixor(this);
	  };
	
	  BN.prototype.uxor = function uxor (num) {
		if (this.length > num.length) return this.clone().iuxor(num);
		return num.clone().iuxor(this);
	  };
	
	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
		assert(typeof width === 'number' && width >= 0);
	
		var bytesNeeded = Math.ceil(width / 26) | 0;
		var bitsLeft = width % 26;
	
		// Extend the buffer with leading zeroes
		this._expand(bytesNeeded);
	
		if (bitsLeft > 0) {
		  bytesNeeded--;
		}
	
		// Handle complete words
		for (var i = 0; i < bytesNeeded; i++) {
		  this.words[i] = ~this.words[i] & 0x3ffffff;
		}
	
		// Handle the residue
		if (bitsLeft > 0) {
		  this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
		}
	
		// And remove leading zeroes
		return this._strip();
	  };
	
	  BN.prototype.notn = function notn (width) {
		return this.clone().inotn(width);
	  };
	
	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
		assert(typeof bit === 'number' && bit >= 0);
	
		var off = (bit / 26) | 0;
		var wbit = bit % 26;
	
		this._expand(off + 1);
	
		if (val) {
		  this.words[off] = this.words[off] | (1 << wbit);
		} else {
		  this.words[off] = this.words[off] & ~(1 << wbit);
		}
	
		return this._strip();
	  };
	
	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
		var r;
	
		// negative + positive
		if (this.negative !== 0 && num.negative === 0) {
		  this.negative = 0;
		  r = this.isub(num);
		  this.negative ^= 1;
		  return this._normSign();
	
		// positive + negative
		} else if (this.negative === 0 && num.negative !== 0) {
		  num.negative = 0;
		  r = this.isub(num);
		  num.negative = 1;
		  return r._normSign();
		}
	
		// a.length > b.length
		var a, b;
		if (this.length > num.length) {
		  a = this;
		  b = num;
		} else {
		  a = num;
		  b = this;
		}
	
		var carry = 0;
		for (var i = 0; i < b.length; i++) {
		  r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		  this.words[i] = r & 0x3ffffff;
		  carry = r >>> 26;
		}
		for (; carry !== 0 && i < a.length; i++) {
		  r = (a.words[i] | 0) + carry;
		  this.words[i] = r & 0x3ffffff;
		  carry = r >>> 26;
		}
	
		this.length = a.length;
		if (carry !== 0) {
		  this.words[this.length] = carry;
		  this.length++;
		// Copy the rest of the words
		} else if (a !== this) {
		  for (; i < a.length; i++) {
			this.words[i] = a.words[i];
		  }
		}
	
		return this;
	  };
	
	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
		var res;
		if (num.negative !== 0 && this.negative === 0) {
		  num.negative = 0;
		  res = this.sub(num);
		  num.negative ^= 1;
		  return res;
		} else if (num.negative === 0 && this.negative !== 0) {
		  this.negative = 0;
		  res = num.sub(this);
		  this.negative = 1;
		  return res;
		}
	
		if (this.length > num.length) return this.clone().iadd(num);
	
		return num.clone().iadd(this);
	  };
	
	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
		// this - (-num) = this + num
		if (num.negative !== 0) {
		  num.negative = 0;
		  var r = this.iadd(num);
		  num.negative = 1;
		  return r._normSign();
	
		// -this - num = -(this + num)
		} else if (this.negative !== 0) {
		  this.negative = 0;
		  this.iadd(num);
		  this.negative = 1;
		  return this._normSign();
		}
	
		// At this point both numbers are positive
		var cmp = this.cmp(num);
	
		// Optimization - zeroify
		if (cmp === 0) {
		  this.negative = 0;
		  this.length = 1;
		  this.words[0] = 0;
		  return this;
		}
	
		// a > b
		var a, b;
		if (cmp > 0) {
		  a = this;
		  b = num;
		} else {
		  a = num;
		  b = this;
		}
	
		var carry = 0;
		for (var i = 0; i < b.length; i++) {
		  r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		  carry = r >> 26;
		  this.words[i] = r & 0x3ffffff;
		}
		for (; carry !== 0 && i < a.length; i++) {
		  r = (a.words[i] | 0) + carry;
		  carry = r >> 26;
		  this.words[i] = r & 0x3ffffff;
		}
	
		// Copy rest of the words
		if (carry === 0 && i < a.length && a !== this) {
		  for (; i < a.length; i++) {
			this.words[i] = a.words[i];
		  }
		}
	
		this.length = Math.max(this.length, i);
	
		if (a !== this) {
		  this.negative = 1;
		}
	
		return this._strip();
	  };
	
	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
		return this.clone().isub(num);
	  };
	
	  function smallMulTo (self, num, out) {
		out.negative = num.negative ^ self.negative;
		var len = (self.length + num.length) | 0;
		out.length = len;
		len = (len - 1) | 0;
	
		// Peel one iteration (compiler can't do it, because of code complexity)
		var a = self.words[0] | 0;
		var b = num.words[0] | 0;
		var r = a * b;
	
		var lo = r & 0x3ffffff;
		var carry = (r / 0x4000000) | 0;
		out.words[0] = lo;
	
		for (var k = 1; k < len; k++) {
		  // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		  // note that ncarry could be >= 0x3ffffff
		  var ncarry = carry >>> 26;
		  var rword = carry & 0x3ffffff;
		  var maxJ = Math.min(k, num.length - 1);
		  for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
			var i = (k - j) | 0;
			a = self.words[i] | 0;
			b = num.words[j] | 0;
			r = a * b + rword;
			ncarry += (r / 0x4000000) | 0;
			rword = r & 0x3ffffff;
		  }
		  out.words[k] = rword | 0;
		  carry = ncarry | 0;
		}
		if (carry !== 0) {
		  out.words[k] = carry | 0;
		} else {
		  out.length--;
		}
	
		return out._strip();
	  }
	
	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
		var a = self.words;
		var b = num.words;
		var o = out.words;
		var c = 0;
		var lo;
		var mid;
		var hi;
		var a0 = a[0] | 0;
		var al0 = a0 & 0x1fff;
		var ah0 = a0 >>> 13;
		var a1 = a[1] | 0;
		var al1 = a1 & 0x1fff;
		var ah1 = a1 >>> 13;
		var a2 = a[2] | 0;
		var al2 = a2 & 0x1fff;
		var ah2 = a2 >>> 13;
		var a3 = a[3] | 0;
		var al3 = a3 & 0x1fff;
		var ah3 = a3 >>> 13;
		var a4 = a[4] | 0;
		var al4 = a4 & 0x1fff;
		var ah4 = a4 >>> 13;
		var a5 = a[5] | 0;
		var al5 = a5 & 0x1fff;
		var ah5 = a5 >>> 13;
		var a6 = a[6] | 0;
		var al6 = a6 & 0x1fff;
		var ah6 = a6 >>> 13;
		var a7 = a[7] | 0;
		var al7 = a7 & 0x1fff;
		var ah7 = a7 >>> 13;
		var a8 = a[8] | 0;
		var al8 = a8 & 0x1fff;
		var ah8 = a8 >>> 13;
		var a9 = a[9] | 0;
		var al9 = a9 & 0x1fff;
		var ah9 = a9 >>> 13;
		var b0 = b[0] | 0;
		var bl0 = b0 & 0x1fff;
		var bh0 = b0 >>> 13;
		var b1 = b[1] | 0;
		var bl1 = b1 & 0x1fff;
		var bh1 = b1 >>> 13;
		var b2 = b[2] | 0;
		var bl2 = b2 & 0x1fff;
		var bh2 = b2 >>> 13;
		var b3 = b[3] | 0;
		var bl3 = b3 & 0x1fff;
		var bh3 = b3 >>> 13;
		var b4 = b[4] | 0;
		var bl4 = b4 & 0x1fff;
		var bh4 = b4 >>> 13;
		var b5 = b[5] | 0;
		var bl5 = b5 & 0x1fff;
		var bh5 = b5 >>> 13;
		var b6 = b[6] | 0;
		var bl6 = b6 & 0x1fff;
		var bh6 = b6 >>> 13;
		var b7 = b[7] | 0;
		var bl7 = b7 & 0x1fff;
		var bh7 = b7 >>> 13;
		var b8 = b[8] | 0;
		var bl8 = b8 & 0x1fff;
		var bh8 = b8 >>> 13;
		var b9 = b[9] | 0;
		var bl9 = b9 & 0x1fff;
		var bh9 = b9 >>> 13;
	
		out.negative = self.negative ^ num.negative;
		out.length = 19;
		/* k = 0 */
		lo = Math.imul(al0, bl0);
		mid = Math.imul(al0, bh0);
		mid = (mid + Math.imul(ah0, bl0)) | 0;
		hi = Math.imul(ah0, bh0);
		var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
		w0 &= 0x3ffffff;
		/* k = 1 */
		lo = Math.imul(al1, bl0);
		mid = Math.imul(al1, bh0);
		mid = (mid + Math.imul(ah1, bl0)) | 0;
		hi = Math.imul(ah1, bh0);
		lo = (lo + Math.imul(al0, bl1)) | 0;
		mid = (mid + Math.imul(al0, bh1)) | 0;
		mid = (mid + Math.imul(ah0, bl1)) | 0;
		hi = (hi + Math.imul(ah0, bh1)) | 0;
		var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
		w1 &= 0x3ffffff;
		/* k = 2 */
		lo = Math.imul(al2, bl0);
		mid = Math.imul(al2, bh0);
		mid = (mid + Math.imul(ah2, bl0)) | 0;
		hi = Math.imul(ah2, bh0);
		lo = (lo + Math.imul(al1, bl1)) | 0;
		mid = (mid + Math.imul(al1, bh1)) | 0;
		mid = (mid + Math.imul(ah1, bl1)) | 0;
		hi = (hi + Math.imul(ah1, bh1)) | 0;
		lo = (lo + Math.imul(al0, bl2)) | 0;
		mid = (mid + Math.imul(al0, bh2)) | 0;
		mid = (mid + Math.imul(ah0, bl2)) | 0;
		hi = (hi + Math.imul(ah0, bh2)) | 0;
		var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
		w2 &= 0x3ffffff;
		/* k = 3 */
		lo = Math.imul(al3, bl0);
		mid = Math.imul(al3, bh0);
		mid = (mid + Math.imul(ah3, bl0)) | 0;
		hi = Math.imul(ah3, bh0);
		lo = (lo + Math.imul(al2, bl1)) | 0;
		mid = (mid + Math.imul(al2, bh1)) | 0;
		mid = (mid + Math.imul(ah2, bl1)) | 0;
		hi = (hi + Math.imul(ah2, bh1)) | 0;
		lo = (lo + Math.imul(al1, bl2)) | 0;
		mid = (mid + Math.imul(al1, bh2)) | 0;
		mid = (mid + Math.imul(ah1, bl2)) | 0;
		hi = (hi + Math.imul(ah1, bh2)) | 0;
		lo = (lo + Math.imul(al0, bl3)) | 0;
		mid = (mid + Math.imul(al0, bh3)) | 0;
		mid = (mid + Math.imul(ah0, bl3)) | 0;
		hi = (hi + Math.imul(ah0, bh3)) | 0;
		var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
		w3 &= 0x3ffffff;
		/* k = 4 */
		lo = Math.imul(al4, bl0);
		mid = Math.imul(al4, bh0);
		mid = (mid + Math.imul(ah4, bl0)) | 0;
		hi = Math.imul(ah4, bh0);
		lo = (lo + Math.imul(al3, bl1)) | 0;
		mid = (mid + Math.imul(al3, bh1)) | 0;
		mid = (mid + Math.imul(ah3, bl1)) | 0;
		hi = (hi + Math.imul(ah3, bh1)) | 0;
		lo = (lo + Math.imul(al2, bl2)) | 0;
		mid = (mid + Math.imul(al2, bh2)) | 0;
		mid = (mid + Math.imul(ah2, bl2)) | 0;
		hi = (hi + Math.imul(ah2, bh2)) | 0;
		lo = (lo + Math.imul(al1, bl3)) | 0;
		mid = (mid + Math.imul(al1, bh3)) | 0;
		mid = (mid + Math.imul(ah1, bl3)) | 0;
		hi = (hi + Math.imul(ah1, bh3)) | 0;
		lo = (lo + Math.imul(al0, bl4)) | 0;
		mid = (mid + Math.imul(al0, bh4)) | 0;
		mid = (mid + Math.imul(ah0, bl4)) | 0;
		hi = (hi + Math.imul(ah0, bh4)) | 0;
		var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
		w4 &= 0x3ffffff;
		/* k = 5 */
		lo = Math.imul(al5, bl0);
		mid = Math.imul(al5, bh0);
		mid = (mid + Math.imul(ah5, bl0)) | 0;
		hi = Math.imul(ah5, bh0);
		lo = (lo + Math.imul(al4, bl1)) | 0;
		mid = (mid + Math.imul(al4, bh1)) | 0;
		mid = (mid + Math.imul(ah4, bl1)) | 0;
		hi = (hi + Math.imul(ah4, bh1)) | 0;
		lo = (lo + Math.imul(al3, bl2)) | 0;
		mid = (mid + Math.imul(al3, bh2)) | 0;
		mid = (mid + Math.imul(ah3, bl2)) | 0;
		hi = (hi + Math.imul(ah3, bh2)) | 0;
		lo = (lo + Math.imul(al2, bl3)) | 0;
		mid = (mid + Math.imul(al2, bh3)) | 0;
		mid = (mid + Math.imul(ah2, bl3)) | 0;
		hi = (hi + Math.imul(ah2, bh3)) | 0;
		lo = (lo + Math.imul(al1, bl4)) | 0;
		mid = (mid + Math.imul(al1, bh4)) | 0;
		mid = (mid + Math.imul(ah1, bl4)) | 0;
		hi = (hi + Math.imul(ah1, bh4)) | 0;
		lo = (lo + Math.imul(al0, bl5)) | 0;
		mid = (mid + Math.imul(al0, bh5)) | 0;
		mid = (mid + Math.imul(ah0, bl5)) | 0;
		hi = (hi + Math.imul(ah0, bh5)) | 0;
		var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
		w5 &= 0x3ffffff;
		/* k = 6 */
		lo = Math.imul(al6, bl0);
		mid = Math.imul(al6, bh0);
		mid = (mid + Math.imul(ah6, bl0)) | 0;
		hi = Math.imul(ah6, bh0);
		lo = (lo + Math.imul(al5, bl1)) | 0;
		mid = (mid + Math.imul(al5, bh1)) | 0;
		mid = (mid + Math.imul(ah5, bl1)) | 0;
		hi = (hi + Math.imul(ah5, bh1)) | 0;
		lo = (lo + Math.imul(al4, bl2)) | 0;
		mid = (mid + Math.imul(al4, bh2)) | 0;
		mid = (mid + Math.imul(ah4, bl2)) | 0;
		hi = (hi + Math.imul(ah4, bh2)) | 0;
		lo = (lo + Math.imul(al3, bl3)) | 0;
		mid = (mid + Math.imul(al3, bh3)) | 0;
		mid = (mid + Math.imul(ah3, bl3)) | 0;
		hi = (hi + Math.imul(ah3, bh3)) | 0;
		lo = (lo + Math.imul(al2, bl4)) | 0;
		mid = (mid + Math.imul(al2, bh4)) | 0;
		mid = (mid + Math.imul(ah2, bl4)) | 0;
		hi = (hi + Math.imul(ah2, bh4)) | 0;
		lo = (lo + Math.imul(al1, bl5)) | 0;
		mid = (mid + Math.imul(al1, bh5)) | 0;
		mid = (mid + Math.imul(ah1, bl5)) | 0;
		hi = (hi + Math.imul(ah1, bh5)) | 0;
		lo = (lo + Math.imul(al0, bl6)) | 0;
		mid = (mid + Math.imul(al0, bh6)) | 0;
		mid = (mid + Math.imul(ah0, bl6)) | 0;
		hi = (hi + Math.imul(ah0, bh6)) | 0;
		var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
		w6 &= 0x3ffffff;
		/* k = 7 */
		lo = Math.imul(al7, bl0);
		mid = Math.imul(al7, bh0);
		mid = (mid + Math.imul(ah7, bl0)) | 0;
		hi = Math.imul(ah7, bh0);
		lo = (lo + Math.imul(al6, bl1)) | 0;
		mid = (mid + Math.imul(al6, bh1)) | 0;
		mid = (mid + Math.imul(ah6, bl1)) | 0;
		hi = (hi + Math.imul(ah6, bh1)) | 0;
		lo = (lo + Math.imul(al5, bl2)) | 0;
		mid = (mid + Math.imul(al5, bh2)) | 0;
		mid = (mid + Math.imul(ah5, bl2)) | 0;
		hi = (hi + Math.imul(ah5, bh2)) | 0;
		lo = (lo + Math.imul(al4, bl3)) | 0;
		mid = (mid + Math.imul(al4, bh3)) | 0;
		mid = (mid + Math.imul(ah4, bl3)) | 0;
		hi = (hi + Math.imul(ah4, bh3)) | 0;
		lo = (lo + Math.imul(al3, bl4)) | 0;
		mid = (mid + Math.imul(al3, bh4)) | 0;
		mid = (mid + Math.imul(ah3, bl4)) | 0;
		hi = (hi + Math.imul(ah3, bh4)) | 0;
		lo = (lo + Math.imul(al2, bl5)) | 0;
		mid = (mid + Math.imul(al2, bh5)) | 0;
		mid = (mid + Math.imul(ah2, bl5)) | 0;
		hi = (hi + Math.imul(ah2, bh5)) | 0;
		lo = (lo + Math.imul(al1, bl6)) | 0;
		mid = (mid + Math.imul(al1, bh6)) | 0;
		mid = (mid + Math.imul(ah1, bl6)) | 0;
		hi = (hi + Math.imul(ah1, bh6)) | 0;
		lo = (lo + Math.imul(al0, bl7)) | 0;
		mid = (mid + Math.imul(al0, bh7)) | 0;
		mid = (mid + Math.imul(ah0, bl7)) | 0;
		hi = (hi + Math.imul(ah0, bh7)) | 0;
		var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
		w7 &= 0x3ffffff;
		/* k = 8 */
		lo = Math.imul(al8, bl0);
		mid = Math.imul(al8, bh0);
		mid = (mid + Math.imul(ah8, bl0)) | 0;
		hi = Math.imul(ah8, bh0);
		lo = (lo + Math.imul(al7, bl1)) | 0;
		mid = (mid + Math.imul(al7, bh1)) | 0;
		mid = (mid + Math.imul(ah7, bl1)) | 0;
		hi = (hi + Math.imul(ah7, bh1)) | 0;
		lo = (lo + Math.imul(al6, bl2)) | 0;
		mid = (mid + Math.imul(al6, bh2)) | 0;
		mid = (mid + Math.imul(ah6, bl2)) | 0;
		hi = (hi + Math.imul(ah6, bh2)) | 0;
		lo = (lo + Math.imul(al5, bl3)) | 0;
		mid = (mid + Math.imul(al5, bh3)) | 0;
		mid = (mid + Math.imul(ah5, bl3)) | 0;
		hi = (hi + Math.imul(ah5, bh3)) | 0;
		lo = (lo + Math.imul(al4, bl4)) | 0;
		mid = (mid + Math.imul(al4, bh4)) | 0;
		mid = (mid + Math.imul(ah4, bl4)) | 0;
		hi = (hi + Math.imul(ah4, bh4)) | 0;
		lo = (lo + Math.imul(al3, bl5)) | 0;
		mid = (mid + Math.imul(al3, bh5)) | 0;
		mid = (mid + Math.imul(ah3, bl5)) | 0;
		hi = (hi + Math.imul(ah3, bh5)) | 0;
		lo = (lo + Math.imul(al2, bl6)) | 0;
		mid = (mid + Math.imul(al2, bh6)) | 0;
		mid = (mid + Math.imul(ah2, bl6)) | 0;
		hi = (hi + Math.imul(ah2, bh6)) | 0;
		lo = (lo + Math.imul(al1, bl7)) | 0;
		mid = (mid + Math.imul(al1, bh7)) | 0;
		mid = (mid + Math.imul(ah1, bl7)) | 0;
		hi = (hi + Math.imul(ah1, bh7)) | 0;
		lo = (lo + Math.imul(al0, bl8)) | 0;
		mid = (mid + Math.imul(al0, bh8)) | 0;
		mid = (mid + Math.imul(ah0, bl8)) | 0;
		hi = (hi + Math.imul(ah0, bh8)) | 0;
		var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
		w8 &= 0x3ffffff;
		/* k = 9 */
		lo = Math.imul(al9, bl0);
		mid = Math.imul(al9, bh0);
		mid = (mid + Math.imul(ah9, bl0)) | 0;
		hi = Math.imul(ah9, bh0);
		lo = (lo + Math.imul(al8, bl1)) | 0;
		mid = (mid + Math.imul(al8, bh1)) | 0;
		mid = (mid + Math.imul(ah8, bl1)) | 0;
		hi = (hi + Math.imul(ah8, bh1)) | 0;
		lo = (lo + Math.imul(al7, bl2)) | 0;
		mid = (mid + Math.imul(al7, bh2)) | 0;
		mid = (mid + Math.imul(ah7, bl2)) | 0;
		hi = (hi + Math.imul(ah7, bh2)) | 0;
		lo = (lo + Math.imul(al6, bl3)) | 0;
		mid = (mid + Math.imul(al6, bh3)) | 0;
		mid = (mid + Math.imul(ah6, bl3)) | 0;
		hi = (hi + Math.imul(ah6, bh3)) | 0;
		lo = (lo + Math.imul(al5, bl4)) | 0;
		mid = (mid + Math.imul(al5, bh4)) | 0;
		mid = (mid + Math.imul(ah5, bl4)) | 0;
		hi = (hi + Math.imul(ah5, bh4)) | 0;
		lo = (lo + Math.imul(al4, bl5)) | 0;
		mid = (mid + Math.imul(al4, bh5)) | 0;
		mid = (mid + Math.imul(ah4, bl5)) | 0;
		hi = (hi + Math.imul(ah4, bh5)) | 0;
		lo = (lo + Math.imul(al3, bl6)) | 0;
		mid = (mid + Math.imul(al3, bh6)) | 0;
		mid = (mid + Math.imul(ah3, bl6)) | 0;
		hi = (hi + Math.imul(ah3, bh6)) | 0;
		lo = (lo + Math.imul(al2, bl7)) | 0;
		mid = (mid + Math.imul(al2, bh7)) | 0;
		mid = (mid + Math.imul(ah2, bl7)) | 0;
		hi = (hi + Math.imul(ah2, bh7)) | 0;
		lo = (lo + Math.imul(al1, bl8)) | 0;
		mid = (mid + Math.imul(al1, bh8)) | 0;
		mid = (mid + Math.imul(ah1, bl8)) | 0;
		hi = (hi + Math.imul(ah1, bh8)) | 0;
		lo = (lo + Math.imul(al0, bl9)) | 0;
		mid = (mid + Math.imul(al0, bh9)) | 0;
		mid = (mid + Math.imul(ah0, bl9)) | 0;
		hi = (hi + Math.imul(ah0, bh9)) | 0;
		var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
		w9 &= 0x3ffffff;
		/* k = 10 */
		lo = Math.imul(al9, bl1);
		mid = Math.imul(al9, bh1);
		mid = (mid + Math.imul(ah9, bl1)) | 0;
		hi = Math.imul(ah9, bh1);
		lo = (lo + Math.imul(al8, bl2)) | 0;
		mid = (mid + Math.imul(al8, bh2)) | 0;
		mid = (mid + Math.imul(ah8, bl2)) | 0;
		hi = (hi + Math.imul(ah8, bh2)) | 0;
		lo = (lo + Math.imul(al7, bl3)) | 0;
		mid = (mid + Math.imul(al7, bh3)) | 0;
		mid = (mid + Math.imul(ah7, bl3)) | 0;
		hi = (hi + Math.imul(ah7, bh3)) | 0;
		lo = (lo + Math.imul(al6, bl4)) | 0;
		mid = (mid + Math.imul(al6, bh4)) | 0;
		mid = (mid + Math.imul(ah6, bl4)) | 0;
		hi = (hi + Math.imul(ah6, bh4)) | 0;
		lo = (lo + Math.imul(al5, bl5)) | 0;
		mid = (mid + Math.imul(al5, bh5)) | 0;
		mid = (mid + Math.imul(ah5, bl5)) | 0;
		hi = (hi + Math.imul(ah5, bh5)) | 0;
		lo = (lo + Math.imul(al4, bl6)) | 0;
		mid = (mid + Math.imul(al4, bh6)) | 0;
		mid = (mid + Math.imul(ah4, bl6)) | 0;
		hi = (hi + Math.imul(ah4, bh6)) | 0;
		lo = (lo + Math.imul(al3, bl7)) | 0;
		mid = (mid + Math.imul(al3, bh7)) | 0;
		mid = (mid + Math.imul(ah3, bl7)) | 0;
		hi = (hi + Math.imul(ah3, bh7)) | 0;
		lo = (lo + Math.imul(al2, bl8)) | 0;
		mid = (mid + Math.imul(al2, bh8)) | 0;
		mid = (mid + Math.imul(ah2, bl8)) | 0;
		hi = (hi + Math.imul(ah2, bh8)) | 0;
		lo = (lo + Math.imul(al1, bl9)) | 0;
		mid = (mid + Math.imul(al1, bh9)) | 0;
		mid = (mid + Math.imul(ah1, bl9)) | 0;
		hi = (hi + Math.imul(ah1, bh9)) | 0;
		var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
		w10 &= 0x3ffffff;
		/* k = 11 */
		lo = Math.imul(al9, bl2);
		mid = Math.imul(al9, bh2);
		mid = (mid + Math.imul(ah9, bl2)) | 0;
		hi = Math.imul(ah9, bh2);
		lo = (lo + Math.imul(al8, bl3)) | 0;
		mid = (mid + Math.imul(al8, bh3)) | 0;
		mid = (mid + Math.imul(ah8, bl3)) | 0;
		hi = (hi + Math.imul(ah8, bh3)) | 0;
		lo = (lo + Math.imul(al7, bl4)) | 0;
		mid = (mid + Math.imul(al7, bh4)) | 0;
		mid = (mid + Math.imul(ah7, bl4)) | 0;
		hi = (hi + Math.imul(ah7, bh4)) | 0;
		lo = (lo + Math.imul(al6, bl5)) | 0;
		mid = (mid + Math.imul(al6, bh5)) | 0;
		mid = (mid + Math.imul(ah6, bl5)) | 0;
		hi = (hi + Math.imul(ah6, bh5)) | 0;
		lo = (lo + Math.imul(al5, bl6)) | 0;
		mid = (mid + Math.imul(al5, bh6)) | 0;
		mid = (mid + Math.imul(ah5, bl6)) | 0;
		hi = (hi + Math.imul(ah5, bh6)) | 0;
		lo = (lo + Math.imul(al4, bl7)) | 0;
		mid = (mid + Math.imul(al4, bh7)) | 0;
		mid = (mid + Math.imul(ah4, bl7)) | 0;
		hi = (hi + Math.imul(ah4, bh7)) | 0;
		lo = (lo + Math.imul(al3, bl8)) | 0;
		mid = (mid + Math.imul(al3, bh8)) | 0;
		mid = (mid + Math.imul(ah3, bl8)) | 0;
		hi = (hi + Math.imul(ah3, bh8)) | 0;
		lo = (lo + Math.imul(al2, bl9)) | 0;
		mid = (mid + Math.imul(al2, bh9)) | 0;
		mid = (mid + Math.imul(ah2, bl9)) | 0;
		hi = (hi + Math.imul(ah2, bh9)) | 0;
		var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
		w11 &= 0x3ffffff;
		/* k = 12 */
		lo = Math.imul(al9, bl3);
		mid = Math.imul(al9, bh3);
		mid = (mid + Math.imul(ah9, bl3)) | 0;
		hi = Math.imul(ah9, bh3);
		lo = (lo + Math.imul(al8, bl4)) | 0;
		mid = (mid + Math.imul(al8, bh4)) | 0;
		mid = (mid + Math.imul(ah8, bl4)) | 0;
		hi = (hi + Math.imul(ah8, bh4)) | 0;
		lo = (lo + Math.imul(al7, bl5)) | 0;
		mid = (mid + Math.imul(al7, bh5)) | 0;
		mid = (mid + Math.imul(ah7, bl5)) | 0;
		hi = (hi + Math.imul(ah7, bh5)) | 0;
		lo = (lo + Math.imul(al6, bl6)) | 0;
		mid = (mid + Math.imul(al6, bh6)) | 0;
		mid = (mid + Math.imul(ah6, bl6)) | 0;
		hi = (hi + Math.imul(ah6, bh6)) | 0;
		lo = (lo + Math.imul(al5, bl7)) | 0;
		mid = (mid + Math.imul(al5, bh7)) | 0;
		mid = (mid + Math.imul(ah5, bl7)) | 0;
		hi = (hi + Math.imul(ah5, bh7)) | 0;
		lo = (lo + Math.imul(al4, bl8)) | 0;
		mid = (mid + Math.imul(al4, bh8)) | 0;
		mid = (mid + Math.imul(ah4, bl8)) | 0;
		hi = (hi + Math.imul(ah4, bh8)) | 0;
		lo = (lo + Math.imul(al3, bl9)) | 0;
		mid = (mid + Math.imul(al3, bh9)) | 0;
		mid = (mid + Math.imul(ah3, bl9)) | 0;
		hi = (hi + Math.imul(ah3, bh9)) | 0;
		var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
		w12 &= 0x3ffffff;
		/* k = 13 */
		lo = Math.imul(al9, bl4);
		mid = Math.imul(al9, bh4);
		mid = (mid + Math.imul(ah9, bl4)) | 0;
		hi = Math.imul(ah9, bh4);
		lo = (lo + Math.imul(al8, bl5)) | 0;
		mid = (mid + Math.imul(al8, bh5)) | 0;
		mid = (mid + Math.imul(ah8, bl5)) | 0;
		hi = (hi + Math.imul(ah8, bh5)) | 0;
		lo = (lo + Math.imul(al7, bl6)) | 0;
		mid = (mid + Math.imul(al7, bh6)) | 0;
		mid = (mid + Math.imul(ah7, bl6)) | 0;
		hi = (hi + Math.imul(ah7, bh6)) | 0;
		lo = (lo + Math.imul(al6, bl7)) | 0;
		mid = (mid + Math.imul(al6, bh7)) | 0;
		mid = (mid + Math.imul(ah6, bl7)) | 0;
		hi = (hi + Math.imul(ah6, bh7)) | 0;
		lo = (lo + Math.imul(al5, bl8)) | 0;
		mid = (mid + Math.imul(al5, bh8)) | 0;
		mid = (mid + Math.imul(ah5, bl8)) | 0;
		hi = (hi + Math.imul(ah5, bh8)) | 0;
		lo = (lo + Math.imul(al4, bl9)) | 0;
		mid = (mid + Math.imul(al4, bh9)) | 0;
		mid = (mid + Math.imul(ah4, bl9)) | 0;
		hi = (hi + Math.imul(ah4, bh9)) | 0;
		var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
		w13 &= 0x3ffffff;
		/* k = 14 */
		lo = Math.imul(al9, bl5);
		mid = Math.imul(al9, bh5);
		mid = (mid + Math.imul(ah9, bl5)) | 0;
		hi = Math.imul(ah9, bh5);
		lo = (lo + Math.imul(al8, bl6)) | 0;
		mid = (mid + Math.imul(al8, bh6)) | 0;
		mid = (mid + Math.imul(ah8, bl6)) | 0;
		hi = (hi + Math.imul(ah8, bh6)) | 0;
		lo = (lo + Math.imul(al7, bl7)) | 0;
		mid = (mid + Math.imul(al7, bh7)) | 0;
		mid = (mid + Math.imul(ah7, bl7)) | 0;
		hi = (hi + Math.imul(ah7, bh7)) | 0;
		lo = (lo + Math.imul(al6, bl8)) | 0;
		mid = (mid + Math.imul(al6, bh8)) | 0;
		mid = (mid + Math.imul(ah6, bl8)) | 0;
		hi = (hi + Math.imul(ah6, bh8)) | 0;
		lo = (lo + Math.imul(al5, bl9)) | 0;
		mid = (mid + Math.imul(al5, bh9)) | 0;
		mid = (mid + Math.imul(ah5, bl9)) | 0;
		hi = (hi + Math.imul(ah5, bh9)) | 0;
		var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
		w14 &= 0x3ffffff;
		/* k = 15 */
		lo = Math.imul(al9, bl6);
		mid = Math.imul(al9, bh6);
		mid = (mid + Math.imul(ah9, bl6)) | 0;
		hi = Math.imul(ah9, bh6);
		lo = (lo + Math.imul(al8, bl7)) | 0;
		mid = (mid + Math.imul(al8, bh7)) | 0;
		mid = (mid + Math.imul(ah8, bl7)) | 0;
		hi = (hi + Math.imul(ah8, bh7)) | 0;
		lo = (lo + Math.imul(al7, bl8)) | 0;
		mid = (mid + Math.imul(al7, bh8)) | 0;
		mid = (mid + Math.imul(ah7, bl8)) | 0;
		hi = (hi + Math.imul(ah7, bh8)) | 0;
		lo = (lo + Math.imul(al6, bl9)) | 0;
		mid = (mid + Math.imul(al6, bh9)) | 0;
		mid = (mid + Math.imul(ah6, bl9)) | 0;
		hi = (hi + Math.imul(ah6, bh9)) | 0;
		var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
		w15 &= 0x3ffffff;
		/* k = 16 */
		lo = Math.imul(al9, bl7);
		mid = Math.imul(al9, bh7);
		mid = (mid + Math.imul(ah9, bl7)) | 0;
		hi = Math.imul(ah9, bh7);
		lo = (lo + Math.imul(al8, bl8)) | 0;
		mid = (mid + Math.imul(al8, bh8)) | 0;
		mid = (mid + Math.imul(ah8, bl8)) | 0;
		hi = (hi + Math.imul(ah8, bh8)) | 0;
		lo = (lo + Math.imul(al7, bl9)) | 0;
		mid = (mid + Math.imul(al7, bh9)) | 0;
		mid = (mid + Math.imul(ah7, bl9)) | 0;
		hi = (hi + Math.imul(ah7, bh9)) | 0;
		var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
		w16 &= 0x3ffffff;
		/* k = 17 */
		lo = Math.imul(al9, bl8);
		mid = Math.imul(al9, bh8);
		mid = (mid + Math.imul(ah9, bl8)) | 0;
		hi = Math.imul(ah9, bh8);
		lo = (lo + Math.imul(al8, bl9)) | 0;
		mid = (mid + Math.imul(al8, bh9)) | 0;
		mid = (mid + Math.imul(ah8, bl9)) | 0;
		hi = (hi + Math.imul(ah8, bh9)) | 0;
		var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
		w17 &= 0x3ffffff;
		/* k = 18 */
		lo = Math.imul(al9, bl9);
		mid = Math.imul(al9, bh9);
		mid = (mid + Math.imul(ah9, bl9)) | 0;
		hi = Math.imul(ah9, bh9);
		var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
		w18 &= 0x3ffffff;
		o[0] = w0;
		o[1] = w1;
		o[2] = w2;
		o[3] = w3;
		o[4] = w4;
		o[5] = w5;
		o[6] = w6;
		o[7] = w7;
		o[8] = w8;
		o[9] = w9;
		o[10] = w10;
		o[11] = w11;
		o[12] = w12;
		o[13] = w13;
		o[14] = w14;
		o[15] = w15;
		o[16] = w16;
		o[17] = w17;
		o[18] = w18;
		if (c !== 0) {
		  o[19] = c;
		  out.length++;
		}
		return out;
	  };
	
	  // Polyfill comb
	  if (!Math.imul) {
		comb10MulTo = smallMulTo;
	  }
	
	  function bigMulTo (self, num, out) {
		out.negative = num.negative ^ self.negative;
		out.length = self.length + num.length;
	
		var carry = 0;
		var hncarry = 0;
		for (var k = 0; k < out.length - 1; k++) {
		  // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		  // note that ncarry could be >= 0x3ffffff
		  var ncarry = hncarry;
		  hncarry = 0;
		  var rword = carry & 0x3ffffff;
		  var maxJ = Math.min(k, num.length - 1);
		  for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
			var i = k - j;
			var a = self.words[i] | 0;
			var b = num.words[j] | 0;
			var r = a * b;
	
			var lo = r & 0x3ffffff;
			ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
			lo = (lo + rword) | 0;
			rword = lo & 0x3ffffff;
			ncarry = (ncarry + (lo >>> 26)) | 0;
	
			hncarry += ncarry >>> 26;
			ncarry &= 0x3ffffff;
		  }
		  out.words[k] = rword;
		  carry = ncarry;
		  ncarry = hncarry;
		}
		if (carry !== 0) {
		  out.words[k] = carry;
		} else {
		  out.length--;
		}
	
		return out._strip();
	  }
	
	  function jumboMulTo (self, num, out) {
		// Temporary disable, see https://github.com/indutny/bn.js/issues/211
		// var fftm = new FFTM();
		// return fftm.mulp(self, num, out);
		return bigMulTo(self, num, out);
	  }
	
	  BN.prototype.mulTo = function mulTo (num, out) {
		var res;
		var len = this.length + num.length;
		if (this.length === 10 && num.length === 10) {
		  res = comb10MulTo(this, num, out);
		} else if (len < 63) {
		  res = smallMulTo(this, num, out);
		} else if (len < 1024) {
		  res = bigMulTo(this, num, out);
		} else {
		  res = jumboMulTo(this, num, out);
		}
	
		return res;
	  };
	
	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion
	
	  function FFTM (x, y) {
		this.x = x;
		this.y = y;
	  }
	
	  FFTM.prototype.makeRBT = function makeRBT (N) {
		var t = new Array(N);
		var l = BN.prototype._countBits(N) - 1;
		for (var i = 0; i < N; i++) {
		  t[i] = this.revBin(i, l, N);
		}
	
		return t;
	  };
	
	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
		if (x === 0 || x === N - 1) return x;
	
		var rb = 0;
		for (var i = 0; i < l; i++) {
		  rb |= (x & 1) << (l - i - 1);
		  x >>= 1;
		}
	
		return rb;
	  };
	
	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
		for (var i = 0; i < N; i++) {
		  rtws[i] = rws[rbt[i]];
		  itws[i] = iws[rbt[i]];
		}
	  };
	
	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
		this.permute(rbt, rws, iws, rtws, itws, N);
	
		for (var s = 1; s < N; s <<= 1) {
		  var l = s << 1;
	
		  var rtwdf = Math.cos(2 * Math.PI / l);
		  var itwdf = Math.sin(2 * Math.PI / l);
	
		  for (var p = 0; p < N; p += l) {
			var rtwdf_ = rtwdf;
			var itwdf_ = itwdf;
	
			for (var j = 0; j < s; j++) {
			  var re = rtws[p + j];
			  var ie = itws[p + j];
	
			  var ro = rtws[p + j + s];
			  var io = itws[p + j + s];
	
			  var rx = rtwdf_ * ro - itwdf_ * io;
	
			  io = rtwdf_ * io + itwdf_ * ro;
			  ro = rx;
	
			  rtws[p + j] = re + ro;
			  itws[p + j] = ie + io;
	
			  rtws[p + j + s] = re - ro;
			  itws[p + j + s] = ie - io;
	
			  /* jshint maxdepth : false */
			  if (j !== l) {
				rx = rtwdf * rtwdf_ - itwdf * itwdf_;
	
				itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
				rtwdf_ = rx;
			  }
			}
		  }
		}
	  };
	
	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
		var N = Math.max(m, n) | 1;
		var odd = N & 1;
		var i = 0;
		for (N = N / 2 | 0; N; N = N >>> 1) {
		  i++;
		}
	
		return 1 << i + 1 + odd;
	  };
	
	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
		if (N <= 1) return;
	
		for (var i = 0; i < N / 2; i++) {
		  var t = rws[i];
	
		  rws[i] = rws[N - i - 1];
		  rws[N - i - 1] = t;
	
		  t = iws[i];
	
		  iws[i] = -iws[N - i - 1];
		  iws[N - i - 1] = -t;
		}
	  };
	
	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
		var carry = 0;
		for (var i = 0; i < N / 2; i++) {
		  var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
			Math.round(ws[2 * i] / N) +
			carry;
	
		  ws[i] = w & 0x3ffffff;
	
		  if (w < 0x4000000) {
			carry = 0;
		  } else {
			carry = w / 0x4000000 | 0;
		  }
		}
	
		return ws;
	  };
	
	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
		var carry = 0;
		for (var i = 0; i < len; i++) {
		  carry = carry + (ws[i] | 0);
	
		  rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
		  rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
		}
	
		// Pad with zeroes
		for (i = 2 * len; i < N; ++i) {
		  rws[i] = 0;
		}
	
		assert(carry === 0);
		assert((carry & ~0x1fff) === 0);
	  };
	
	  FFTM.prototype.stub = function stub (N) {
		var ph = new Array(N);
		for (var i = 0; i < N; i++) {
		  ph[i] = 0;
		}
	
		return ph;
	  };
	
	  FFTM.prototype.mulp = function mulp (x, y, out) {
		var N = 2 * this.guessLen13b(x.length, y.length);
	
		var rbt = this.makeRBT(N);
	
		var _ = this.stub(N);
	
		var rws = new Array(N);
		var rwst = new Array(N);
		var iwst = new Array(N);
	
		var nrws = new Array(N);
		var nrwst = new Array(N);
		var niwst = new Array(N);
	
		var rmws = out.words;
		rmws.length = N;
	
		this.convert13b(x.words, x.length, rws, N);
		this.convert13b(y.words, y.length, nrws, N);
	
		this.transform(rws, _, rwst, iwst, N, rbt);
		this.transform(nrws, _, nrwst, niwst, N, rbt);
	
		for (var i = 0; i < N; i++) {
		  var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
		  iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
		  rwst[i] = rx;
		}
	
		this.conjugate(rwst, iwst, N);
		this.transform(rwst, iwst, rmws, _, N, rbt);
		this.conjugate(rmws, _, N);
		this.normalize13b(rmws, N);
	
		out.negative = x.negative ^ y.negative;
		out.length = x.length + y.length;
		return out._strip();
	  };
	
	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
		var out = new BN(null);
		out.words = new Array(this.length + num.length);
		return this.mulTo(num, out);
	  };
	
	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
		var out = new BN(null);
		out.words = new Array(this.length + num.length);
		return jumboMulTo(this, num, out);
	  };
	
	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
		return this.clone().mulTo(num, this);
	  };
	
	  BN.prototype.imuln = function imuln (num) {
		var isNegNum = num < 0;
		if (isNegNum) num = -num;
	
		assert(typeof num === 'number');
		assert(num < 0x4000000);
	
		// Carry
		var carry = 0;
		for (var i = 0; i < this.length; i++) {
		  var w = (this.words[i] | 0) * num;
		  var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		  carry >>= 26;
		  carry += (w / 0x4000000) | 0;
		  // NOTE: lo is 27bit maximum
		  carry += lo >>> 26;
		  this.words[i] = lo & 0x3ffffff;
		}
	
		if (carry !== 0) {
		  this.words[i] = carry;
		  this.length++;
		}
	
		return isNegNum ? this.ineg() : this;
	  };
	
	  BN.prototype.muln = function muln (num) {
		return this.clone().imuln(num);
	  };
	
	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
		return this.mul(this);
	  };
	
	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
		return this.imul(this.clone());
	  };
	
	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
		var w = toBitArray(num);
		if (w.length === 0) return new BN(1);
	
		// Skip leading zeroes
		var res = this;
		for (var i = 0; i < w.length; i++, res = res.sqr()) {
		  if (w[i] !== 0) break;
		}
	
		if (++i < w.length) {
		  for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
			if (w[i] === 0) continue;
	
			res = res.mul(q);
		  }
		}
	
		return res;
	  };
	
	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
		assert(typeof bits === 'number' && bits >= 0);
		var r = bits % 26;
		var s = (bits - r) / 26;
		var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
		var i;
	
		if (r !== 0) {
		  var carry = 0;
	
		  for (i = 0; i < this.length; i++) {
			var newCarry = this.words[i] & carryMask;
			var c = ((this.words[i] | 0) - newCarry) << r;
			this.words[i] = c | carry;
			carry = newCarry >>> (26 - r);
		  }
	
		  if (carry) {
			this.words[i] = carry;
			this.length++;
		  }
		}
	
		if (s !== 0) {
		  for (i = this.length - 1; i >= 0; i--) {
			this.words[i + s] = this.words[i];
		  }
	
		  for (i = 0; i < s; i++) {
			this.words[i] = 0;
		  }
	
		  this.length += s;
		}
	
		return this._strip();
	  };
	
	  BN.prototype.ishln = function ishln (bits) {
		// TODO(indutny): implement me
		assert(this.negative === 0);
		return this.iushln(bits);
	  };
	
	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
		assert(typeof bits === 'number' && bits >= 0);
		var h;
		if (hint) {
		  h = (hint - (hint % 26)) / 26;
		} else {
		  h = 0;
		}
	
		var r = bits % 26;
		var s = Math.min((bits - r) / 26, this.length);
		var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		var maskedWords = extended;
	
		h -= s;
		h = Math.max(0, h);
	
		// Extended mode, copy masked part
		if (maskedWords) {
		  for (var i = 0; i < s; i++) {
			maskedWords.words[i] = this.words[i];
		  }
		  maskedWords.length = s;
		}
	
		if (s === 0) {
		  // No-op, we should not move anything at all
		} else if (this.length > s) {
		  this.length -= s;
		  for (i = 0; i < this.length; i++) {
			this.words[i] = this.words[i + s];
		  }
		} else {
		  this.words[0] = 0;
		  this.length = 1;
		}
	
		var carry = 0;
		for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		  var word = this.words[i] | 0;
		  this.words[i] = (carry << (26 - r)) | (word >>> r);
		  carry = word & mask;
		}
	
		// Push carried bits as a mask
		if (maskedWords && carry !== 0) {
		  maskedWords.words[maskedWords.length++] = carry;
		}
	
		if (this.length === 0) {
		  this.words[0] = 0;
		  this.length = 1;
		}
	
		return this._strip();
	  };
	
	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
		// TODO(indutny): implement me
		assert(this.negative === 0);
		return this.iushrn(bits, hint, extended);
	  };
	
	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
		return this.clone().ishln(bits);
	  };
	
	  BN.prototype.ushln = function ushln (bits) {
		return this.clone().iushln(bits);
	  };
	
	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
		return this.clone().ishrn(bits);
	  };
	
	  BN.prototype.ushrn = function ushrn (bits) {
		return this.clone().iushrn(bits);
	  };
	
	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
		assert(typeof bit === 'number' && bit >= 0);
		var r = bit % 26;
		var s = (bit - r) / 26;
		var q = 1 << r;
	
		// Fast case: bit is much higher than all existing words
		if (this.length <= s) return false;
	
		// Check bit and return
		var w = this.words[s];
	
		return !!(w & q);
	  };
	
	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
		assert(typeof bits === 'number' && bits >= 0);
		var r = bits % 26;
		var s = (bits - r) / 26;
	
		assert(this.negative === 0, 'imaskn works only with positive numbers');
	
		if (this.length <= s) {
		  return this;
		}
	
		if (r !== 0) {
		  s++;
		}
		this.length = Math.min(s, this.length);
	
		if (r !== 0) {
		  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		  this.words[this.length - 1] &= mask;
		}
	
		return this._strip();
	  };
	
	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
		return this.clone().imaskn(bits);
	  };
	
	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
		assert(typeof num === 'number');
		assert(num < 0x4000000);
		if (num < 0) return this.isubn(-num);
	
		// Possible sign change
		if (this.negative !== 0) {
		  if (this.length === 1 && (this.words[0] | 0) <= num) {
			this.words[0] = num - (this.words[0] | 0);
			this.negative = 0;
			return this;
		  }
	
		  this.negative = 0;
		  this.isubn(num);
		  this.negative = 1;
		  return this;
		}
	
		// Add without checks
		return this._iaddn(num);
	  };
	
	  BN.prototype._iaddn = function _iaddn (num) {
		this.words[0] += num;
	
		// Carry
		for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		  this.words[i] -= 0x4000000;
		  if (i === this.length - 1) {
			this.words[i + 1] = 1;
		  } else {
			this.words[i + 1]++;
		  }
		}
		this.length = Math.max(this.length, i + 1);
	
		return this;
	  };
	
	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
		assert(typeof num === 'number');
		assert(num < 0x4000000);
		if (num < 0) return this.iaddn(-num);
	
		if (this.negative !== 0) {
		  this.negative = 0;
		  this.iaddn(num);
		  this.negative = 1;
		  return this;
		}
	
		this.words[0] -= num;
	
		if (this.length === 1 && this.words[0] < 0) {
		  this.words[0] = -this.words[0];
		  this.negative = 1;
		} else {
		  // Carry
		  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
			this.words[i] += 0x4000000;
			this.words[i + 1] -= 1;
		  }
		}
	
		return this._strip();
	  };
	
	  BN.prototype.addn = function addn (num) {
		return this.clone().iaddn(num);
	  };
	
	  BN.prototype.subn = function subn (num) {
		return this.clone().isubn(num);
	  };
	
	  BN.prototype.iabs = function iabs () {
		this.negative = 0;
	
		return this;
	  };
	
	  BN.prototype.abs = function abs () {
		return this.clone().iabs();
	  };
	
	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
		var len = num.length + shift;
		var i;
	
		this._expand(len);
	
		var w;
		var carry = 0;
		for (i = 0; i < num.length; i++) {
		  w = (this.words[i + shift] | 0) + carry;
		  var right = (num.words[i] | 0) * mul;
		  w -= right & 0x3ffffff;
		  carry = (w >> 26) - ((right / 0x4000000) | 0);
		  this.words[i + shift] = w & 0x3ffffff;
		}
		for (; i < this.length - shift; i++) {
		  w = (this.words[i + shift] | 0) + carry;
		  carry = w >> 26;
		  this.words[i + shift] = w & 0x3ffffff;
		}
	
		if (carry === 0) return this._strip();
	
		// Subtraction overflow
		assert(carry === -1);
		carry = 0;
		for (i = 0; i < this.length; i++) {
		  w = -(this.words[i] | 0) + carry;
		  carry = w >> 26;
		  this.words[i] = w & 0x3ffffff;
		}
		this.negative = 1;
	
		return this._strip();
	  };
	
	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
		var shift = this.length - num.length;
	
		var a = this.clone();
		var b = num;
	
		// Normalize
		var bhi = b.words[b.length - 1] | 0;
		var bhiBits = this._countBits(bhi);
		shift = 26 - bhiBits;
		if (shift !== 0) {
		  b = b.ushln(shift);
		  a.iushln(shift);
		  bhi = b.words[b.length - 1] | 0;
		}
	
		// Initialize quotient
		var m = a.length - b.length;
		var q;
	
		if (mode !== 'mod') {
		  q = new BN(null);
		  q.length = m + 1;
		  q.words = new Array(q.length);
		  for (var i = 0; i < q.length; i++) {
			q.words[i] = 0;
		  }
		}
	
		var diff = a.clone()._ishlnsubmul(b, 1, m);
		if (diff.negative === 0) {
		  a = diff;
		  if (q) {
			q.words[m] = 1;
		  }
		}
	
		for (var j = m - 1; j >= 0; j--) {
		  var qj = (a.words[b.length + j] | 0) * 0x4000000 +
			(a.words[b.length + j - 1] | 0);
	
		  // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		  // (0x7ffffff)
		  qj = Math.min((qj / bhi) | 0, 0x3ffffff);
	
		  a._ishlnsubmul(b, qj, j);
		  while (a.negative !== 0) {
			qj--;
			a.negative = 0;
			a._ishlnsubmul(b, 1, j);
			if (!a.isZero()) {
			  a.negative ^= 1;
			}
		  }
		  if (q) {
			q.words[j] = qj;
		  }
		}
		if (q) {
		  q._strip();
		}
		a._strip();
	
		// Denormalize
		if (mode !== 'div' && shift !== 0) {
		  a.iushrn(shift);
		}
	
		return {
		  div: q || null,
		  mod: a
		};
	  };
	
	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
		assert(!num.isZero());
	
		if (this.isZero()) {
		  return {
			div: new BN(0),
			mod: new BN(0)
		  };
		}
	
		var div, mod, res;
		if (this.negative !== 0 && num.negative === 0) {
		  res = this.neg().divmod(num, mode);
	
		  if (mode !== 'mod') {
			div = res.div.neg();
		  }
	
		  if (mode !== 'div') {
			mod = res.mod.neg();
			if (positive && mod.negative !== 0) {
			  mod.iadd(num);
			}
		  }
	
		  return {
			div: div,
			mod: mod
		  };
		}
	
		if (this.negative === 0 && num.negative !== 0) {
		  res = this.divmod(num.neg(), mode);
	
		  if (mode !== 'mod') {
			div = res.div.neg();
		  }
	
		  return {
			div: div,
			mod: res.mod
		  };
		}
	
		if ((this.negative & num.negative) !== 0) {
		  res = this.neg().divmod(num.neg(), mode);
	
		  if (mode !== 'div') {
			mod = res.mod.neg();
			if (positive && mod.negative !== 0) {
			  mod.isub(num);
			}
		  }
	
		  return {
			div: res.div,
			mod: mod
		  };
		}
	
		// Both numbers are positive at this point
	
		// Strip both numbers to approximate shift value
		if (num.length > this.length || this.cmp(num) < 0) {
		  return {
			div: new BN(0),
			mod: this
		  };
		}
	
		// Very short reduction
		if (num.length === 1) {
		  if (mode === 'div') {
			return {
			  div: this.divn(num.words[0]),
			  mod: null
			};
		  }
	
		  if (mode === 'mod') {
			return {
			  div: null,
			  mod: new BN(this.modrn(num.words[0]))
			};
		  }
	
		  return {
			div: this.divn(num.words[0]),
			mod: new BN(this.modrn(num.words[0]))
		  };
		}
	
		return this._wordDiv(num, mode);
	  };
	
	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
		return this.divmod(num, 'div', false).div;
	  };
	
	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
		return this.divmod(num, 'mod', false).mod;
	  };
	
	  BN.prototype.umod = function umod (num) {
		return this.divmod(num, 'mod', true).mod;
	  };
	
	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
		var dm = this.divmod(num);
	
		// Fast case - exact division
		if (dm.mod.isZero()) return dm.div;
	
		var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
	
		var half = num.ushrn(1);
		var r2 = num.andln(1);
		var cmp = mod.cmp(half);
	
		// Round down
		if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;
	
		// Round up
		return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };
	
	  BN.prototype.modrn = function modrn (num) {
		var isNegNum = num < 0;
		if (isNegNum) num = -num;
	
		assert(num <= 0x3ffffff);
		var p = (1 << 26) % num;
	
		var acc = 0;
		for (var i = this.length - 1; i >= 0; i--) {
		  acc = (p * acc + (this.words[i] | 0)) % num;
		}
	
		return isNegNum ? -acc : acc;
	  };
	
	  // WARNING: DEPRECATED
	  BN.prototype.modn = function modn (num) {
		return this.modrn(num);
	  };
	
	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
		var isNegNum = num < 0;
		if (isNegNum) num = -num;
	
		assert(num <= 0x3ffffff);
	
		var carry = 0;
		for (var i = this.length - 1; i >= 0; i--) {
		  var w = (this.words[i] | 0) + carry * 0x4000000;
		  this.words[i] = (w / num) | 0;
		  carry = w % num;
		}
	
		this._strip();
		return isNegNum ? this.ineg() : this;
	  };
	
	  BN.prototype.divn = function divn (num) {
		return this.clone().idivn(num);
	  };
	
	  BN.prototype.egcd = function egcd (p) {
		assert(p.negative === 0);
		assert(!p.isZero());
	
		var x = this;
		var y = p.clone();
	
		if (x.negative !== 0) {
		  x = x.umod(p);
		} else {
		  x = x.clone();
		}
	
		// A * x + B * y = x
		var A = new BN(1);
		var B = new BN(0);
	
		// C * x + D * y = y
		var C = new BN(0);
		var D = new BN(1);
	
		var g = 0;
	
		while (x.isEven() && y.isEven()) {
		  x.iushrn(1);
		  y.iushrn(1);
		  ++g;
		}
	
		var yp = y.clone();
		var xp = x.clone();
	
		while (!x.isZero()) {
		  for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		  if (i > 0) {
			x.iushrn(i);
			while (i-- > 0) {
			  if (A.isOdd() || B.isOdd()) {
				A.iadd(yp);
				B.isub(xp);
			  }
	
			  A.iushrn(1);
			  B.iushrn(1);
			}
		  }
	
		  for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		  if (j > 0) {
			y.iushrn(j);
			while (j-- > 0) {
			  if (C.isOdd() || D.isOdd()) {
				C.iadd(yp);
				D.isub(xp);
			  }
	
			  C.iushrn(1);
			  D.iushrn(1);
			}
		  }
	
		  if (x.cmp(y) >= 0) {
			x.isub(y);
			A.isub(C);
			B.isub(D);
		  } else {
			y.isub(x);
			C.isub(A);
			D.isub(B);
		  }
		}
	
		return {
		  a: C,
		  b: D,
		  gcd: y.iushln(g)
		};
	  };
	
	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
		assert(p.negative === 0);
		assert(!p.isZero());
	
		var a = this;
		var b = p.clone();
	
		if (a.negative !== 0) {
		  a = a.umod(p);
		} else {
		  a = a.clone();
		}
	
		var x1 = new BN(1);
		var x2 = new BN(0);
	
		var delta = b.clone();
	
		while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		  for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		  if (i > 0) {
			a.iushrn(i);
			while (i-- > 0) {
			  if (x1.isOdd()) {
				x1.iadd(delta);
			  }
	
			  x1.iushrn(1);
			}
		  }
	
		  for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		  if (j > 0) {
			b.iushrn(j);
			while (j-- > 0) {
			  if (x2.isOdd()) {
				x2.iadd(delta);
			  }
	
			  x2.iushrn(1);
			}
		  }
	
		  if (a.cmp(b) >= 0) {
			a.isub(b);
			x1.isub(x2);
		  } else {
			b.isub(a);
			x2.isub(x1);
		  }
		}
	
		var res;
		if (a.cmpn(1) === 0) {
		  res = x1;
		} else {
		  res = x2;
		}
	
		if (res.cmpn(0) < 0) {
		  res.iadd(p);
		}
	
		return res;
	  };
	
	  BN.prototype.gcd = function gcd (num) {
		if (this.isZero()) return num.abs();
		if (num.isZero()) return this.abs();
	
		var a = this.clone();
		var b = num.clone();
		a.negative = 0;
		b.negative = 0;
	
		// Remove common factor of two
		for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		  a.iushrn(1);
		  b.iushrn(1);
		}
	
		do {
		  while (a.isEven()) {
			a.iushrn(1);
		  }
		  while (b.isEven()) {
			b.iushrn(1);
		  }
	
		  var r = a.cmp(b);
		  if (r < 0) {
			// Swap `a` and `b` to make `a` always bigger than `b`
			var t = a;
			a = b;
			b = t;
		  } else if (r === 0 || b.cmpn(1) === 0) {
			break;
		  }
	
		  a.isub(b);
		} while (true);
	
		return b.iushln(shift);
	  };
	
	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
		return this.egcd(num).a.umod(num);
	  };
	
	  BN.prototype.isEven = function isEven () {
		return (this.words[0] & 1) === 0;
	  };
	
	  BN.prototype.isOdd = function isOdd () {
		return (this.words[0] & 1) === 1;
	  };
	
	  // And first word and num
	  BN.prototype.andln = function andln (num) {
		return this.words[0] & num;
	  };
	
	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
		assert(typeof bit === 'number');
		var r = bit % 26;
		var s = (bit - r) / 26;
		var q = 1 << r;
	
		// Fast case: bit is much higher than all existing words
		if (this.length <= s) {
		  this._expand(s + 1);
		  this.words[s] |= q;
		  return this;
		}
	
		// Add bit and propagate, if needed
		var carry = q;
		for (var i = s; carry !== 0 && i < this.length; i++) {
		  var w = this.words[i] | 0;
		  w += carry;
		  carry = w >>> 26;
		  w &= 0x3ffffff;
		  this.words[i] = w;
		}
		if (carry !== 0) {
		  this.words[i] = carry;
		  this.length++;
		}
		return this;
	  };
	
	  BN.prototype.isZero = function isZero () {
		return this.length === 1 && this.words[0] === 0;
	  };
	
	  BN.prototype.cmpn = function cmpn (num) {
		var negative = num < 0;
	
		if (this.negative !== 0 && !negative) return -1;
		if (this.negative === 0 && negative) return 1;
	
		this._strip();
	
		var res;
		if (this.length > 1) {
		  res = 1;
		} else {
		  if (negative) {
			num = -num;
		  }
	
		  assert(num <= 0x3ffffff, 'Number is too big');
	
		  var w = this.words[0] | 0;
		  res = w === num ? 0 : w < num ? -1 : 1;
		}
		if (this.negative !== 0) return -res | 0;
		return res;
	  };
	
	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
		if (this.negative !== 0 && num.negative === 0) return -1;
		if (this.negative === 0 && num.negative !== 0) return 1;
	
		var res = this.ucmp(num);
		if (this.negative !== 0) return -res | 0;
		return res;
	  };
	
	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
		// At this point both numbers have the same sign
		if (this.length > num.length) return 1;
		if (this.length < num.length) return -1;
	
		var res = 0;
		for (var i = this.length - 1; i >= 0; i--) {
		  var a = this.words[i] | 0;
		  var b = num.words[i] | 0;
	
		  if (a === b) continue;
		  if (a < b) {
			res = -1;
		  } else if (a > b) {
			res = 1;
		  }
		  break;
		}
		return res;
	  };
	
	  BN.prototype.gtn = function gtn (num) {
		return this.cmpn(num) === 1;
	  };
	
	  BN.prototype.gt = function gt (num) {
		return this.cmp(num) === 1;
	  };
	
	  BN.prototype.gten = function gten (num) {
		return this.cmpn(num) >= 0;
	  };
	
	  BN.prototype.gte = function gte (num) {
		return this.cmp(num) >= 0;
	  };
	
	  BN.prototype.ltn = function ltn (num) {
		return this.cmpn(num) === -1;
	  };
	
	  BN.prototype.lt = function lt (num) {
		return this.cmp(num) === -1;
	  };
	
	  BN.prototype.lten = function lten (num) {
		return this.cmpn(num) <= 0;
	  };
	
	  BN.prototype.lte = function lte (num) {
		return this.cmp(num) <= 0;
	  };
	
	  BN.prototype.eqn = function eqn (num) {
		return this.cmpn(num) === 0;
	  };
	
	  BN.prototype.eq = function eq (num) {
		return this.cmp(num) === 0;
	  };
	
	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
		return new Red(num);
	  };
	
	  BN.prototype.toRed = function toRed (ctx) {
		assert(!this.red, 'Already a number in reduction context');
		assert(this.negative === 0, 'red works only with positives');
		return ctx.convertTo(this)._forceRed(ctx);
	  };
	
	  BN.prototype.fromRed = function fromRed () {
		assert(this.red, 'fromRed works only with numbers in reduction context');
		return this.red.convertFrom(this);
	  };
	
	  BN.prototype._forceRed = function _forceRed (ctx) {
		this.red = ctx;
		return this;
	  };
	
	  BN.prototype.forceRed = function forceRed (ctx) {
		assert(!this.red, 'Already a number in reduction context');
		return this._forceRed(ctx);
	  };
	
	  BN.prototype.redAdd = function redAdd (num) {
		assert(this.red, 'redAdd works only with red numbers');
		return this.red.add(this, num);
	  };
	
	  BN.prototype.redIAdd = function redIAdd (num) {
		assert(this.red, 'redIAdd works only with red numbers');
		return this.red.iadd(this, num);
	  };
	
	  BN.prototype.redSub = function redSub (num) {
		assert(this.red, 'redSub works only with red numbers');
		return this.red.sub(this, num);
	  };
	
	  BN.prototype.redISub = function redISub (num) {
		assert(this.red, 'redISub works only with red numbers');
		return this.red.isub(this, num);
	  };
	
	  BN.prototype.redShl = function redShl (num) {
		assert(this.red, 'redShl works only with red numbers');
		return this.red.shl(this, num);
	  };
	
	  BN.prototype.redMul = function redMul (num) {
		assert(this.red, 'redMul works only with red numbers');
		this.red._verify2(this, num);
		return this.red.mul(this, num);
	  };
	
	  BN.prototype.redIMul = function redIMul (num) {
		assert(this.red, 'redMul works only with red numbers');
		this.red._verify2(this, num);
		return this.red.imul(this, num);
	  };
	
	  BN.prototype.redSqr = function redSqr () {
		assert(this.red, 'redSqr works only with red numbers');
		this.red._verify1(this);
		return this.red.sqr(this);
	  };
	
	  BN.prototype.redISqr = function redISqr () {
		assert(this.red, 'redISqr works only with red numbers');
		this.red._verify1(this);
		return this.red.isqr(this);
	  };
	
	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
		assert(this.red, 'redSqrt works only with red numbers');
		this.red._verify1(this);
		return this.red.sqrt(this);
	  };
	
	  BN.prototype.redInvm = function redInvm () {
		assert(this.red, 'redInvm works only with red numbers');
		this.red._verify1(this);
		return this.red.invm(this);
	  };
	
	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
		assert(this.red, 'redNeg works only with red numbers');
		this.red._verify1(this);
		return this.red.neg(this);
	  };
	
	  BN.prototype.redPow = function redPow (num) {
		assert(this.red && !num.red, 'redPow(normalNum)');
		this.red._verify1(this);
		return this.red.pow(this, num);
	  };
	
	  // Prime numbers with efficient reduction
	  var primes = {
		k256: null,
		p224: null,
		p192: null,
		p25519: null
	  };
	
	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
		// P = 2 ^ N - K
		this.name = name;
		this.p = new BN(p, 16);
		this.n = this.p.bitLength();
		this.k = new BN(1).iushln(this.n).isub(this.p);
	
		this.tmp = this._tmp();
	  }
	
	  MPrime.prototype._tmp = function _tmp () {
		var tmp = new BN(null);
		tmp.words = new Array(Math.ceil(this.n / 13));
		return tmp;
	  };
	
	  MPrime.prototype.ireduce = function ireduce (num) {
		// Assumes that `num` is less than `P^2`
		// num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		var r = num;
		var rlen;
	
		do {
		  this.split(r, this.tmp);
		  r = this.imulK(r);
		  r = r.iadd(this.tmp);
		  rlen = r.bitLength();
		} while (rlen > this.n);
	
		var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		if (cmp === 0) {
		  r.words[0] = 0;
		  r.length = 1;
		} else if (cmp > 0) {
		  r.isub(this.p);
		} else {
		  if (r.strip !== undefined) {
			// r is a BN v4 instance
			r.strip();
		  } else {
			// r is a BN v5 instance
			r._strip();
		  }
		}
	
		return r;
	  };
	
	  MPrime.prototype.split = function split (input, out) {
		input.iushrn(this.n, 0, out);
	  };
	
	  MPrime.prototype.imulK = function imulK (num) {
		return num.imul(this.k);
	  };
	
	  function K256 () {
		MPrime.call(
		  this,
		  'k256',
		  'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);
	
	  K256.prototype.split = function split (input, output) {
		// 256 = 9 * 26 + 22
		var mask = 0x3fffff;
	
		var outLen = Math.min(input.length, 9);
		for (var i = 0; i < outLen; i++) {
		  output.words[i] = input.words[i];
		}
		output.length = outLen;
	
		if (input.length <= 9) {
		  input.words[0] = 0;
		  input.length = 1;
		  return;
		}
	
		// Shift by 9 limbs
		var prev = input.words[9];
		output.words[output.length++] = prev & mask;
	
		for (i = 10; i < input.length; i++) {
		  var next = input.words[i] | 0;
		  input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
		  prev = next;
		}
		prev >>>= 22;
		input.words[i - 10] = prev;
		if (prev === 0 && input.length > 10) {
		  input.length -= 10;
		} else {
		  input.length -= 9;
		}
	  };
	
	  K256.prototype.imulK = function imulK (num) {
		// K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		num.words[num.length] = 0;
		num.words[num.length + 1] = 0;
		num.length += 2;
	
		// bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		var lo = 0;
		for (var i = 0; i < num.length; i++) {
		  var w = num.words[i] | 0;
		  lo += w * 0x3d1;
		  num.words[i] = lo & 0x3ffffff;
		  lo = w * 0x40 + ((lo / 0x4000000) | 0);
		}
	
		// Fast length reduction
		if (num.words[num.length - 1] === 0) {
		  num.length--;
		  if (num.words[num.length - 1] === 0) {
			num.length--;
		  }
		}
		return num;
	  };
	
	  function P224 () {
		MPrime.call(
		  this,
		  'p224',
		  'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);
	
	  function P192 () {
		MPrime.call(
		  this,
		  'p192',
		  'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);
	
	  function P25519 () {
		// 2 ^ 255 - 19
		MPrime.call(
		  this,
		  '25519',
		  '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);
	
	  P25519.prototype.imulK = function imulK (num) {
		// K = 0x13
		var carry = 0;
		for (var i = 0; i < num.length; i++) {
		  var hi = (num.words[i] | 0) * 0x13 + carry;
		  var lo = hi & 0x3ffffff;
		  hi >>>= 26;
	
		  num.words[i] = lo;
		  carry = hi;
		}
		if (carry !== 0) {
		  num.words[num.length++] = carry;
		}
		return num;
	  };
	
	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
		// Cached version of prime
		if (primes[name]) return primes[name];
	
		var prime;
		if (name === 'k256') {
		  prime = new K256();
		} else if (name === 'p224') {
		  prime = new P224();
		} else if (name === 'p192') {
		  prime = new P192();
		} else if (name === 'p25519') {
		  prime = new P25519();
		} else {
		  throw new Error('Unknown prime ' + name);
		}
		primes[name] = prime;
	
		return prime;
	  };
	
	  //
	  // Base reduction engine
	  //
	  function Red (m) {
		if (typeof m === 'string') {
		  var prime = BN._prime(m);
		  this.m = prime.p;
		  this.prime = prime;
		} else {
		  assert(m.gtn(1), 'modulus must be greater than 1');
		  this.m = m;
		  this.prime = null;
		}
	  }
	
	  Red.prototype._verify1 = function _verify1 (a) {
		assert(a.negative === 0, 'red works only with positives');
		assert(a.red, 'red works only with red numbers');
	  };
	
	  Red.prototype._verify2 = function _verify2 (a, b) {
		assert((a.negative | b.negative) === 0, 'red works only with positives');
		assert(a.red && a.red === b.red,
		  'red works only with red numbers');
	  };
	
	  Red.prototype.imod = function imod (a) {
		if (this.prime) return this.prime.ireduce(a)._forceRed(this);
	
		move(a, a.umod(this.m)._forceRed(this));
		return a;
	  };
	
	  Red.prototype.neg = function neg (a) {
		if (a.isZero()) {
		  return a.clone();
		}
	
		return this.m.sub(a)._forceRed(this);
	  };
	
	  Red.prototype.add = function add (a, b) {
		this._verify2(a, b);
	
		var res = a.add(b);
		if (res.cmp(this.m) >= 0) {
		  res.isub(this.m);
		}
		return res._forceRed(this);
	  };
	
	  Red.prototype.iadd = function iadd (a, b) {
		this._verify2(a, b);
	
		var res = a.iadd(b);
		if (res.cmp(this.m) >= 0) {
		  res.isub(this.m);
		}
		return res;
	  };
	
	  Red.prototype.sub = function sub (a, b) {
		this._verify2(a, b);
	
		var res = a.sub(b);
		if (res.cmpn(0) < 0) {
		  res.iadd(this.m);
		}
		return res._forceRed(this);
	  };
	
	  Red.prototype.isub = function isub (a, b) {
		this._verify2(a, b);
	
		var res = a.isub(b);
		if (res.cmpn(0) < 0) {
		  res.iadd(this.m);
		}
		return res;
	  };
	
	  Red.prototype.shl = function shl (a, num) {
		this._verify1(a);
		return this.imod(a.ushln(num));
	  };
	
	  Red.prototype.imul = function imul (a, b) {
		this._verify2(a, b);
		return this.imod(a.imul(b));
	  };
	
	  Red.prototype.mul = function mul (a, b) {
		this._verify2(a, b);
		return this.imod(a.mul(b));
	  };
	
	  Red.prototype.isqr = function isqr (a) {
		return this.imul(a, a.clone());
	  };
	
	  Red.prototype.sqr = function sqr (a) {
		return this.mul(a, a);
	  };
	
	  Red.prototype.sqrt = function sqrt (a) {
		if (a.isZero()) return a.clone();
	
		var mod3 = this.m.andln(3);
		assert(mod3 % 2 === 1);
	
		// Fast case
		if (mod3 === 3) {
		  var pow = this.m.add(new BN(1)).iushrn(2);
		  return this.pow(a, pow);
		}
	
		// Tonelli-Shanks algorithm (Totally unoptimized and slow)
		//
		// Find Q and S, that Q * 2 ^ S = (P - 1)
		var q = this.m.subn(1);
		var s = 0;
		while (!q.isZero() && q.andln(1) === 0) {
		  s++;
		  q.iushrn(1);
		}
		assert(!q.isZero());
	
		var one = new BN(1).toRed(this);
		var nOne = one.redNeg();
	
		// Find quadratic non-residue
		// NOTE: Max is such because of generalized Riemann hypothesis.
		var lpow = this.m.subn(1).iushrn(1);
		var z = this.m.bitLength();
		z = new BN(2 * z * z).toRed(this);
	
		while (this.pow(z, lpow).cmp(nOne) !== 0) {
		  z.redIAdd(nOne);
		}
	
		var c = this.pow(z, q);
		var r = this.pow(a, q.addn(1).iushrn(1));
		var t = this.pow(a, q);
		var m = s;
		while (t.cmp(one) !== 0) {
		  var tmp = t;
		  for (var i = 0; tmp.cmp(one) !== 0; i++) {
			tmp = tmp.redSqr();
		  }
		  assert(i < m);
		  var b = this.pow(c, new BN(1).iushln(m - i - 1));
	
		  r = r.redMul(b);
		  c = b.redSqr();
		  t = t.redMul(c);
		  m = i;
		}
	
		return r;
	  };
	
	  Red.prototype.invm = function invm (a) {
		var inv = a._invmp(this.m);
		if (inv.negative !== 0) {
		  inv.negative = 0;
		  return this.imod(inv).redNeg();
		} else {
		  return this.imod(inv);
		}
	  };
	
	  Red.prototype.pow = function pow (a, num) {
		if (num.isZero()) return new BN(1).toRed(this);
		if (num.cmpn(1) === 0) return a.clone();
	
		var windowSize = 4;
		var wnd = new Array(1 << windowSize);
		wnd[0] = new BN(1).toRed(this);
		wnd[1] = a;
		for (var i = 2; i < wnd.length; i++) {
		  wnd[i] = this.mul(wnd[i - 1], a);
		}
	
		var res = wnd[0];
		var current = 0;
		var currentLen = 0;
		var start = num.bitLength() % 26;
		if (start === 0) {
		  start = 26;
		}
	
		for (i = num.length - 1; i >= 0; i--) {
		  var word = num.words[i];
		  for (var j = start - 1; j >= 0; j--) {
			var bit = (word >> j) & 1;
			if (res !== wnd[0]) {
			  res = this.sqr(res);
			}
	
			if (bit === 0 && current === 0) {
			  currentLen = 0;
			  continue;
			}
	
			current <<= 1;
			current |= bit;
			currentLen++;
			if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
	
			res = this.mul(res, wnd[current]);
			currentLen = 0;
			current = 0;
		  }
		  start = 26;
		}
	
		return res;
	  };
	
	  Red.prototype.convertTo = function convertTo (num) {
		var r = num.umod(this.m);
	
		return r === num ? r.clone() : r;
	  };
	
	  Red.prototype.convertFrom = function convertFrom (num) {
		var res = num.clone();
		res.red = null;
		return res;
	  };
	
	  //
	  // Montgomery method engine
	  //
	
	  BN.mont = function mont (num) {
		return new Mont(num);
	  };
	
	  function Mont (m) {
		Red.call(this, m);
	
		this.shift = this.m.bitLength();
		if (this.shift % 26 !== 0) {
		  this.shift += 26 - (this.shift % 26);
		}
	
		this.r = new BN(1).iushln(this.shift);
		this.r2 = this.imod(this.r.sqr());
		this.rinv = this.r._invmp(this.m);
	
		this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		this.minv = this.minv.umod(this.r);
		this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);
	
	  Mont.prototype.convertTo = function convertTo (num) {
		return this.imod(num.ushln(this.shift));
	  };
	
	  Mont.prototype.convertFrom = function convertFrom (num) {
		var r = this.imod(num.mul(this.rinv));
		r.red = null;
		return r;
	  };
	
	  Mont.prototype.imul = function imul (a, b) {
		if (a.isZero() || b.isZero()) {
		  a.words[0] = 0;
		  a.length = 1;
		  return a;
		}
	
		var t = a.imul(b);
		var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		var u = t.isub(c).iushrn(this.shift);
		var res = u;
	
		if (u.cmp(this.m) >= 0) {
		  res = u.isub(this.m);
		} else if (u.cmpn(0) < 0) {
		  res = u.iadd(this.m);
		}
	
		return res._forceRed(this);
	  };
	
	  Mont.prototype.mul = function mul (a, b) {
		if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
	
		var t = a.mul(b);
		var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		var u = t.isub(c).iushrn(this.shift);
		var res = u;
		if (u.cmp(this.m) >= 0) {
		  res = u.isub(this.m);
		} else if (u.cmpn(0) < 0) {
		  res = u.iadd(this.m);
		}
	
		return res._forceRed(this);
	  };
	
	  Mont.prototype.invm = function invm (a) {
		// (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		var res = this.imod(a._invmp(this.m).mul(this.r2));
		return res._forceRed(this);
	  };
	})(typeof module === 'undefined' || module, this);
	
	},{"buffer":124}],43:[function(require,module,exports){
	'use strict';
	
	var BN = require('bn.js');
	var numberToBN = require('number-to-bn');
	
	var zero = new BN(0);
	var negative1 = new BN(-1);
	
	// complete ethereum unit map
	var unitMap = {
	  'noether': '0', // eslint-disable-line
	  'wei': '1', // eslint-disable-line
	  'kwei': '1000', // eslint-disable-line
	  'Kwei': '1000', // eslint-disable-line
	  'babbage': '1000', // eslint-disable-line
	  'femtoether': '1000', // eslint-disable-line
	  'mwei': '1000000', // eslint-disable-line
	  'Mwei': '1000000', // eslint-disable-line
	  'lovelace': '1000000', // eslint-disable-line
	  'picoether': '1000000', // eslint-disable-line
	  'gwei': '1000000000', // eslint-disable-line
	  'Gwei': '1000000000', // eslint-disable-line
	  'shannon': '1000000000', // eslint-disable-line
	  'nanoether': '1000000000', // eslint-disable-line
	  'nano': '1000000000', // eslint-disable-line
	  'szabo': '1000000000000', // eslint-disable-line
	  'microether': '1000000000000', // eslint-disable-line
	  'micro': '1000000000000', // eslint-disable-line
	  'finney': '1000000000000000', // eslint-disable-line
	  'milliether': '1000000000000000', // eslint-disable-line
	  'milli': '1000000000000000', // eslint-disable-line
	  'ether': '1000000000000000000', // eslint-disable-line
	  'kether': '1000000000000000000000', // eslint-disable-line
	  'grand': '1000000000000000000000', // eslint-disable-line
	  'mether': '1000000000000000000000000', // eslint-disable-line
	  'gether': '1000000000000000000000000000', // eslint-disable-line
	  'tether': '1000000000000000000000000000000' };
	
	/**
	 * Returns value of unit in Wei
	 *
	 * @method getValueOfUnit
	 * @param {String} unit the unit to convert to, default ether
	 * @returns {BigNumber} value of the unit (in Wei)
	 * @throws error if the unit is not correct:w
	 */
	function getValueOfUnit(unitInput) {
	  var unit = unitInput ? unitInput.toLowerCase() : 'ether';
	  var unitValue = unitMap[unit]; // eslint-disable-line
	
	  if (typeof unitValue !== 'string') {
		throw new Error('[ethjs-unit] the unit provided ' + unitInput + ' doesn\'t exists, please use the one of the following units ' + JSON.stringify(unitMap, null, 2));
	  }
	
	  return new BN(unitValue, 10);
	}
	
	function numberToString(arg) {
	  if (typeof arg === 'string') {
		if (!arg.match(/^-?[0-9.]+$/)) {
		  throw new Error('while converting number to string, invalid number value \'' + arg + '\', should be a number matching (^-?[0-9.]+).');
		}
		return arg;
	  } else if (typeof arg === 'number') {
		return String(arg);
	  } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
		if (arg.toPrecision) {
		  return String(arg.toPrecision());
		} else {
		  // eslint-disable-line
		  return arg.toString(10);
		}
	  }
	  throw new Error('while converting number to string, invalid number value \'' + arg + '\' type ' + typeof arg + '.');
	}
	
	function fromWei(weiInput, unit, optionsInput) {
	  var wei = numberToBN(weiInput); // eslint-disable-line
	  var negative = wei.lt(zero); // eslint-disable-line
	  var base = getValueOfUnit(unit);
	  var baseLength = unitMap[unit].length - 1 || 1;
	  var options = optionsInput || {};
	
	  if (negative) {
		wei = wei.mul(negative1);
	  }
	
	  var fraction = wei.mod(base).toString(10); // eslint-disable-line
	
	  while (fraction.length < baseLength) {
		fraction = '0' + fraction;
	  }
	
	  if (!options.pad) {
		fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
	  }
	
	  var whole = wei.div(base).toString(10); // eslint-disable-line
	
	  if (options.commify) {
		whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
	  }
	
	  var value = '' + whole + (fraction == '0' ? '' : '.' + fraction); // eslint-disable-line
	
	  if (negative) {
		value = '-' + value;
	  }
	
	  return value;
	}
	
	function toWei(etherInput, unit) {
	  var ether = numberToString(etherInput); // eslint-disable-line
	  var base = getValueOfUnit(unit);
	  var baseLength = unitMap[unit].length - 1 || 1;
	
	  // Is it negative?
	  var negative = ether.substring(0, 1) === '-'; // eslint-disable-line
	  if (negative) {
		ether = ether.substring(1);
	  }
	
	  if (ether === '.') {
		throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, invalid value');
	  }
	
	  // Split it into a whole and fractional part
	  var comps = ether.split('.'); // eslint-disable-line
	  if (comps.length > 2) {
		throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei,  too many decimal points');
	  }
	
	  var whole = comps[0],
		  fraction = comps[1]; // eslint-disable-line
	
	  if (!whole) {
		whole = '0';
	  }
	  if (!fraction) {
		fraction = '0';
	  }
	  if (fraction.length > baseLength) {
		throw new Error('[ethjs-unit] while converting number ' + etherInput + ' to wei, too many decimal places');
	  }
	
	  while (fraction.length < baseLength) {
		fraction += '0';
	  }
	
	  whole = new BN(whole);
	  fraction = new BN(fraction);
	  var wei = whole.mul(base).add(fraction); // eslint-disable-line
	
	  if (negative) {
		wei = wei.mul(negative1);
	  }
	
	  return new BN(wei.toString(10), 10);
	}
	
	module.exports = {
	  unitMap: unitMap,
	  numberToString: numberToString,
	  getValueOfUnit: getValueOfUnit,
	  fromWei: fromWei,
	  toWei: toWei
	};
	},{"bn.js":44,"number-to-bn":72}],44:[function(require,module,exports){
	(function (module, exports) {
	  'use strict';
	
	  // Utils
	  function assert (val, msg) {
		if (!val) throw new Error(msg || 'Assertion failed');
	  }
	
	  // Could use `inherits` module, but don't want to move from single file
	  // architecture yet.
	  function inherits (ctor, superCtor) {
		ctor.super_ = superCtor;
		var TempCtor = function () {};
		TempCtor.prototype = superCtor.prototype;
		ctor.prototype = new TempCtor();
		ctor.prototype.constructor = ctor;
	  }
	
	  // BN
	
	  function BN (number, base, endian) {
		if (BN.isBN(number)) {
		  return number;
		}
	
		this.negative = 0;
		this.words = null;
		this.length = 0;
	
		// Reduction context
		this.red = null;
	
		if (number !== null) {
		  if (base === 'le' || base === 'be') {
			endian = base;
			base = 10;
		  }
	
		  this._init(number || 0, base || 10, endian || 'be');
		}
	  }
	  if (typeof module === 'object') {
		module.exports = BN;
	  } else {
		exports.BN = BN;
	  }
	
	  BN.BN = BN;
	  BN.wordSize = 26;
	
	  var Buffer;
	  try {
		Buffer = require('buf' + 'fer').Buffer;
	  } catch (e) {
	  }
	
	  BN.isBN = function isBN (num) {
		if (num instanceof BN) {
		  return true;
		}
	
		return num !== null && typeof num === 'object' &&
		  num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
	  };
	
	  BN.max = function max (left, right) {
		if (left.cmp(right) > 0) return left;
		return right;
	  };
	
	  BN.min = function min (left, right) {
		if (left.cmp(right) < 0) return left;
		return right;
	  };
	
	  BN.prototype._init = function init (number, base, endian) {
		if (typeof number === 'number') {
		  return this._initNumber(number, base, endian);
		}
	
		if (typeof number === 'object') {
		  return this._initArray(number, base, endian);
		}
	
		if (base === 'hex') {
		  base = 16;
		}
		assert(base === (base | 0) && base >= 2 && base <= 36);
	
		number = number.toString().replace(/\s+/g, '');
		var start = 0;
		if (number[0] === '-') {
		  start++;
		}
	
		if (base === 16) {
		  this._parseHex(number, start);
		} else {
		  this._parseBase(number, base, start);
		}
	
		if (number[0] === '-') {
		  this.negative = 1;
		}
	
		this.strip();
	
		if (endian !== 'le') return;
	
		this._initArray(this.toArray(), base, endian);
	  };
	
	  BN.prototype._initNumber = function _initNumber (number, base, endian) {
		if (number < 0) {
		  this.negative = 1;
		  number = -number;
		}
		if (number < 0x4000000) {
		  this.words = [ number & 0x3ffffff ];
		  this.length = 1;
		} else if (number < 0x10000000000000) {
		  this.words = [
			number & 0x3ffffff,
			(number / 0x4000000) & 0x3ffffff
		  ];
		  this.length = 2;
		} else {
		  assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
		  this.words = [
			number & 0x3ffffff,
			(number / 0x4000000) & 0x3ffffff,
			1
		  ];
		  this.length = 3;
		}
	
		if (endian !== 'le') return;
	
		// Reverse the bytes
		this._initArray(this.toArray(), base, endian);
	  };
	
	  BN.prototype._initArray = function _initArray (number, base, endian) {
		// Perhaps a Uint8Array
		assert(typeof number.length === 'number');
		if (number.length <= 0) {
		  this.words = [ 0 ];
		  this.length = 1;
		  return this;
		}
	
		this.length = Math.ceil(number.length / 3);
		this.words = new Array(this.length);
		for (var i = 0; i < this.length; i++) {
		  this.words[i] = 0;
		}
	
		var j, w;
		var off = 0;
		if (endian === 'be') {
		  for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
			w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
			this.words[j] |= (w << off) & 0x3ffffff;
			this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
			off += 24;
			if (off >= 26) {
			  off -= 26;
			  j++;
			}
		  }
		} else if (endian === 'le') {
		  for (i = 0, j = 0; i < number.length; i += 3) {
			w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
			this.words[j] |= (w << off) & 0x3ffffff;
			this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
			off += 24;
			if (off >= 26) {
			  off -= 26;
			  j++;
			}
		  }
		}
		return this.strip();
	  };
	
	  function parseHex (str, start, end) {
		var r = 0;
		var len = Math.min(str.length, end);
		for (var i = start; i < len; i++) {
		  var c = str.charCodeAt(i) - 48;
	
		  r <<= 4;
	
		  // 'a' - 'f'
		  if (c >= 49 && c <= 54) {
			r |= c - 49 + 0xa;
	
		  // 'A' - 'F'
		  } else if (c >= 17 && c <= 22) {
			r |= c - 17 + 0xa;
	
		  // '0' - '9'
		  } else {
			r |= c & 0xf;
		  }
		}
		return r;
	  }
	
	  BN.prototype._parseHex = function _parseHex (number, start) {
		// Create possibly bigger array to ensure that it fits the number
		this.length = Math.ceil((number.length - start) / 6);
		this.words = new Array(this.length);
		for (var i = 0; i < this.length; i++) {
		  this.words[i] = 0;
		}
	
		var j, w;
		// Scan 24-bit chunks and add them to the number
		var off = 0;
		for (i = number.length - 6, j = 0; i >= start; i -= 6) {
		  w = parseHex(number, i, i + 6);
		  this.words[j] |= (w << off) & 0x3ffffff;
		  // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
		  this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
		  off += 24;
		  if (off >= 26) {
			off -= 26;
			j++;
		  }
		}
		if (i + 6 !== start) {
		  w = parseHex(number, start, i + 6);
		  this.words[j] |= (w << off) & 0x3ffffff;
		  this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
		}
		this.strip();
	  };
	
	  function parseBase (str, start, end, mul) {
		var r = 0;
		var len = Math.min(str.length, end);
		for (var i = start; i < len; i++) {
		  var c = str.charCodeAt(i) - 48;
	
		  r *= mul;
	
		  // 'a'
		  if (c >= 49) {
			r += c - 49 + 0xa;
	
		  // 'A'
		  } else if (c >= 17) {
			r += c - 17 + 0xa;
	
		  // '0' - '9'
		  } else {
			r += c;
		  }
		}
		return r;
	  }
	
	  BN.prototype._parseBase = function _parseBase (number, base, start) {
		// Initialize as zero
		this.words = [ 0 ];
		this.length = 1;
	
		// Find length of limb in base
		for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
		  limbLen++;
		}
		limbLen--;
		limbPow = (limbPow / base) | 0;
	
		var total = number.length - start;
		var mod = total % limbLen;
		var end = Math.min(total, total - mod) + start;
	
		var word = 0;
		for (var i = start; i < end; i += limbLen) {
		  word = parseBase(number, i, i + limbLen, base);
	
		  this.imuln(limbPow);
		  if (this.words[0] + word < 0x4000000) {
			this.words[0] += word;
		  } else {
			this._iaddn(word);
		  }
		}
	
		if (mod !== 0) {
		  var pow = 1;
		  word = parseBase(number, i, number.length, base);
	
		  for (i = 0; i < mod; i++) {
			pow *= base;
		  }
	
		  this.imuln(pow);
		  if (this.words[0] + word < 0x4000000) {
			this.words[0] += word;
		  } else {
			this._iaddn(word);
		  }
		}
	  };
	
	  BN.prototype.copy = function copy (dest) {
		dest.words = new Array(this.length);
		for (var i = 0; i < this.length; i++) {
		  dest.words[i] = this.words[i];
		}
		dest.length = this.length;
		dest.negative = this.negative;
		dest.red = this.red;
	  };
	
	  BN.prototype.clone = function clone () {
		var r = new BN(null);
		this.copy(r);
		return r;
	  };
	
	  BN.prototype._expand = function _expand (size) {
		while (this.length < size) {
		  this.words[this.length++] = 0;
		}
		return this;
	  };
	
	  // Remove leading `0` from `this`
	  BN.prototype.strip = function strip () {
		while (this.length > 1 && this.words[this.length - 1] === 0) {
		  this.length--;
		}
		return this._normSign();
	  };
	
	  BN.prototype._normSign = function _normSign () {
		// -0 = 0
		if (this.length === 1 && this.words[0] === 0) {
		  this.negative = 0;
		}
		return this;
	  };
	
	  BN.prototype.inspect = function inspect () {
		return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
	  };
	
	  /*
	
	  var zeros = [];
	  var groupSizes = [];
	  var groupBases = [];
	
	  var s = '';
	  var i = -1;
	  while (++i < BN.wordSize) {
		zeros[i] = s;
		s += '0';
	  }
	  groupSizes[0] = 0;
	  groupSizes[1] = 0;
	  groupBases[0] = 0;
	  groupBases[1] = 0;
	  var base = 2 - 1;
	  while (++base < 36 + 1) {
		var groupSize = 0;
		var groupBase = 1;
		while (groupBase < (1 << BN.wordSize) / base) {
		  groupBase *= base;
		  groupSize += 1;
		}
		groupSizes[base] = groupSize;
		groupBases[base] = groupBase;
	  }
	
	  */
	
	  var zeros = [
		'',
		'0',
		'00',
		'000',
		'0000',
		'00000',
		'000000',
		'0000000',
		'00000000',
		'000000000',
		'0000000000',
		'00000000000',
		'000000000000',
		'0000000000000',
		'00000000000000',
		'000000000000000',
		'0000000000000000',
		'00000000000000000',
		'000000000000000000',
		'0000000000000000000',
		'00000000000000000000',
		'000000000000000000000',
		'0000000000000000000000',
		'00000000000000000000000',
		'000000000000000000000000',
		'0000000000000000000000000'
	  ];
	
	  var groupSizes = [
		0, 0,
		25, 16, 12, 11, 10, 9, 8,
		8, 7, 7, 7, 7, 6, 6,
		6, 6, 6, 6, 6, 5, 5,
		5, 5, 5, 5, 5, 5, 5,
		5, 5, 5, 5, 5, 5, 5
	  ];
	
	  var groupBases = [
		0, 0,
		33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
		43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
		16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
		6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
		24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
	  ];
	
	  BN.prototype.toString = function toString (base, padding) {
		base = base || 10;
		padding = padding | 0 || 1;
	
		var out;
		if (base === 16 || base === 'hex') {
		  out = '';
		  var off = 0;
		  var carry = 0;
		  for (var i = 0; i < this.length; i++) {
			var w = this.words[i];
			var word = (((w << off) | carry) & 0xffffff).toString(16);
			carry = (w >>> (24 - off)) & 0xffffff;
			if (carry !== 0 || i !== this.length - 1) {
			  out = zeros[6 - word.length] + word + out;
			} else {
			  out = word + out;
			}
			off += 2;
			if (off >= 26) {
			  off -= 26;
			  i--;
			}
		  }
		  if (carry !== 0) {
			out = carry.toString(16) + out;
		  }
		  while (out.length % padding !== 0) {
			out = '0' + out;
		  }
		  if (this.negative !== 0) {
			out = '-' + out;
		  }
		  return out;
		}
	
		if (base === (base | 0) && base >= 2 && base <= 36) {
		  // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
		  var groupSize = groupSizes[base];
		  // var groupBase = Math.pow(base, groupSize);
		  var groupBase = groupBases[base];
		  out = '';
		  var c = this.clone();
		  c.negative = 0;
		  while (!c.isZero()) {
			var r = c.modn(groupBase).toString(base);
			c = c.idivn(groupBase);
	
			if (!c.isZero()) {
			  out = zeros[groupSize - r.length] + r + out;
			} else {
			  out = r + out;
			}
		  }
		  if (this.isZero()) {
			out = '0' + out;
		  }
		  while (out.length % padding !== 0) {
			out = '0' + out;
		  }
		  if (this.negative !== 0) {
			out = '-' + out;
		  }
		  return out;
		}
	
		assert(false, 'Base should be between 2 and 36');
	  };
	
	  BN.prototype.toNumber = function toNumber () {
		var ret = this.words[0];
		if (this.length === 2) {
		  ret += this.words[1] * 0x4000000;
		} else if (this.length === 3 && this.words[2] === 0x01) {
		  // NOTE: at this stage it is known that the top bit is set
		  ret += 0x10000000000000 + (this.words[1] * 0x4000000);
		} else if (this.length > 2) {
		  assert(false, 'Number can only safely store up to 53 bits');
		}
		return (this.negative !== 0) ? -ret : ret;
	  };
	
	  BN.prototype.toJSON = function toJSON () {
		return this.toString(16);
	  };
	
	  BN.prototype.toBuffer = function toBuffer (endian, length) {
		assert(typeof Buffer !== 'undefined');
		return this.toArrayLike(Buffer, endian, length);
	  };
	
	  BN.prototype.toArray = function toArray (endian, length) {
		return this.toArrayLike(Array, endian, length);
	  };
	
	  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
		var byteLength = this.byteLength();
		var reqLength = length || Math.max(1, byteLength);
		assert(byteLength <= reqLength, 'byte array longer than desired length');
		assert(reqLength > 0, 'Requested array length <= 0');
	
		this.strip();
		var littleEndian = endian === 'le';
		var res = new ArrayType(reqLength);
	
		var b, i;
		var q = this.clone();
		if (!littleEndian) {
		  // Assume big-endian
		  for (i = 0; i < reqLength - byteLength; i++) {
			res[i] = 0;
		  }
	
		  for (i = 0; !q.isZero(); i++) {
			b = q.andln(0xff);
			q.iushrn(8);
	
			res[reqLength - i - 1] = b;
		  }
		} else {
		  for (i = 0; !q.isZero(); i++) {
			b = q.andln(0xff);
			q.iushrn(8);
	
			res[i] = b;
		  }
	
		  for (; i < reqLength; i++) {
			res[i] = 0;
		  }
		}
	
		return res;
	  };
	
	  if (Math.clz32) {
		BN.prototype._countBits = function _countBits (w) {
		  return 32 - Math.clz32(w);
		};
	  } else {
		BN.prototype._countBits = function _countBits (w) {
		  var t = w;
		  var r = 0;
		  if (t >= 0x1000) {
			r += 13;
			t >>>= 13;
		  }
		  if (t >= 0x40) {
			r += 7;
			t >>>= 7;
		  }
		  if (t >= 0x8) {
			r += 4;
			t >>>= 4;
		  }
		  if (t >= 0x02) {
			r += 2;
			t >>>= 2;
		  }
		  return r + t;
		};
	  }
	
	  BN.prototype._zeroBits = function _zeroBits (w) {
		// Short-cut
		if (w === 0) return 26;
	
		var t = w;
		var r = 0;
		if ((t & 0x1fff) === 0) {
		  r += 13;
		  t >>>= 13;
		}
		if ((t & 0x7f) === 0) {
		  r += 7;
		  t >>>= 7;
		}
		if ((t & 0xf) === 0) {
		  r += 4;
		  t >>>= 4;
		}
		if ((t & 0x3) === 0) {
		  r += 2;
		  t >>>= 2;
		}
		if ((t & 0x1) === 0) {
		  r++;
		}
		return r;
	  };
	
	  // Return number of used bits in a BN
	  BN.prototype.bitLength = function bitLength () {
		var w = this.words[this.length - 1];
		var hi = this._countBits(w);
		return (this.length - 1) * 26 + hi;
	  };
	
	  function toBitArray (num) {
		var w = new Array(num.bitLength());
	
		for (var bit = 0; bit < w.length; bit++) {
		  var off = (bit / 26) | 0;
		  var wbit = bit % 26;
	
		  w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
		}
	
		return w;
	  }
	
	  // Number of trailing zero bits
	  BN.prototype.zeroBits = function zeroBits () {
		if (this.isZero()) return 0;
	
		var r = 0;
		for (var i = 0; i < this.length; i++) {
		  var b = this._zeroBits(this.words[i]);
		  r += b;
		  if (b !== 26) break;
		}
		return r;
	  };
	
	  BN.prototype.byteLength = function byteLength () {
		return Math.ceil(this.bitLength() / 8);
	  };
	
	  BN.prototype.toTwos = function toTwos (width) {
		if (this.negative !== 0) {
		  return this.abs().inotn(width).iaddn(1);
		}
		return this.clone();
	  };
	
	  BN.prototype.fromTwos = function fromTwos (width) {
		if (this.testn(width - 1)) {
		  return this.notn(width).iaddn(1).ineg();
		}
		return this.clone();
	  };
	
	  BN.prototype.isNeg = function isNeg () {
		return this.negative !== 0;
	  };
	
	  // Return negative clone of `this`
	  BN.prototype.neg = function neg () {
		return this.clone().ineg();
	  };
	
	  BN.prototype.ineg = function ineg () {
		if (!this.isZero()) {
		  this.negative ^= 1;
		}
	
		return this;
	  };
	
	  // Or `num` with `this` in-place
	  BN.prototype.iuor = function iuor (num) {
		while (this.length < num.length) {
		  this.words[this.length++] = 0;
		}
	
		for (var i = 0; i < num.length; i++) {
		  this.words[i] = this.words[i] | num.words[i];
		}
	
		return this.strip();
	  };
	
	  BN.prototype.ior = function ior (num) {
		assert((this.negative | num.negative) === 0);
		return this.iuor(num);
	  };
	
	  // Or `num` with `this`
	  BN.prototype.or = function or (num) {
		if (this.length > num.length) return this.clone().ior(num);
		return num.clone().ior(this);
	  };
	
	  BN.prototype.uor = function uor (num) {
		if (this.length > num.length) return this.clone().iuor(num);
		return num.clone().iuor(this);
	  };
	
	  // And `num` with `this` in-place
	  BN.prototype.iuand = function iuand (num) {
		// b = min-length(num, this)
		var b;
		if (this.length > num.length) {
		  b = num;
		} else {
		  b = this;
		}
	
		for (var i = 0; i < b.length; i++) {
		  this.words[i] = this.words[i] & num.words[i];
		}
	
		this.length = b.length;
	
		return this.strip();
	  };
	
	  BN.prototype.iand = function iand (num) {
		assert((this.negative | num.negative) === 0);
		return this.iuand(num);
	  };
	
	  // And `num` with `this`
	  BN.prototype.and = function and (num) {
		if (this.length > num.length) return this.clone().iand(num);
		return num.clone().iand(this);
	  };
	
	  BN.prototype.uand = function uand (num) {
		if (this.length > num.length) return this.clone().iuand(num);
		return num.clone().iuand(this);
	  };
	
	  // Xor `num` with `this` in-place
	  BN.prototype.iuxor = function iuxor (num) {
		// a.length > b.length
		var a;
		var b;
		if (this.length > num.length) {
		  a = this;
		  b = num;
		} else {
		  a = num;
		  b = this;
		}
	
		for (var i = 0; i < b.length; i++) {
		  this.words[i] = a.words[i] ^ b.words[i];
		}
	
		if (this !== a) {
		  for (; i < a.length; i++) {
			this.words[i] = a.words[i];
		  }
		}
	
		this.length = a.length;
	
		return this.strip();
	  };
	
	  BN.prototype.ixor = function ixor (num) {
		assert((this.negative | num.negative) === 0);
		return this.iuxor(num);
	  };
	
	  // Xor `num` with `this`
	  BN.prototype.xor = function xor (num) {
		if (this.length > num.length) return this.clone().ixor(num);
		return num.clone().ixor(this);
	  };
	
	  BN.prototype.uxor = function uxor (num) {
		if (this.length > num.length) return this.clone().iuxor(num);
		return num.clone().iuxor(this);
	  };
	
	  // Not ``this`` with ``width`` bitwidth
	  BN.prototype.inotn = function inotn (width) {
		assert(typeof width === 'number' && width >= 0);
	
		var bytesNeeded = Math.ceil(width / 26) | 0;
		var bitsLeft = width % 26;
	
		// Extend the buffer with leading zeroes
		this._expand(bytesNeeded);
	
		if (bitsLeft > 0) {
		  bytesNeeded--;
		}
	
		// Handle complete words
		for (var i = 0; i < bytesNeeded; i++) {
		  this.words[i] = ~this.words[i] & 0x3ffffff;
		}
	
		// Handle the residue
		if (bitsLeft > 0) {
		  this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
		}
	
		// And remove leading zeroes
		return this.strip();
	  };
	
	  BN.prototype.notn = function notn (width) {
		return this.clone().inotn(width);
	  };
	
	  // Set `bit` of `this`
	  BN.prototype.setn = function setn (bit, val) {
		assert(typeof bit === 'number' && bit >= 0);
	
		var off = (bit / 26) | 0;
		var wbit = bit % 26;
	
		this._expand(off + 1);
	
		if (val) {
		  this.words[off] = this.words[off] | (1 << wbit);
		} else {
		  this.words[off] = this.words[off] & ~(1 << wbit);
		}
	
		return this.strip();
	  };
	
	  // Add `num` to `this` in-place
	  BN.prototype.iadd = function iadd (num) {
		var r;
	
		// negative + positive
		if (this.negative !== 0 && num.negative === 0) {
		  this.negative = 0;
		  r = this.isub(num);
		  this.negative ^= 1;
		  return this._normSign();
	
		// positive + negative
		} else if (this.negative === 0 && num.negative !== 0) {
		  num.negative = 0;
		  r = this.isub(num);
		  num.negative = 1;
		  return r._normSign();
		}
	
		// a.length > b.length
		var a, b;
		if (this.length > num.length) {
		  a = this;
		  b = num;
		} else {
		  a = num;
		  b = this;
		}
	
		var carry = 0;
		for (var i = 0; i < b.length; i++) {
		  r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
		  this.words[i] = r & 0x3ffffff;
		  carry = r >>> 26;
		}
		for (; carry !== 0 && i < a.length; i++) {
		  r = (a.words[i] | 0) + carry;
		  this.words[i] = r & 0x3ffffff;
		  carry = r >>> 26;
		}
	
		this.length = a.length;
		if (carry !== 0) {
		  this.words[this.length] = carry;
		  this.length++;
		// Copy the rest of the words
		} else if (a !== this) {
		  for (; i < a.length; i++) {
			this.words[i] = a.words[i];
		  }
		}
	
		return this;
	  };
	
	  // Add `num` to `this`
	  BN.prototype.add = function add (num) {
		var res;
		if (num.negative !== 0 && this.negative === 0) {
		  num.negative = 0;
		  res = this.sub(num);
		  num.negative ^= 1;
		  return res;
		} else if (num.negative === 0 && this.negative !== 0) {
		  this.negative = 0;
		  res = num.sub(this);
		  this.negative = 1;
		  return res;
		}
	
		if (this.length > num.length) return this.clone().iadd(num);
	
		return num.clone().iadd(this);
	  };
	
	  // Subtract `num` from `this` in-place
	  BN.prototype.isub = function isub (num) {
		// this - (-num) = this + num
		if (num.negative !== 0) {
		  num.negative = 0;
		  var r = this.iadd(num);
		  num.negative = 1;
		  return r._normSign();
	
		// -this - num = -(this + num)
		} else if (this.negative !== 0) {
		  this.negative = 0;
		  this.iadd(num);
		  this.negative = 1;
		  return this._normSign();
		}
	
		// At this point both numbers are positive
		var cmp = this.cmp(num);
	
		// Optimization - zeroify
		if (cmp === 0) {
		  this.negative = 0;
		  this.length = 1;
		  this.words[0] = 0;
		  return this;
		}
	
		// a > b
		var a, b;
		if (cmp > 0) {
		  a = this;
		  b = num;
		} else {
		  a = num;
		  b = this;
		}
	
		var carry = 0;
		for (var i = 0; i < b.length; i++) {
		  r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
		  carry = r >> 26;
		  this.words[i] = r & 0x3ffffff;
		}
		for (; carry !== 0 && i < a.length; i++) {
		  r = (a.words[i] | 0) + carry;
		  carry = r >> 26;
		  this.words[i] = r & 0x3ffffff;
		}
	
		// Copy rest of the words
		if (carry === 0 && i < a.length && a !== this) {
		  for (; i < a.length; i++) {
			this.words[i] = a.words[i];
		  }
		}
	
		this.length = Math.max(this.length, i);
	
		if (a !== this) {
		  this.negative = 1;
		}
	
		return this.strip();
	  };
	
	  // Subtract `num` from `this`
	  BN.prototype.sub = function sub (num) {
		return this.clone().isub(num);
	  };
	
	  function smallMulTo (self, num, out) {
		out.negative = num.negative ^ self.negative;
		var len = (self.length + num.length) | 0;
		out.length = len;
		len = (len - 1) | 0;
	
		// Peel one iteration (compiler can't do it, because of code complexity)
		var a = self.words[0] | 0;
		var b = num.words[0] | 0;
		var r = a * b;
	
		var lo = r & 0x3ffffff;
		var carry = (r / 0x4000000) | 0;
		out.words[0] = lo;
	
		for (var k = 1; k < len; k++) {
		  // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		  // note that ncarry could be >= 0x3ffffff
		  var ncarry = carry >>> 26;
		  var rword = carry & 0x3ffffff;
		  var maxJ = Math.min(k, num.length - 1);
		  for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
			var i = (k - j) | 0;
			a = self.words[i] | 0;
			b = num.words[j] | 0;
			r = a * b + rword;
			ncarry += (r / 0x4000000) | 0;
			rword = r & 0x3ffffff;
		  }
		  out.words[k] = rword | 0;
		  carry = ncarry | 0;
		}
		if (carry !== 0) {
		  out.words[k] = carry | 0;
		} else {
		  out.length--;
		}
	
		return out.strip();
	  }
	
	  // TODO(indutny): it may be reasonable to omit it for users who don't need
	  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
	  // multiplication (like elliptic secp256k1).
	  var comb10MulTo = function comb10MulTo (self, num, out) {
		var a = self.words;
		var b = num.words;
		var o = out.words;
		var c = 0;
		var lo;
		var mid;
		var hi;
		var a0 = a[0] | 0;
		var al0 = a0 & 0x1fff;
		var ah0 = a0 >>> 13;
		var a1 = a[1] | 0;
		var al1 = a1 & 0x1fff;
		var ah1 = a1 >>> 13;
		var a2 = a[2] | 0;
		var al2 = a2 & 0x1fff;
		var ah2 = a2 >>> 13;
		var a3 = a[3] | 0;
		var al3 = a3 & 0x1fff;
		var ah3 = a3 >>> 13;
		var a4 = a[4] | 0;
		var al4 = a4 & 0x1fff;
		var ah4 = a4 >>> 13;
		var a5 = a[5] | 0;
		var al5 = a5 & 0x1fff;
		var ah5 = a5 >>> 13;
		var a6 = a[6] | 0;
		var al6 = a6 & 0x1fff;
		var ah6 = a6 >>> 13;
		var a7 = a[7] | 0;
		var al7 = a7 & 0x1fff;
		var ah7 = a7 >>> 13;
		var a8 = a[8] | 0;
		var al8 = a8 & 0x1fff;
		var ah8 = a8 >>> 13;
		var a9 = a[9] | 0;
		var al9 = a9 & 0x1fff;
		var ah9 = a9 >>> 13;
		var b0 = b[0] | 0;
		var bl0 = b0 & 0x1fff;
		var bh0 = b0 >>> 13;
		var b1 = b[1] | 0;
		var bl1 = b1 & 0x1fff;
		var bh1 = b1 >>> 13;
		var b2 = b[2] | 0;
		var bl2 = b2 & 0x1fff;
		var bh2 = b2 >>> 13;
		var b3 = b[3] | 0;
		var bl3 = b3 & 0x1fff;
		var bh3 = b3 >>> 13;
		var b4 = b[4] | 0;
		var bl4 = b4 & 0x1fff;
		var bh4 = b4 >>> 13;
		var b5 = b[5] | 0;
		var bl5 = b5 & 0x1fff;
		var bh5 = b5 >>> 13;
		var b6 = b[6] | 0;
		var bl6 = b6 & 0x1fff;
		var bh6 = b6 >>> 13;
		var b7 = b[7] | 0;
		var bl7 = b7 & 0x1fff;
		var bh7 = b7 >>> 13;
		var b8 = b[8] | 0;
		var bl8 = b8 & 0x1fff;
		var bh8 = b8 >>> 13;
		var b9 = b[9] | 0;
		var bl9 = b9 & 0x1fff;
		var bh9 = b9 >>> 13;
	
		out.negative = self.negative ^ num.negative;
		out.length = 19;
		/* k = 0 */
		lo = Math.imul(al0, bl0);
		mid = Math.imul(al0, bh0);
		mid = (mid + Math.imul(ah0, bl0)) | 0;
		hi = Math.imul(ah0, bh0);
		var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
		w0 &= 0x3ffffff;
		/* k = 1 */
		lo = Math.imul(al1, bl0);
		mid = Math.imul(al1, bh0);
		mid = (mid + Math.imul(ah1, bl0)) | 0;
		hi = Math.imul(ah1, bh0);
		lo = (lo + Math.imul(al0, bl1)) | 0;
		mid = (mid + Math.imul(al0, bh1)) | 0;
		mid = (mid + Math.imul(ah0, bl1)) | 0;
		hi = (hi + Math.imul(ah0, bh1)) | 0;
		var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
		w1 &= 0x3ffffff;
		/* k = 2 */
		lo = Math.imul(al2, bl0);
		mid = Math.imul(al2, bh0);
		mid = (mid + Math.imul(ah2, bl0)) | 0;
		hi = Math.imul(ah2, bh0);
		lo = (lo + Math.imul(al1, bl1)) | 0;
		mid = (mid + Math.imul(al1, bh1)) | 0;
		mid = (mid + Math.imul(ah1, bl1)) | 0;
		hi = (hi + Math.imul(ah1, bh1)) | 0;
		lo = (lo + Math.imul(al0, bl2)) | 0;
		mid = (mid + Math.imul(al0, bh2)) | 0;
		mid = (mid + Math.imul(ah0, bl2)) | 0;
		hi = (hi + Math.imul(ah0, bh2)) | 0;
		var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
		w2 &= 0x3ffffff;
		/* k = 3 */
		lo = Math.imul(al3, bl0);
		mid = Math.imul(al3, bh0);
		mid = (mid + Math.imul(ah3, bl0)) | 0;
		hi = Math.imul(ah3, bh0);
		lo = (lo + Math.imul(al2, bl1)) | 0;
		mid = (mid + Math.imul(al2, bh1)) | 0;
		mid = (mid + Math.imul(ah2, bl1)) | 0;
		hi = (hi + Math.imul(ah2, bh1)) | 0;
		lo = (lo + Math.imul(al1, bl2)) | 0;
		mid = (mid + Math.imul(al1, bh2)) | 0;
		mid = (mid + Math.imul(ah1, bl2)) | 0;
		hi = (hi + Math.imul(ah1, bh2)) | 0;
		lo = (lo + Math.imul(al0, bl3)) | 0;
		mid = (mid + Math.imul(al0, bh3)) | 0;
		mid = (mid + Math.imul(ah0, bl3)) | 0;
		hi = (hi + Math.imul(ah0, bh3)) | 0;
		var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
		w3 &= 0x3ffffff;
		/* k = 4 */
		lo = Math.imul(al4, bl0);
		mid = Math.imul(al4, bh0);
		mid = (mid + Math.imul(ah4, bl0)) | 0;
		hi = Math.imul(ah4, bh0);
		lo = (lo + Math.imul(al3, bl1)) | 0;
		mid = (mid + Math.imul(al3, bh1)) | 0;
		mid = (mid + Math.imul(ah3, bl1)) | 0;
		hi = (hi + Math.imul(ah3, bh1)) | 0;
		lo = (lo + Math.imul(al2, bl2)) | 0;
		mid = (mid + Math.imul(al2, bh2)) | 0;
		mid = (mid + Math.imul(ah2, bl2)) | 0;
		hi = (hi + Math.imul(ah2, bh2)) | 0;
		lo = (lo + Math.imul(al1, bl3)) | 0;
		mid = (mid + Math.imul(al1, bh3)) | 0;
		mid = (mid + Math.imul(ah1, bl3)) | 0;
		hi = (hi + Math.imul(ah1, bh3)) | 0;
		lo = (lo + Math.imul(al0, bl4)) | 0;
		mid = (mid + Math.imul(al0, bh4)) | 0;
		mid = (mid + Math.imul(ah0, bl4)) | 0;
		hi = (hi + Math.imul(ah0, bh4)) | 0;
		var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
		w4 &= 0x3ffffff;
		/* k = 5 */
		lo = Math.imul(al5, bl0);
		mid = Math.imul(al5, bh0);
		mid = (mid + Math.imul(ah5, bl0)) | 0;
		hi = Math.imul(ah5, bh0);
		lo = (lo + Math.imul(al4, bl1)) | 0;
		mid = (mid + Math.imul(al4, bh1)) | 0;
		mid = (mid + Math.imul(ah4, bl1)) | 0;
		hi = (hi + Math.imul(ah4, bh1)) | 0;
		lo = (lo + Math.imul(al3, bl2)) | 0;
		mid = (mid + Math.imul(al3, bh2)) | 0;
		mid = (mid + Math.imul(ah3, bl2)) | 0;
		hi = (hi + Math.imul(ah3, bh2)) | 0;
		lo = (lo + Math.imul(al2, bl3)) | 0;
		mid = (mid + Math.imul(al2, bh3)) | 0;
		mid = (mid + Math.imul(ah2, bl3)) | 0;
		hi = (hi + Math.imul(ah2, bh3)) | 0;
		lo = (lo + Math.imul(al1, bl4)) | 0;
		mid = (mid + Math.imul(al1, bh4)) | 0;
		mid = (mid + Math.imul(ah1, bl4)) | 0;
		hi = (hi + Math.imul(ah1, bh4)) | 0;
		lo = (lo + Math.imul(al0, bl5)) | 0;
		mid = (mid + Math.imul(al0, bh5)) | 0;
		mid = (mid + Math.imul(ah0, bl5)) | 0;
		hi = (hi + Math.imul(ah0, bh5)) | 0;
		var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
		w5 &= 0x3ffffff;
		/* k = 6 */
		lo = Math.imul(al6, bl0);
		mid = Math.imul(al6, bh0);
		mid = (mid + Math.imul(ah6, bl0)) | 0;
		hi = Math.imul(ah6, bh0);
		lo = (lo + Math.imul(al5, bl1)) | 0;
		mid = (mid + Math.imul(al5, bh1)) | 0;
		mid = (mid + Math.imul(ah5, bl1)) | 0;
		hi = (hi + Math.imul(ah5, bh1)) | 0;
		lo = (lo + Math.imul(al4, bl2)) | 0;
		mid = (mid + Math.imul(al4, bh2)) | 0;
		mid = (mid + Math.imul(ah4, bl2)) | 0;
		hi = (hi + Math.imul(ah4, bh2)) | 0;
		lo = (lo + Math.imul(al3, bl3)) | 0;
		mid = (mid + Math.imul(al3, bh3)) | 0;
		mid = (mid + Math.imul(ah3, bl3)) | 0;
		hi = (hi + Math.imul(ah3, bh3)) | 0;
		lo = (lo + Math.imul(al2, bl4)) | 0;
		mid = (mid + Math.imul(al2, bh4)) | 0;
		mid = (mid + Math.imul(ah2, bl4)) | 0;
		hi = (hi + Math.imul(ah2, bh4)) | 0;
		lo = (lo + Math.imul(al1, bl5)) | 0;
		mid = (mid + Math.imul(al1, bh5)) | 0;
		mid = (mid + Math.imul(ah1, bl5)) | 0;
		hi = (hi + Math.imul(ah1, bh5)) | 0;
		lo = (lo + Math.imul(al0, bl6)) | 0;
		mid = (mid + Math.imul(al0, bh6)) | 0;
		mid = (mid + Math.imul(ah0, bl6)) | 0;
		hi = (hi + Math.imul(ah0, bh6)) | 0;
		var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
		w6 &= 0x3ffffff;
		/* k = 7 */
		lo = Math.imul(al7, bl0);
		mid = Math.imul(al7, bh0);
		mid = (mid + Math.imul(ah7, bl0)) | 0;
		hi = Math.imul(ah7, bh0);
		lo = (lo + Math.imul(al6, bl1)) | 0;
		mid = (mid + Math.imul(al6, bh1)) | 0;
		mid = (mid + Math.imul(ah6, bl1)) | 0;
		hi = (hi + Math.imul(ah6, bh1)) | 0;
		lo = (lo + Math.imul(al5, bl2)) | 0;
		mid = (mid + Math.imul(al5, bh2)) | 0;
		mid = (mid + Math.imul(ah5, bl2)) | 0;
		hi = (hi + Math.imul(ah5, bh2)) | 0;
		lo = (lo + Math.imul(al4, bl3)) | 0;
		mid = (mid + Math.imul(al4, bh3)) | 0;
		mid = (mid + Math.imul(ah4, bl3)) | 0;
		hi = (hi + Math.imul(ah4, bh3)) | 0;
		lo = (lo + Math.imul(al3, bl4)) | 0;
		mid = (mid + Math.imul(al3, bh4)) | 0;
		mid = (mid + Math.imul(ah3, bl4)) | 0;
		hi = (hi + Math.imul(ah3, bh4)) | 0;
		lo = (lo + Math.imul(al2, bl5)) | 0;
		mid = (mid + Math.imul(al2, bh5)) | 0;
		mid = (mid + Math.imul(ah2, bl5)) | 0;
		hi = (hi + Math.imul(ah2, bh5)) | 0;
		lo = (lo + Math.imul(al1, bl6)) | 0;
		mid = (mid + Math.imul(al1, bh6)) | 0;
		mid = (mid + Math.imul(ah1, bl6)) | 0;
		hi = (hi + Math.imul(ah1, bh6)) | 0;
		lo = (lo + Math.imul(al0, bl7)) | 0;
		mid = (mid + Math.imul(al0, bh7)) | 0;
		mid = (mid + Math.imul(ah0, bl7)) | 0;
		hi = (hi + Math.imul(ah0, bh7)) | 0;
		var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
		w7 &= 0x3ffffff;
		/* k = 8 */
		lo = Math.imul(al8, bl0);
		mid = Math.imul(al8, bh0);
		mid = (mid + Math.imul(ah8, bl0)) | 0;
		hi = Math.imul(ah8, bh0);
		lo = (lo + Math.imul(al7, bl1)) | 0;
		mid = (mid + Math.imul(al7, bh1)) | 0;
		mid = (mid + Math.imul(ah7, bl1)) | 0;
		hi = (hi + Math.imul(ah7, bh1)) | 0;
		lo = (lo + Math.imul(al6, bl2)) | 0;
		mid = (mid + Math.imul(al6, bh2)) | 0;
		mid = (mid + Math.imul(ah6, bl2)) | 0;
		hi = (hi + Math.imul(ah6, bh2)) | 0;
		lo = (lo + Math.imul(al5, bl3)) | 0;
		mid = (mid + Math.imul(al5, bh3)) | 0;
		mid = (mid + Math.imul(ah5, bl3)) | 0;
		hi = (hi + Math.imul(ah5, bh3)) | 0;
		lo = (lo + Math.imul(al4, bl4)) | 0;
		mid = (mid + Math.imul(al4, bh4)) | 0;
		mid = (mid + Math.imul(ah4, bl4)) | 0;
		hi = (hi + Math.imul(ah4, bh4)) | 0;
		lo = (lo + Math.imul(al3, bl5)) | 0;
		mid = (mid + Math.imul(al3, bh5)) | 0;
		mid = (mid + Math.imul(ah3, bl5)) | 0;
		hi = (hi + Math.imul(ah3, bh5)) | 0;
		lo = (lo + Math.imul(al2, bl6)) | 0;
		mid = (mid + Math.imul(al2, bh6)) | 0;
		mid = (mid + Math.imul(ah2, bl6)) | 0;
		hi = (hi + Math.imul(ah2, bh6)) | 0;
		lo = (lo + Math.imul(al1, bl7)) | 0;
		mid = (mid + Math.imul(al1, bh7)) | 0;
		mid = (mid + Math.imul(ah1, bl7)) | 0;
		hi = (hi + Math.imul(ah1, bh7)) | 0;
		lo = (lo + Math.imul(al0, bl8)) | 0;
		mid = (mid + Math.imul(al0, bh8)) | 0;
		mid = (mid + Math.imul(ah0, bl8)) | 0;
		hi = (hi + Math.imul(ah0, bh8)) | 0;
		var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
		w8 &= 0x3ffffff;
		/* k = 9 */
		lo = Math.imul(al9, bl0);
		mid = Math.imul(al9, bh0);
		mid = (mid + Math.imul(ah9, bl0)) | 0;
		hi = Math.imul(ah9, bh0);
		lo = (lo + Math.imul(al8, bl1)) | 0;
		mid = (mid + Math.imul(al8, bh1)) | 0;
		mid = (mid + Math.imul(ah8, bl1)) | 0;
		hi = (hi + Math.imul(ah8, bh1)) | 0;
		lo = (lo + Math.imul(al7, bl2)) | 0;
		mid = (mid + Math.imul(al7, bh2)) | 0;
		mid = (mid + Math.imul(ah7, bl2)) | 0;
		hi = (hi + Math.imul(ah7, bh2)) | 0;
		lo = (lo + Math.imul(al6, bl3)) | 0;
		mid = (mid + Math.imul(al6, bh3)) | 0;
		mid = (mid + Math.imul(ah6, bl3)) | 0;
		hi = (hi + Math.imul(ah6, bh3)) | 0;
		lo = (lo + Math.imul(al5, bl4)) | 0;
		mid = (mid + Math.imul(al5, bh4)) | 0;
		mid = (mid + Math.imul(ah5, bl4)) | 0;
		hi = (hi + Math.imul(ah5, bh4)) | 0;
		lo = (lo + Math.imul(al4, bl5)) | 0;
		mid = (mid + Math.imul(al4, bh5)) | 0;
		mid = (mid + Math.imul(ah4, bl5)) | 0;
		hi = (hi + Math.imul(ah4, bh5)) | 0;
		lo = (lo + Math.imul(al3, bl6)) | 0;
		mid = (mid + Math.imul(al3, bh6)) | 0;
		mid = (mid + Math.imul(ah3, bl6)) | 0;
		hi = (hi + Math.imul(ah3, bh6)) | 0;
		lo = (lo + Math.imul(al2, bl7)) | 0;
		mid = (mid + Math.imul(al2, bh7)) | 0;
		mid = (mid + Math.imul(ah2, bl7)) | 0;
		hi = (hi + Math.imul(ah2, bh7)) | 0;
		lo = (lo + Math.imul(al1, bl8)) | 0;
		mid = (mid + Math.imul(al1, bh8)) | 0;
		mid = (mid + Math.imul(ah1, bl8)) | 0;
		hi = (hi + Math.imul(ah1, bh8)) | 0;
		lo = (lo + Math.imul(al0, bl9)) | 0;
		mid = (mid + Math.imul(al0, bh9)) | 0;
		mid = (mid + Math.imul(ah0, bl9)) | 0;
		hi = (hi + Math.imul(ah0, bh9)) | 0;
		var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
		w9 &= 0x3ffffff;
		/* k = 10 */
		lo = Math.imul(al9, bl1);
		mid = Math.imul(al9, bh1);
		mid = (mid + Math.imul(ah9, bl1)) | 0;
		hi = Math.imul(ah9, bh1);
		lo = (lo + Math.imul(al8, bl2)) | 0;
		mid = (mid + Math.imul(al8, bh2)) | 0;
		mid = (mid + Math.imul(ah8, bl2)) | 0;
		hi = (hi + Math.imul(ah8, bh2)) | 0;
		lo = (lo + Math.imul(al7, bl3)) | 0;
		mid = (mid + Math.imul(al7, bh3)) | 0;
		mid = (mid + Math.imul(ah7, bl3)) | 0;
		hi = (hi + Math.imul(ah7, bh3)) | 0;
		lo = (lo + Math.imul(al6, bl4)) | 0;
		mid = (mid + Math.imul(al6, bh4)) | 0;
		mid = (mid + Math.imul(ah6, bl4)) | 0;
		hi = (hi + Math.imul(ah6, bh4)) | 0;
		lo = (lo + Math.imul(al5, bl5)) | 0;
		mid = (mid + Math.imul(al5, bh5)) | 0;
		mid = (mid + Math.imul(ah5, bl5)) | 0;
		hi = (hi + Math.imul(ah5, bh5)) | 0;
		lo = (lo + Math.imul(al4, bl6)) | 0;
		mid = (mid + Math.imul(al4, bh6)) | 0;
		mid = (mid + Math.imul(ah4, bl6)) | 0;
		hi = (hi + Math.imul(ah4, bh6)) | 0;
		lo = (lo + Math.imul(al3, bl7)) | 0;
		mid = (mid + Math.imul(al3, bh7)) | 0;
		mid = (mid + Math.imul(ah3, bl7)) | 0;
		hi = (hi + Math.imul(ah3, bh7)) | 0;
		lo = (lo + Math.imul(al2, bl8)) | 0;
		mid = (mid + Math.imul(al2, bh8)) | 0;
		mid = (mid + Math.imul(ah2, bl8)) | 0;
		hi = (hi + Math.imul(ah2, bh8)) | 0;
		lo = (lo + Math.imul(al1, bl9)) | 0;
		mid = (mid + Math.imul(al1, bh9)) | 0;
		mid = (mid + Math.imul(ah1, bl9)) | 0;
		hi = (hi + Math.imul(ah1, bh9)) | 0;
		var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
		w10 &= 0x3ffffff;
		/* k = 11 */
		lo = Math.imul(al9, bl2);
		mid = Math.imul(al9, bh2);
		mid = (mid + Math.imul(ah9, bl2)) | 0;
		hi = Math.imul(ah9, bh2);
		lo = (lo + Math.imul(al8, bl3)) | 0;
		mid = (mid + Math.imul(al8, bh3)) | 0;
		mid = (mid + Math.imul(ah8, bl3)) | 0;
		hi = (hi + Math.imul(ah8, bh3)) | 0;
		lo = (lo + Math.imul(al7, bl4)) | 0;
		mid = (mid + Math.imul(al7, bh4)) | 0;
		mid = (mid + Math.imul(ah7, bl4)) | 0;
		hi = (hi + Math.imul(ah7, bh4)) | 0;
		lo = (lo + Math.imul(al6, bl5)) | 0;
		mid = (mid + Math.imul(al6, bh5)) | 0;
		mid = (mid + Math.imul(ah6, bl5)) | 0;
		hi = (hi + Math.imul(ah6, bh5)) | 0;
		lo = (lo + Math.imul(al5, bl6)) | 0;
		mid = (mid + Math.imul(al5, bh6)) | 0;
		mid = (mid + Math.imul(ah5, bl6)) | 0;
		hi = (hi + Math.imul(ah5, bh6)) | 0;
		lo = (lo + Math.imul(al4, bl7)) | 0;
		mid = (mid + Math.imul(al4, bh7)) | 0;
		mid = (mid + Math.imul(ah4, bl7)) | 0;
		hi = (hi + Math.imul(ah4, bh7)) | 0;
		lo = (lo + Math.imul(al3, bl8)) | 0;
		mid = (mid + Math.imul(al3, bh8)) | 0;
		mid = (mid + Math.imul(ah3, bl8)) | 0;
		hi = (hi + Math.imul(ah3, bh8)) | 0;
		lo = (lo + Math.imul(al2, bl9)) | 0;
		mid = (mid + Math.imul(al2, bh9)) | 0;
		mid = (mid + Math.imul(ah2, bl9)) | 0;
		hi = (hi + Math.imul(ah2, bh9)) | 0;
		var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
		w11 &= 0x3ffffff;
		/* k = 12 */
		lo = Math.imul(al9, bl3);
		mid = Math.imul(al9, bh3);
		mid = (mid + Math.imul(ah9, bl3)) | 0;
		hi = Math.imul(ah9, bh3);
		lo = (lo + Math.imul(al8, bl4)) | 0;
		mid = (mid + Math.imul(al8, bh4)) | 0;
		mid = (mid + Math.imul(ah8, bl4)) | 0;
		hi = (hi + Math.imul(ah8, bh4)) | 0;
		lo = (lo + Math.imul(al7, bl5)) | 0;
		mid = (mid + Math.imul(al7, bh5)) | 0;
		mid = (mid + Math.imul(ah7, bl5)) | 0;
		hi = (hi + Math.imul(ah7, bh5)) | 0;
		lo = (lo + Math.imul(al6, bl6)) | 0;
		mid = (mid + Math.imul(al6, bh6)) | 0;
		mid = (mid + Math.imul(ah6, bl6)) | 0;
		hi = (hi + Math.imul(ah6, bh6)) | 0;
		lo = (lo + Math.imul(al5, bl7)) | 0;
		mid = (mid + Math.imul(al5, bh7)) | 0;
		mid = (mid + Math.imul(ah5, bl7)) | 0;
		hi = (hi + Math.imul(ah5, bh7)) | 0;
		lo = (lo + Math.imul(al4, bl8)) | 0;
		mid = (mid + Math.imul(al4, bh8)) | 0;
		mid = (mid + Math.imul(ah4, bl8)) | 0;
		hi = (hi + Math.imul(ah4, bh8)) | 0;
		lo = (lo + Math.imul(al3, bl9)) | 0;
		mid = (mid + Math.imul(al3, bh9)) | 0;
		mid = (mid + Math.imul(ah3, bl9)) | 0;
		hi = (hi + Math.imul(ah3, bh9)) | 0;
		var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
		w12 &= 0x3ffffff;
		/* k = 13 */
		lo = Math.imul(al9, bl4);
		mid = Math.imul(al9, bh4);
		mid = (mid + Math.imul(ah9, bl4)) | 0;
		hi = Math.imul(ah9, bh4);
		lo = (lo + Math.imul(al8, bl5)) | 0;
		mid = (mid + Math.imul(al8, bh5)) | 0;
		mid = (mid + Math.imul(ah8, bl5)) | 0;
		hi = (hi + Math.imul(ah8, bh5)) | 0;
		lo = (lo + Math.imul(al7, bl6)) | 0;
		mid = (mid + Math.imul(al7, bh6)) | 0;
		mid = (mid + Math.imul(ah7, bl6)) | 0;
		hi = (hi + Math.imul(ah7, bh6)) | 0;
		lo = (lo + Math.imul(al6, bl7)) | 0;
		mid = (mid + Math.imul(al6, bh7)) | 0;
		mid = (mid + Math.imul(ah6, bl7)) | 0;
		hi = (hi + Math.imul(ah6, bh7)) | 0;
		lo = (lo + Math.imul(al5, bl8)) | 0;
		mid = (mid + Math.imul(al5, bh8)) | 0;
		mid = (mid + Math.imul(ah5, bl8)) | 0;
		hi = (hi + Math.imul(ah5, bh8)) | 0;
		lo = (lo + Math.imul(al4, bl9)) | 0;
		mid = (mid + Math.imul(al4, bh9)) | 0;
		mid = (mid + Math.imul(ah4, bl9)) | 0;
		hi = (hi + Math.imul(ah4, bh9)) | 0;
		var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
		w13 &= 0x3ffffff;
		/* k = 14 */
		lo = Math.imul(al9, bl5);
		mid = Math.imul(al9, bh5);
		mid = (mid + Math.imul(ah9, bl5)) | 0;
		hi = Math.imul(ah9, bh5);
		lo = (lo + Math.imul(al8, bl6)) | 0;
		mid = (mid + Math.imul(al8, bh6)) | 0;
		mid = (mid + Math.imul(ah8, bl6)) | 0;
		hi = (hi + Math.imul(ah8, bh6)) | 0;
		lo = (lo + Math.imul(al7, bl7)) | 0;
		mid = (mid + Math.imul(al7, bh7)) | 0;
		mid = (mid + Math.imul(ah7, bl7)) | 0;
		hi = (hi + Math.imul(ah7, bh7)) | 0;
		lo = (lo + Math.imul(al6, bl8)) | 0;
		mid = (mid + Math.imul(al6, bh8)) | 0;
		mid = (mid + Math.imul(ah6, bl8)) | 0;
		hi = (hi + Math.imul(ah6, bh8)) | 0;
		lo = (lo + Math.imul(al5, bl9)) | 0;
		mid = (mid + Math.imul(al5, bh9)) | 0;
		mid = (mid + Math.imul(ah5, bl9)) | 0;
		hi = (hi + Math.imul(ah5, bh9)) | 0;
		var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
		w14 &= 0x3ffffff;
		/* k = 15 */
		lo = Math.imul(al9, bl6);
		mid = Math.imul(al9, bh6);
		mid = (mid + Math.imul(ah9, bl6)) | 0;
		hi = Math.imul(ah9, bh6);
		lo = (lo + Math.imul(al8, bl7)) | 0;
		mid = (mid + Math.imul(al8, bh7)) | 0;
		mid = (mid + Math.imul(ah8, bl7)) | 0;
		hi = (hi + Math.imul(ah8, bh7)) | 0;
		lo = (lo + Math.imul(al7, bl8)) | 0;
		mid = (mid + Math.imul(al7, bh8)) | 0;
		mid = (mid + Math.imul(ah7, bl8)) | 0;
		hi = (hi + Math.imul(ah7, bh8)) | 0;
		lo = (lo + Math.imul(al6, bl9)) | 0;
		mid = (mid + Math.imul(al6, bh9)) | 0;
		mid = (mid + Math.imul(ah6, bl9)) | 0;
		hi = (hi + Math.imul(ah6, bh9)) | 0;
		var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
		w15 &= 0x3ffffff;
		/* k = 16 */
		lo = Math.imul(al9, bl7);
		mid = Math.imul(al9, bh7);
		mid = (mid + Math.imul(ah9, bl7)) | 0;
		hi = Math.imul(ah9, bh7);
		lo = (lo + Math.imul(al8, bl8)) | 0;
		mid = (mid + Math.imul(al8, bh8)) | 0;
		mid = (mid + Math.imul(ah8, bl8)) | 0;
		hi = (hi + Math.imul(ah8, bh8)) | 0;
		lo = (lo + Math.imul(al7, bl9)) | 0;
		mid = (mid + Math.imul(al7, bh9)) | 0;
		mid = (mid + Math.imul(ah7, bl9)) | 0;
		hi = (hi + Math.imul(ah7, bh9)) | 0;
		var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
		w16 &= 0x3ffffff;
		/* k = 17 */
		lo = Math.imul(al9, bl8);
		mid = Math.imul(al9, bh8);
		mid = (mid + Math.imul(ah9, bl8)) | 0;
		hi = Math.imul(ah9, bh8);
		lo = (lo + Math.imul(al8, bl9)) | 0;
		mid = (mid + Math.imul(al8, bh9)) | 0;
		mid = (mid + Math.imul(ah8, bl9)) | 0;
		hi = (hi + Math.imul(ah8, bh9)) | 0;
		var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
		w17 &= 0x3ffffff;
		/* k = 18 */
		lo = Math.imul(al9, bl9);
		mid = Math.imul(al9, bh9);
		mid = (mid + Math.imul(ah9, bl9)) | 0;
		hi = Math.imul(ah9, bh9);
		var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
		c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
		w18 &= 0x3ffffff;
		o[0] = w0;
		o[1] = w1;
		o[2] = w2;
		o[3] = w3;
		o[4] = w4;
		o[5] = w5;
		o[6] = w6;
		o[7] = w7;
		o[8] = w8;
		o[9] = w9;
		o[10] = w10;
		o[11] = w11;
		o[12] = w12;
		o[13] = w13;
		o[14] = w14;
		o[15] = w15;
		o[16] = w16;
		o[17] = w17;
		o[18] = w18;
		if (c !== 0) {
		  o[19] = c;
		  out.length++;
		}
		return out;
	  };
	
	  // Polyfill comb
	  if (!Math.imul) {
		comb10MulTo = smallMulTo;
	  }
	
	  function bigMulTo (self, num, out) {
		out.negative = num.negative ^ self.negative;
		out.length = self.length + num.length;
	
		var carry = 0;
		var hncarry = 0;
		for (var k = 0; k < out.length - 1; k++) {
		  // Sum all words with the same `i + j = k` and accumulate `ncarry`,
		  // note that ncarry could be >= 0x3ffffff
		  var ncarry = hncarry;
		  hncarry = 0;
		  var rword = carry & 0x3ffffff;
		  var maxJ = Math.min(k, num.length - 1);
		  for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
			var i = k - j;
			var a = self.words[i] | 0;
			var b = num.words[j] | 0;
			var r = a * b;
	
			var lo = r & 0x3ffffff;
			ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
			lo = (lo + rword) | 0;
			rword = lo & 0x3ffffff;
			ncarry = (ncarry + (lo >>> 26)) | 0;
	
			hncarry += ncarry >>> 26;
			ncarry &= 0x3ffffff;
		  }
		  out.words[k] = rword;
		  carry = ncarry;
		  ncarry = hncarry;
		}
		if (carry !== 0) {
		  out.words[k] = carry;
		} else {
		  out.length--;
		}
	
		return out.strip();
	  }
	
	  function jumboMulTo (self, num, out) {
		var fftm = new FFTM();
		return fftm.mulp(self, num, out);
	  }
	
	  BN.prototype.mulTo = function mulTo (num, out) {
		var res;
		var len = this.length + num.length;
		if (this.length === 10 && num.length === 10) {
		  res = comb10MulTo(this, num, out);
		} else if (len < 63) {
		  res = smallMulTo(this, num, out);
		} else if (len < 1024) {
		  res = bigMulTo(this, num, out);
		} else {
		  res = jumboMulTo(this, num, out);
		}
	
		return res;
	  };
	
	  // Cooley-Tukey algorithm for FFT
	  // slightly revisited to rely on looping instead of recursion
	
	  function FFTM (x, y) {
		this.x = x;
		this.y = y;
	  }
	
	  FFTM.prototype.makeRBT = function makeRBT (N) {
		var t = new Array(N);
		var l = BN.prototype._countBits(N) - 1;
		for (var i = 0; i < N; i++) {
		  t[i] = this.revBin(i, l, N);
		}
	
		return t;
	  };
	
	  // Returns binary-reversed representation of `x`
	  FFTM.prototype.revBin = function revBin (x, l, N) {
		if (x === 0 || x === N - 1) return x;
	
		var rb = 0;
		for (var i = 0; i < l; i++) {
		  rb |= (x & 1) << (l - i - 1);
		  x >>= 1;
		}
	
		return rb;
	  };
	
	  // Performs "tweedling" phase, therefore 'emulating'
	  // behaviour of the recursive algorithm
	  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
		for (var i = 0; i < N; i++) {
		  rtws[i] = rws[rbt[i]];
		  itws[i] = iws[rbt[i]];
		}
	  };
	
	  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
		this.permute(rbt, rws, iws, rtws, itws, N);
	
		for (var s = 1; s < N; s <<= 1) {
		  var l = s << 1;
	
		  var rtwdf = Math.cos(2 * Math.PI / l);
		  var itwdf = Math.sin(2 * Math.PI / l);
	
		  for (var p = 0; p < N; p += l) {
			var rtwdf_ = rtwdf;
			var itwdf_ = itwdf;
	
			for (var j = 0; j < s; j++) {
			  var re = rtws[p + j];
			  var ie = itws[p + j];
	
			  var ro = rtws[p + j + s];
			  var io = itws[p + j + s];
	
			  var rx = rtwdf_ * ro - itwdf_ * io;
	
			  io = rtwdf_ * io + itwdf_ * ro;
			  ro = rx;
	
			  rtws[p + j] = re + ro;
			  itws[p + j] = ie + io;
	
			  rtws[p + j + s] = re - ro;
			  itws[p + j + s] = ie - io;
	
			  /* jshint maxdepth : false */
			  if (j !== l) {
				rx = rtwdf * rtwdf_ - itwdf * itwdf_;
	
				itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
				rtwdf_ = rx;
			  }
			}
		  }
		}
	  };
	
	  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
		var N = Math.max(m, n) | 1;
		var odd = N & 1;
		var i = 0;
		for (N = N / 2 | 0; N; N = N >>> 1) {
		  i++;
		}
	
		return 1 << i + 1 + odd;
	  };
	
	  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
		if (N <= 1) return;
	
		for (var i = 0; i < N / 2; i++) {
		  var t = rws[i];
	
		  rws[i] = rws[N - i - 1];
		  rws[N - i - 1] = t;
	
		  t = iws[i];
	
		  iws[i] = -iws[N - i - 1];
		  iws[N - i - 1] = -t;
		}
	  };
	
	  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
		var carry = 0;
		for (var i = 0; i < N / 2; i++) {
		  var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
			Math.round(ws[2 * i] / N) +
			carry;
	
		  ws[i] = w & 0x3ffffff;
	
		  if (w < 0x4000000) {
			carry = 0;
		  } else {
			carry = w / 0x4000000 | 0;
		  }
		}
	
		return ws;
	  };
	
	  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
		var carry = 0;
		for (var i = 0; i < len; i++) {
		  carry = carry + (ws[i] | 0);
	
		  rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
		  rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
		}
	
		// Pad with zeroes
		for (i = 2 * len; i < N; ++i) {
		  rws[i] = 0;
		}
	
		assert(carry === 0);
		assert((carry & ~0x1fff) === 0);
	  };
	
	  FFTM.prototype.stub = function stub (N) {
		var ph = new Array(N);
		for (var i = 0; i < N; i++) {
		  ph[i] = 0;
		}
	
		return ph;
	  };
	
	  FFTM.prototype.mulp = function mulp (x, y, out) {
		var N = 2 * this.guessLen13b(x.length, y.length);
	
		var rbt = this.makeRBT(N);
	
		var _ = this.stub(N);
	
		var rws = new Array(N);
		var rwst = new Array(N);
		var iwst = new Array(N);
	
		var nrws = new Array(N);
		var nrwst = new Array(N);
		var niwst = new Array(N);
	
		var rmws = out.words;
		rmws.length = N;
	
		this.convert13b(x.words, x.length, rws, N);
		this.convert13b(y.words, y.length, nrws, N);
	
		this.transform(rws, _, rwst, iwst, N, rbt);
		this.transform(nrws, _, nrwst, niwst, N, rbt);
	
		for (var i = 0; i < N; i++) {
		  var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
		  iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
		  rwst[i] = rx;
		}
	
		this.conjugate(rwst, iwst, N);
		this.transform(rwst, iwst, rmws, _, N, rbt);
		this.conjugate(rmws, _, N);
		this.normalize13b(rmws, N);
	
		out.negative = x.negative ^ y.negative;
		out.length = x.length + y.length;
		return out.strip();
	  };
	
	  // Multiply `this` by `num`
	  BN.prototype.mul = function mul (num) {
		var out = new BN(null);
		out.words = new Array(this.length + num.length);
		return this.mulTo(num, out);
	  };
	
	  // Multiply employing FFT
	  BN.prototype.mulf = function mulf (num) {
		var out = new BN(null);
		out.words = new Array(this.length + num.length);
		return jumboMulTo(this, num, out);
	  };
	
	  // In-place Multiplication
	  BN.prototype.imul = function imul (num) {
		return this.clone().mulTo(num, this);
	  };
	
	  BN.prototype.imuln = function imuln (num) {
		assert(typeof num === 'number');
		assert(num < 0x4000000);
	
		// Carry
		var carry = 0;
		for (var i = 0; i < this.length; i++) {
		  var w = (this.words[i] | 0) * num;
		  var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
		  carry >>= 26;
		  carry += (w / 0x4000000) | 0;
		  // NOTE: lo is 27bit maximum
		  carry += lo >>> 26;
		  this.words[i] = lo & 0x3ffffff;
		}
	
		if (carry !== 0) {
		  this.words[i] = carry;
		  this.length++;
		}
	
		return this;
	  };
	
	  BN.prototype.muln = function muln (num) {
		return this.clone().imuln(num);
	  };
	
	  // `this` * `this`
	  BN.prototype.sqr = function sqr () {
		return this.mul(this);
	  };
	
	  // `this` * `this` in-place
	  BN.prototype.isqr = function isqr () {
		return this.imul(this.clone());
	  };
	
	  // Math.pow(`this`, `num`)
	  BN.prototype.pow = function pow (num) {
		var w = toBitArray(num);
		if (w.length === 0) return new BN(1);
	
		// Skip leading zeroes
		var res = this;
		for (var i = 0; i < w.length; i++, res = res.sqr()) {
		  if (w[i] !== 0) break;
		}
	
		if (++i < w.length) {
		  for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
			if (w[i] === 0) continue;
	
			res = res.mul(q);
		  }
		}
	
		return res;
	  };
	
	  // Shift-left in-place
	  BN.prototype.iushln = function iushln (bits) {
		assert(typeof bits === 'number' && bits >= 0);
		var r = bits % 26;
		var s = (bits - r) / 26;
		var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
		var i;
	
		if (r !== 0) {
		  var carry = 0;
	
		  for (i = 0; i < this.length; i++) {
			var newCarry = this.words[i] & carryMask;
			var c = ((this.words[i] | 0) - newCarry) << r;
			this.words[i] = c | carry;
			carry = newCarry >>> (26 - r);
		  }
	
		  if (carry) {
			this.words[i] = carry;
			this.length++;
		  }
		}
	
		if (s !== 0) {
		  for (i = this.length - 1; i >= 0; i--) {
			this.words[i + s] = this.words[i];
		  }
	
		  for (i = 0; i < s; i++) {
			this.words[i] = 0;
		  }
	
		  this.length += s;
		}
	
		return this.strip();
	  };
	
	  BN.prototype.ishln = function ishln (bits) {
		// TODO(indutny): implement me
		assert(this.negative === 0);
		return this.iushln(bits);
	  };
	
	  // Shift-right in-place
	  // NOTE: `hint` is a lowest bit before trailing zeroes
	  // NOTE: if `extended` is present - it will be filled with destroyed bits
	  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
		assert(typeof bits === 'number' && bits >= 0);
		var h;
		if (hint) {
		  h = (hint - (hint % 26)) / 26;
		} else {
		  h = 0;
		}
	
		var r = bits % 26;
		var s = Math.min((bits - r) / 26, this.length);
		var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		var maskedWords = extended;
	
		h -= s;
		h = Math.max(0, h);
	
		// Extended mode, copy masked part
		if (maskedWords) {
		  for (var i = 0; i < s; i++) {
			maskedWords.words[i] = this.words[i];
		  }
		  maskedWords.length = s;
		}
	
		if (s === 0) {
		  // No-op, we should not move anything at all
		} else if (this.length > s) {
		  this.length -= s;
		  for (i = 0; i < this.length; i++) {
			this.words[i] = this.words[i + s];
		  }
		} else {
		  this.words[0] = 0;
		  this.length = 1;
		}
	
		var carry = 0;
		for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
		  var word = this.words[i] | 0;
		  this.words[i] = (carry << (26 - r)) | (word >>> r);
		  carry = word & mask;
		}
	
		// Push carried bits as a mask
		if (maskedWords && carry !== 0) {
		  maskedWords.words[maskedWords.length++] = carry;
		}
	
		if (this.length === 0) {
		  this.words[0] = 0;
		  this.length = 1;
		}
	
		return this.strip();
	  };
	
	  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
		// TODO(indutny): implement me
		assert(this.negative === 0);
		return this.iushrn(bits, hint, extended);
	  };
	
	  // Shift-left
	  BN.prototype.shln = function shln (bits) {
		return this.clone().ishln(bits);
	  };
	
	  BN.prototype.ushln = function ushln (bits) {
		return this.clone().iushln(bits);
	  };
	
	  // Shift-right
	  BN.prototype.shrn = function shrn (bits) {
		return this.clone().ishrn(bits);
	  };
	
	  BN.prototype.ushrn = function ushrn (bits) {
		return this.clone().iushrn(bits);
	  };
	
	  // Test if n bit is set
	  BN.prototype.testn = function testn (bit) {
		assert(typeof bit === 'number' && bit >= 0);
		var r = bit % 26;
		var s = (bit - r) / 26;
		var q = 1 << r;
	
		// Fast case: bit is much higher than all existing words
		if (this.length <= s) return false;
	
		// Check bit and return
		var w = this.words[s];
	
		return !!(w & q);
	  };
	
	  // Return only lowers bits of number (in-place)
	  BN.prototype.imaskn = function imaskn (bits) {
		assert(typeof bits === 'number' && bits >= 0);
		var r = bits % 26;
		var s = (bits - r) / 26;
	
		assert(this.negative === 0, 'imaskn works only with positive numbers');
	
		if (this.length <= s) {
		  return this;
		}
	
		if (r !== 0) {
		  s++;
		}
		this.length = Math.min(s, this.length);
	
		if (r !== 0) {
		  var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
		  this.words[this.length - 1] &= mask;
		}
	
		return this.strip();
	  };
	
	  // Return only lowers bits of number
	  BN.prototype.maskn = function maskn (bits) {
		return this.clone().imaskn(bits);
	  };
	
	  // Add plain number `num` to `this`
	  BN.prototype.iaddn = function iaddn (num) {
		assert(typeof num === 'number');
		assert(num < 0x4000000);
		if (num < 0) return this.isubn(-num);
	
		// Possible sign change
		if (this.negative !== 0) {
		  if (this.length === 1 && (this.words[0] | 0) < num) {
			this.words[0] = num - (this.words[0] | 0);
			this.negative = 0;
			return this;
		  }
	
		  this.negative = 0;
		  this.isubn(num);
		  this.negative = 1;
		  return this;
		}
	
		// Add without checks
		return this._iaddn(num);
	  };
	
	  BN.prototype._iaddn = function _iaddn (num) {
		this.words[0] += num;
	
		// Carry
		for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
		  this.words[i] -= 0x4000000;
		  if (i === this.length - 1) {
			this.words[i + 1] = 1;
		  } else {
			this.words[i + 1]++;
		  }
		}
		this.length = Math.max(this.length, i + 1);
	
		return this;
	  };
	
	  // Subtract plain number `num` from `this`
	  BN.prototype.isubn = function isubn (num) {
		assert(typeof num === 'number');
		assert(num < 0x4000000);
		if (num < 0) return this.iaddn(-num);
	
		if (this.negative !== 0) {
		  this.negative = 0;
		  this.iaddn(num);
		  this.negative = 1;
		  return this;
		}
	
		this.words[0] -= num;
	
		if (this.length === 1 && this.words[0] < 0) {
		  this.words[0] = -this.words[0];
		  this.negative = 1;
		} else {
		  // Carry
		  for (var i = 0; i < this.length && this.words[i] < 0; i++) {
			this.words[i] += 0x4000000;
			this.words[i + 1] -= 1;
		  }
		}
	
		return this.strip();
	  };
	
	  BN.prototype.addn = function addn (num) {
		return this.clone().iaddn(num);
	  };
	
	  BN.prototype.subn = function subn (num) {
		return this.clone().isubn(num);
	  };
	
	  BN.prototype.iabs = function iabs () {
		this.negative = 0;
	
		return this;
	  };
	
	  BN.prototype.abs = function abs () {
		return this.clone().iabs();
	  };
	
	  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
		var len = num.length + shift;
		var i;
	
		this._expand(len);
	
		var w;
		var carry = 0;
		for (i = 0; i < num.length; i++) {
		  w = (this.words[i + shift] | 0) + carry;
		  var right = (num.words[i] | 0) * mul;
		  w -= right & 0x3ffffff;
		  carry = (w >> 26) - ((right / 0x4000000) | 0);
		  this.words[i + shift] = w & 0x3ffffff;
		}
		for (; i < this.length - shift; i++) {
		  w = (this.words[i + shift] | 0) + carry;
		  carry = w >> 26;
		  this.words[i + shift] = w & 0x3ffffff;
		}
	
		if (carry === 0) return this.strip();
	
		// Subtraction overflow
		assert(carry === -1);
		carry = 0;
		for (i = 0; i < this.length; i++) {
		  w = -(this.words[i] | 0) + carry;
		  carry = w >> 26;
		  this.words[i] = w & 0x3ffffff;
		}
		this.negative = 1;
	
		return this.strip();
	  };
	
	  BN.prototype._wordDiv = function _wordDiv (num, mode) {
		var shift = this.length - num.length;
	
		var a = this.clone();
		var b = num;
	
		// Normalize
		var bhi = b.words[b.length - 1] | 0;
		var bhiBits = this._countBits(bhi);
		shift = 26 - bhiBits;
		if (shift !== 0) {
		  b = b.ushln(shift);
		  a.iushln(shift);
		  bhi = b.words[b.length - 1] | 0;
		}
	
		// Initialize quotient
		var m = a.length - b.length;
		var q;
	
		if (mode !== 'mod') {
		  q = new BN(null);
		  q.length = m + 1;
		  q.words = new Array(q.length);
		  for (var i = 0; i < q.length; i++) {
			q.words[i] = 0;
		  }
		}
	
		var diff = a.clone()._ishlnsubmul(b, 1, m);
		if (diff.negative === 0) {
		  a = diff;
		  if (q) {
			q.words[m] = 1;
		  }
		}
	
		for (var j = m - 1; j >= 0; j--) {
		  var qj = (a.words[b.length + j] | 0) * 0x4000000 +
			(a.words[b.length + j - 1] | 0);
	
		  // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
		  // (0x7ffffff)
		  qj = Math.min((qj / bhi) | 0, 0x3ffffff);
	
		  a._ishlnsubmul(b, qj, j);
		  while (a.negative !== 0) {
			qj--;
			a.negative = 0;
			a._ishlnsubmul(b, 1, j);
			if (!a.isZero()) {
			  a.negative ^= 1;
			}
		  }
		  if (q) {
			q.words[j] = qj;
		  }
		}
		if (q) {
		  q.strip();
		}
		a.strip();
	
		// Denormalize
		if (mode !== 'div' && shift !== 0) {
		  a.iushrn(shift);
		}
	
		return {
		  div: q || null,
		  mod: a
		};
	  };
	
	  // NOTE: 1) `mode` can be set to `mod` to request mod only,
	  //       to `div` to request div only, or be absent to
	  //       request both div & mod
	  //       2) `positive` is true if unsigned mod is requested
	  BN.prototype.divmod = function divmod (num, mode, positive) {
		assert(!num.isZero());
	
		if (this.isZero()) {
		  return {
			div: new BN(0),
			mod: new BN(0)
		  };
		}
	
		var div, mod, res;
		if (this.negative !== 0 && num.negative === 0) {
		  res = this.neg().divmod(num, mode);
	
		  if (mode !== 'mod') {
			div = res.div.neg();
		  }
	
		  if (mode !== 'div') {
			mod = res.mod.neg();
			if (positive && mod.negative !== 0) {
			  mod.iadd(num);
			}
		  }
	
		  return {
			div: div,
			mod: mod
		  };
		}
	
		if (this.negative === 0 && num.negative !== 0) {
		  res = this.divmod(num.neg(), mode);
	
		  if (mode !== 'mod') {
			div = res.div.neg();
		  }
	
		  return {
			div: div,
			mod: res.mod
		  };
		}
	
		if ((this.negative & num.negative) !== 0) {
		  res = this.neg().divmod(num.neg(), mode);
	
		  if (mode !== 'div') {
			mod = res.mod.neg();
			if (positive && mod.negative !== 0) {
			  mod.isub(num);
			}
		  }
	
		  return {
			div: res.div,
			mod: mod
		  };
		}
	
		// Both numbers are positive at this point
	
		// Strip both numbers to approximate shift value
		if (num.length > this.length || this.cmp(num) < 0) {
		  return {
			div: new BN(0),
			mod: this
		  };
		}
	
		// Very short reduction
		if (num.length === 1) {
		  if (mode === 'div') {
			return {
			  div: this.divn(num.words[0]),
			  mod: null
			};
		  }
	
		  if (mode === 'mod') {
			return {
			  div: null,
			  mod: new BN(this.modn(num.words[0]))
			};
		  }
	
		  return {
			div: this.divn(num.words[0]),
			mod: new BN(this.modn(num.words[0]))
		  };
		}
	
		return this._wordDiv(num, mode);
	  };
	
	  // Find `this` / `num`
	  BN.prototype.div = function div (num) {
		return this.divmod(num, 'div', false).div;
	  };
	
	  // Find `this` % `num`
	  BN.prototype.mod = function mod (num) {
		return this.divmod(num, 'mod', false).mod;
	  };
	
	  BN.prototype.umod = function umod (num) {
		return this.divmod(num, 'mod', true).mod;
	  };
	
	  // Find Round(`this` / `num`)
	  BN.prototype.divRound = function divRound (num) {
		var dm = this.divmod(num);
	
		// Fast case - exact division
		if (dm.mod.isZero()) return dm.div;
	
		var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
	
		var half = num.ushrn(1);
		var r2 = num.andln(1);
		var cmp = mod.cmp(half);
	
		// Round down
		if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
	
		// Round up
		return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
	  };
	
	  BN.prototype.modn = function modn (num) {
		assert(num <= 0x3ffffff);
		var p = (1 << 26) % num;
	
		var acc = 0;
		for (var i = this.length - 1; i >= 0; i--) {
		  acc = (p * acc + (this.words[i] | 0)) % num;
		}
	
		return acc;
	  };
	
	  // In-place division by number
	  BN.prototype.idivn = function idivn (num) {
		assert(num <= 0x3ffffff);
	
		var carry = 0;
		for (var i = this.length - 1; i >= 0; i--) {
		  var w = (this.words[i] | 0) + carry * 0x4000000;
		  this.words[i] = (w / num) | 0;
		  carry = w % num;
		}
	
		return this.strip();
	  };
	
	  BN.prototype.divn = function divn (num) {
		return this.clone().idivn(num);
	  };
	
	  BN.prototype.egcd = function egcd (p) {
		assert(p.negative === 0);
		assert(!p.isZero());
	
		var x = this;
		var y = p.clone();
	
		if (x.negative !== 0) {
		  x = x.umod(p);
		} else {
		  x = x.clone();
		}
	
		// A * x + B * y = x
		var A = new BN(1);
		var B = new BN(0);
	
		// C * x + D * y = y
		var C = new BN(0);
		var D = new BN(1);
	
		var g = 0;
	
		while (x.isEven() && y.isEven()) {
		  x.iushrn(1);
		  y.iushrn(1);
		  ++g;
		}
	
		var yp = y.clone();
		var xp = x.clone();
	
		while (!x.isZero()) {
		  for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		  if (i > 0) {
			x.iushrn(i);
			while (i-- > 0) {
			  if (A.isOdd() || B.isOdd()) {
				A.iadd(yp);
				B.isub(xp);
			  }
	
			  A.iushrn(1);
			  B.iushrn(1);
			}
		  }
	
		  for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		  if (j > 0) {
			y.iushrn(j);
			while (j-- > 0) {
			  if (C.isOdd() || D.isOdd()) {
				C.iadd(yp);
				D.isub(xp);
			  }
	
			  C.iushrn(1);
			  D.iushrn(1);
			}
		  }
	
		  if (x.cmp(y) >= 0) {
			x.isub(y);
			A.isub(C);
			B.isub(D);
		  } else {
			y.isub(x);
			C.isub(A);
			D.isub(B);
		  }
		}
	
		return {
		  a: C,
		  b: D,
		  gcd: y.iushln(g)
		};
	  };
	
	  // This is reduced incarnation of the binary EEA
	  // above, designated to invert members of the
	  // _prime_ fields F(p) at a maximal speed
	  BN.prototype._invmp = function _invmp (p) {
		assert(p.negative === 0);
		assert(!p.isZero());
	
		var a = this;
		var b = p.clone();
	
		if (a.negative !== 0) {
		  a = a.umod(p);
		} else {
		  a = a.clone();
		}
	
		var x1 = new BN(1);
		var x2 = new BN(0);
	
		var delta = b.clone();
	
		while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
		  for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
		  if (i > 0) {
			a.iushrn(i);
			while (i-- > 0) {
			  if (x1.isOdd()) {
				x1.iadd(delta);
			  }
	
			  x1.iushrn(1);
			}
		  }
	
		  for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
		  if (j > 0) {
			b.iushrn(j);
			while (j-- > 0) {
			  if (x2.isOdd()) {
				x2.iadd(delta);
			  }
	
			  x2.iushrn(1);
			}
		  }
	
		  if (a.cmp(b) >= 0) {
			a.isub(b);
			x1.isub(x2);
		  } else {
			b.isub(a);
			x2.isub(x1);
		  }
		}
	
		var res;
		if (a.cmpn(1) === 0) {
		  res = x1;
		} else {
		  res = x2;
		}
	
		if (res.cmpn(0) < 0) {
		  res.iadd(p);
		}
	
		return res;
	  };
	
	  BN.prototype.gcd = function gcd (num) {
		if (this.isZero()) return num.abs();
		if (num.isZero()) return this.abs();
	
		var a = this.clone();
		var b = num.clone();
		a.negative = 0;
		b.negative = 0;
	
		// Remove common factor of two
		for (var shift = 0; a.isEven() && b.isEven(); shift++) {
		  a.iushrn(1);
		  b.iushrn(1);
		}
	
		do {
		  while (a.isEven()) {
			a.iushrn(1);
		  }
		  while (b.isEven()) {
			b.iushrn(1);
		  }
	
		  var r = a.cmp(b);
		  if (r < 0) {
			// Swap `a` and `b` to make `a` always bigger than `b`
			var t = a;
			a = b;
			b = t;
		  } else if (r === 0 || b.cmpn(1) === 0) {
			break;
		  }
	
		  a.isub(b);
		} while (true);
	
		return b.iushln(shift);
	  };
	
	  // Invert number in the field F(num)
	  BN.prototype.invm = function invm (num) {
		return this.egcd(num).a.umod(num);
	  };
	
	  BN.prototype.isEven = function isEven () {
		return (this.words[0] & 1) === 0;
	  };
	
	  BN.prototype.isOdd = function isOdd () {
		return (this.words[0] & 1) === 1;
	  };
	
	  // And first word and num
	  BN.prototype.andln = function andln (num) {
		return this.words[0] & num;
	  };
	
	  // Increment at the bit position in-line
	  BN.prototype.bincn = function bincn (bit) {
		assert(typeof bit === 'number');
		var r = bit % 26;
		var s = (bit - r) / 26;
		var q = 1 << r;
	
		// Fast case: bit is much higher than all existing words
		if (this.length <= s) {
		  this._expand(s + 1);
		  this.words[s] |= q;
		  return this;
		}
	
		// Add bit and propagate, if needed
		var carry = q;
		for (var i = s; carry !== 0 && i < this.length; i++) {
		  var w = this.words[i] | 0;
		  w += carry;
		  carry = w >>> 26;
		  w &= 0x3ffffff;
		  this.words[i] = w;
		}
		if (carry !== 0) {
		  this.words[i] = carry;
		  this.length++;
		}
		return this;
	  };
	
	  BN.prototype.isZero = function isZero () {
		return this.length === 1 && this.words[0] === 0;
	  };
	
	  BN.prototype.cmpn = function cmpn (num) {
		var negative = num < 0;
	
		if (this.negative !== 0 && !negative) return -1;
		if (this.negative === 0 && negative) return 1;
	
		this.strip();
	
		var res;
		if (this.length > 1) {
		  res = 1;
		} else {
		  if (negative) {
			num = -num;
		  }
	
		  assert(num <= 0x3ffffff, 'Number is too big');
	
		  var w = this.words[0] | 0;
		  res = w === num ? 0 : w < num ? -1 : 1;
		}
		if (this.negative !== 0) return -res | 0;
		return res;
	  };
	
	  // Compare two numbers and return:
	  // 1 - if `this` > `num`
	  // 0 - if `this` == `num`
	  // -1 - if `this` < `num`
	  BN.prototype.cmp = function cmp (num) {
		if (this.negative !== 0 && num.negative === 0) return -1;
		if (this.negative === 0 && num.negative !== 0) return 1;
	
		var res = this.ucmp(num);
		if (this.negative !== 0) return -res | 0;
		return res;
	  };
	
	  // Unsigned comparison
	  BN.prototype.ucmp = function ucmp (num) {
		// At this point both numbers have the same sign
		if (this.length > num.length) return 1;
		if (this.length < num.length) return -1;
	
		var res = 0;
		for (var i = this.length - 1; i >= 0; i--) {
		  var a = this.words[i] | 0;
		  var b = num.words[i] | 0;
	
		  if (a === b) continue;
		  if (a < b) {
			res = -1;
		  } else if (a > b) {
			res = 1;
		  }
		  break;
		}
		return res;
	  };
	
	  BN.prototype.gtn = function gtn (num) {
		return this.cmpn(num) === 1;
	  };
	
	  BN.prototype.gt = function gt (num) {
		return this.cmp(num) === 1;
	  };
	
	  BN.prototype.gten = function gten (num) {
		return this.cmpn(num) >= 0;
	  };
	
	  BN.prototype.gte = function gte (num) {
		return this.cmp(num) >= 0;
	  };
	
	  BN.prototype.ltn = function ltn (num) {
		return this.cmpn(num) === -1;
	  };
	
	  BN.prototype.lt = function lt (num) {
		return this.cmp(num) === -1;
	  };
	
	  BN.prototype.lten = function lten (num) {
		return this.cmpn(num) <= 0;
	  };
	
	  BN.prototype.lte = function lte (num) {
		return this.cmp(num) <= 0;
	  };
	
	  BN.prototype.eqn = function eqn (num) {
		return this.cmpn(num) === 0;
	  };
	
	  BN.prototype.eq = function eq (num) {
		return this.cmp(num) === 0;
	  };
	
	  //
	  // A reduce context, could be using montgomery or something better, depending
	  // on the `m` itself.
	  //
	  BN.red = function red (num) {
		return new Red(num);
	  };
	
	  BN.prototype.toRed = function toRed (ctx) {
		assert(!this.red, 'Already a number in reduction context');
		assert(this.negative === 0, 'red works only with positives');
		return ctx.convertTo(this)._forceRed(ctx);
	  };
	
	  BN.prototype.fromRed = function fromRed () {
		assert(this.red, 'fromRed works only with numbers in reduction context');
		return this.red.convertFrom(this);
	  };
	
	  BN.prototype._forceRed = function _forceRed (ctx) {
		this.red = ctx;
		return this;
	  };
	
	  BN.prototype.forceRed = function forceRed (ctx) {
		assert(!this.red, 'Already a number in reduction context');
		return this._forceRed(ctx);
	  };
	
	  BN.prototype.redAdd = function redAdd (num) {
		assert(this.red, 'redAdd works only with red numbers');
		return this.red.add(this, num);
	  };
	
	  BN.prototype.redIAdd = function redIAdd (num) {
		assert(this.red, 'redIAdd works only with red numbers');
		return this.red.iadd(this, num);
	  };
	
	  BN.prototype.redSub = function redSub (num) {
		assert(this.red, 'redSub works only with red numbers');
		return this.red.sub(this, num);
	  };
	
	  BN.prototype.redISub = function redISub (num) {
		assert(this.red, 'redISub works only with red numbers');
		return this.red.isub(this, num);
	  };
	
	  BN.prototype.redShl = function redShl (num) {
		assert(this.red, 'redShl works only with red numbers');
		return this.red.shl(this, num);
	  };
	
	  BN.prototype.redMul = function redMul (num) {
		assert(this.red, 'redMul works only with red numbers');
		this.red._verify2(this, num);
		return this.red.mul(this, num);
	  };
	
	  BN.prototype.redIMul = function redIMul (num) {
		assert(this.red, 'redMul works only with red numbers');
		this.red._verify2(this, num);
		return this.red.imul(this, num);
	  };
	
	  BN.prototype.redSqr = function redSqr () {
		assert(this.red, 'redSqr works only with red numbers');
		this.red._verify1(this);
		return this.red.sqr(this);
	  };
	
	  BN.prototype.redISqr = function redISqr () {
		assert(this.red, 'redISqr works only with red numbers');
		this.red._verify1(this);
		return this.red.isqr(this);
	  };
	
	  // Square root over p
	  BN.prototype.redSqrt = function redSqrt () {
		assert(this.red, 'redSqrt works only with red numbers');
		this.red._verify1(this);
		return this.red.sqrt(this);
	  };
	
	  BN.prototype.redInvm = function redInvm () {
		assert(this.red, 'redInvm works only with red numbers');
		this.red._verify1(this);
		return this.red.invm(this);
	  };
	
	  // Return negative clone of `this` % `red modulo`
	  BN.prototype.redNeg = function redNeg () {
		assert(this.red, 'redNeg works only with red numbers');
		this.red._verify1(this);
		return this.red.neg(this);
	  };
	
	  BN.prototype.redPow = function redPow (num) {
		assert(this.red && !num.red, 'redPow(normalNum)');
		this.red._verify1(this);
		return this.red.pow(this, num);
	  };
	
	  // Prime numbers with efficient reduction
	  var primes = {
		k256: null,
		p224: null,
		p192: null,
		p25519: null
	  };
	
	  // Pseudo-Mersenne prime
	  function MPrime (name, p) {
		// P = 2 ^ N - K
		this.name = name;
		this.p = new BN(p, 16);
		this.n = this.p.bitLength();
		this.k = new BN(1).iushln(this.n).isub(this.p);
	
		this.tmp = this._tmp();
	  }
	
	  MPrime.prototype._tmp = function _tmp () {
		var tmp = new BN(null);
		tmp.words = new Array(Math.ceil(this.n / 13));
		return tmp;
	  };
	
	  MPrime.prototype.ireduce = function ireduce (num) {
		// Assumes that `num` is less than `P^2`
		// num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
		var r = num;
		var rlen;
	
		do {
		  this.split(r, this.tmp);
		  r = this.imulK(r);
		  r = r.iadd(this.tmp);
		  rlen = r.bitLength();
		} while (rlen > this.n);
	
		var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
		if (cmp === 0) {
		  r.words[0] = 0;
		  r.length = 1;
		} else if (cmp > 0) {
		  r.isub(this.p);
		} else {
		  r.strip();
		}
	
		return r;
	  };
	
	  MPrime.prototype.split = function split (input, out) {
		input.iushrn(this.n, 0, out);
	  };
	
	  MPrime.prototype.imulK = function imulK (num) {
		return num.imul(this.k);
	  };
	
	  function K256 () {
		MPrime.call(
		  this,
		  'k256',
		  'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
	  }
	  inherits(K256, MPrime);
	
	  K256.prototype.split = function split (input, output) {
		// 256 = 9 * 26 + 22
		var mask = 0x3fffff;
	
		var outLen = Math.min(input.length, 9);
		for (var i = 0; i < outLen; i++) {
		  output.words[i] = input.words[i];
		}
		output.length = outLen;
	
		if (input.length <= 9) {
		  input.words[0] = 0;
		  input.length = 1;
		  return;
		}
	
		// Shift by 9 limbs
		var prev = input.words[9];
		output.words[output.length++] = prev & mask;
	
		for (i = 10; i < input.length; i++) {
		  var next = input.words[i] | 0;
		  input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
		  prev = next;
		}
		prev >>>= 22;
		input.words[i - 10] = prev;
		if (prev === 0 && input.length > 10) {
		  input.length -= 10;
		} else {
		  input.length -= 9;
		}
	  };
	
	  K256.prototype.imulK = function imulK (num) {
		// K = 0x1000003d1 = [ 0x40, 0x3d1 ]
		num.words[num.length] = 0;
		num.words[num.length + 1] = 0;
		num.length += 2;
	
		// bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
		var lo = 0;
		for (var i = 0; i < num.length; i++) {
		  var w = num.words[i] | 0;
		  lo += w * 0x3d1;
		  num.words[i] = lo & 0x3ffffff;
		  lo = w * 0x40 + ((lo / 0x4000000) | 0);
		}
	
		// Fast length reduction
		if (num.words[num.length - 1] === 0) {
		  num.length--;
		  if (num.words[num.length - 1] === 0) {
			num.length--;
		  }
		}
		return num;
	  };
	
	  function P224 () {
		MPrime.call(
		  this,
		  'p224',
		  'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
	  }
	  inherits(P224, MPrime);
	
	  function P192 () {
		MPrime.call(
		  this,
		  'p192',
		  'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
	  }
	  inherits(P192, MPrime);
	
	  function P25519 () {
		// 2 ^ 255 - 19
		MPrime.call(
		  this,
		  '25519',
		  '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
	  }
	  inherits(P25519, MPrime);
	
	  P25519.prototype.imulK = function imulK (num) {
		// K = 0x13
		var carry = 0;
		for (var i = 0; i < num.length; i++) {
		  var hi = (num.words[i] | 0) * 0x13 + carry;
		  var lo = hi & 0x3ffffff;
		  hi >>>= 26;
	
		  num.words[i] = lo;
		  carry = hi;
		}
		if (carry !== 0) {
		  num.words[num.length++] = carry;
		}
		return num;
	  };
	
	  // Exported mostly for testing purposes, use plain name instead
	  BN._prime = function prime (name) {
		// Cached version of prime
		if (primes[name]) return primes[name];
	
		var prime;
		if (name === 'k256') {
		  prime = new K256();
		} else if (name === 'p224') {
		  prime = new P224();
		} else if (name === 'p192') {
		  prime = new P192();
		} else if (name === 'p25519') {
		  prime = new P25519();
		} else {
		  throw new Error('Unknown prime ' + name);
		}
		primes[name] = prime;
	
		return prime;
	  };
	
	  //
	  // Base reduction engine
	  //
	  function Red (m) {
		if (typeof m === 'string') {
		  var prime = BN._prime(m);
		  this.m = prime.p;
		  this.prime = prime;
		} else {
		  assert(m.gtn(1), 'modulus must be greater than 1');
		  this.m = m;
		  this.prime = null;
		}
	  }
	
	  Red.prototype._verify1 = function _verify1 (a) {
		assert(a.negative === 0, 'red works only with positives');
		assert(a.red, 'red works only with red numbers');
	  };
	
	  Red.prototype._verify2 = function _verify2 (a, b) {
		assert((a.negative | b.negative) === 0, 'red works only with positives');
		assert(a.red && a.red === b.red,
		  'red works only with red numbers');
	  };
	
	  Red.prototype.imod = function imod (a) {
		if (this.prime) return this.prime.ireduce(a)._forceRed(this);
		return a.umod(this.m)._forceRed(this);
	  };
	
	  Red.prototype.neg = function neg (a) {
		if (a.isZero()) {
		  return a.clone();
		}
	
		return this.m.sub(a)._forceRed(this);
	  };
	
	  Red.prototype.add = function add (a, b) {
		this._verify2(a, b);
	
		var res = a.add(b);
		if (res.cmp(this.m) >= 0) {
		  res.isub(this.m);
		}
		return res._forceRed(this);
	  };
	
	  Red.prototype.iadd = function iadd (a, b) {
		this._verify2(a, b);
	
		var res = a.iadd(b);
		if (res.cmp(this.m) >= 0) {
		  res.isub(this.m);
		}
		return res;
	  };
	
	  Red.prototype.sub = function sub (a, b) {
		this._verify2(a, b);
	
		var res = a.sub(b);
		if (res.cmpn(0) < 0) {
		  res.iadd(this.m);
		}
		return res._forceRed(this);
	  };
	
	  Red.prototype.isub = function isub (a, b) {
		this._verify2(a, b);
	
		var res = a.isub(b);
		if (res.cmpn(0) < 0) {
		  res.iadd(this.m);
		}
		return res;
	  };
	
	  Red.prototype.shl = function shl (a, num) {
		this._verify1(a);
		return this.imod(a.ushln(num));
	  };
	
	  Red.prototype.imul = function imul (a, b) {
		this._verify2(a, b);
		return this.imod(a.imul(b));
	  };
	
	  Red.prototype.mul = function mul (a, b) {
		this._verify2(a, b);
		return this.imod(a.mul(b));
	  };
	
	  Red.prototype.isqr = function isqr (a) {
		return this.imul(a, a.clone());
	  };
	
	  Red.prototype.sqr = function sqr (a) {
		return this.mul(a, a);
	  };
	
	  Red.prototype.sqrt = function sqrt (a) {
		if (a.isZero()) return a.clone();
	
		var mod3 = this.m.andln(3);
		assert(mod3 % 2 === 1);
	
		// Fast case
		if (mod3 === 3) {
		  var pow = this.m.add(new BN(1)).iushrn(2);
		  return this.pow(a, pow);
		}
	
		// Tonelli-Shanks algorithm (Totally unoptimized and slow)
		//
		// Find Q and S, that Q * 2 ^ S = (P - 1)
		var q = this.m.subn(1);
		var s = 0;
		while (!q.isZero() && q.andln(1) === 0) {
		  s++;
		  q.iushrn(1);
		}
		assert(!q.isZero());
	
		var one = new BN(1).toRed(this);
		var nOne = one.redNeg();
	
		// Find quadratic non-residue
		// NOTE: Max is such because of generalized Riemann hypothesis.
		var lpow = this.m.subn(1).iushrn(1);
		var z = this.m.bitLength();
		z = new BN(2 * z * z).toRed(this);
	
		while (this.pow(z, lpow).cmp(nOne) !== 0) {
		  z.redIAdd(nOne);
		}
	
		var c = this.pow(z, q);
		var r = this.pow(a, q.addn(1).iushrn(1));
		var t = this.pow(a, q);
		var m = s;
		while (t.cmp(one) !== 0) {
		  var tmp = t;
		  for (var i = 0; tmp.cmp(one) !== 0; i++) {
			tmp = tmp.redSqr();
		  }
		  assert(i < m);
		  var b = this.pow(c, new BN(1).iushln(m - i - 1));
	
		  r = r.redMul(b);
		  c = b.redSqr();
		  t = t.redMul(c);
		  m = i;
		}
	
		return r;
	  };
	
	  Red.prototype.invm = function invm (a) {
		var inv = a._invmp(this.m);
		if (inv.negative !== 0) {
		  inv.negative = 0;
		  return this.imod(inv).redNeg();
		} else {
		  return this.imod(inv);
		}
	  };
	
	  Red.prototype.pow = function pow (a, num) {
		if (num.isZero()) return new BN(1);
		if (num.cmpn(1) === 0) return a.clone();
	
		var windowSize = 4;
		var wnd = new Array(1 << windowSize);
		wnd[0] = new BN(1).toRed(this);
		wnd[1] = a;
		for (var i = 2; i < wnd.length; i++) {
		  wnd[i] = this.mul(wnd[i - 1], a);
		}
	
		var res = wnd[0];
		var current = 0;
		var currentLen = 0;
		var start = num.bitLength() % 26;
		if (start === 0) {
		  start = 26;
		}
	
		for (i = num.length - 1; i >= 0; i--) {
		  var word = num.words[i];
		  for (var j = start - 1; j >= 0; j--) {
			var bit = (word >> j) & 1;
			if (res !== wnd[0]) {
			  res = this.sqr(res);
			}
	
			if (bit === 0 && current === 0) {
			  currentLen = 0;
			  continue;
			}
	
			current <<= 1;
			current |= bit;
			currentLen++;
			if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
	
			res = this.mul(res, wnd[current]);
			currentLen = 0;
			current = 0;
		  }
		  start = 26;
		}
	
		return res;
	  };
	
	  Red.prototype.convertTo = function convertTo (num) {
		var r = num.umod(this.m);
	
		return r === num ? r.clone() : r;
	  };
	
	  Red.prototype.convertFrom = function convertFrom (num) {
		var res = num.clone();
		res.red = null;
		return res;
	  };
	
	  //
	  // Montgomery method engine
	  //
	
	  BN.mont = function mont (num) {
		return new Mont(num);
	  };
	
	  function Mont (m) {
		Red.call(this, m);
	
		this.shift = this.m.bitLength();
		if (this.shift % 26 !== 0) {
		  this.shift += 26 - (this.shift % 26);
		}
	
		this.r = new BN(1).iushln(this.shift);
		this.r2 = this.imod(this.r.sqr());
		this.rinv = this.r._invmp(this.m);
	
		this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
		this.minv = this.minv.umod(this.r);
		this.minv = this.r.sub(this.minv);
	  }
	  inherits(Mont, Red);
	
	  Mont.prototype.convertTo = function convertTo (num) {
		return this.imod(num.ushln(this.shift));
	  };
	
	  Mont.prototype.convertFrom = function convertFrom (num) {
		var r = this.imod(num.mul(this.rinv));
		r.red = null;
		return r;
	  };
	
	  Mont.prototype.imul = function imul (a, b) {
		if (a.isZero() || b.isZero()) {
		  a.words[0] = 0;
		  a.length = 1;
		  return a;
		}
	
		var t = a.imul(b);
		var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		var u = t.isub(c).iushrn(this.shift);
		var res = u;
	
		if (u.cmp(this.m) >= 0) {
		  res = u.isub(this.m);
		} else if (u.cmpn(0) < 0) {
		  res = u.iadd(this.m);
		}
	
		return res._forceRed(this);
	  };
	
	  Mont.prototype.mul = function mul (a, b) {
		if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
	
		var t = a.mul(b);
		var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
		var u = t.isub(c).iushrn(this.shift);
		var res = u;
		if (u.cmp(this.m) >= 0) {
		  res = u.isub(this.m);
		} else if (u.cmpn(0) < 0) {
		  res = u.iadd(this.m);
		}
	
		return res._forceRed(this);
	  };
	
	  Mont.prototype.invm = function invm (a) {
		// (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
		var res = this.imod(a._invmp(this.m).mul(this.r2));
		return res._forceRed(this);
	  };
	})(typeof module === 'undefined' || module, this);
	
	},{}],45:[function(require,module,exports){
	'use strict'
	var Buffer = require('safe-buffer').Buffer
	var Transform = require('readable-stream').Transform
	var inherits = require('inherits')
	
	function throwIfNotStringOrBuffer (val, prefix) {
	  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
		throw new TypeError(prefix + ' must be a string or a buffer')
	  }
	}
	
	function HashBase (blockSize) {
	  Transform.call(this)
	
	  this._block = Buffer.allocUnsafe(blockSize)
	  this._blockSize = blockSize
	  this._blockOffset = 0
	  this._length = [0, 0, 0, 0]
	
	  this._finalized = false
	}
	
	inherits(HashBase, Transform)
	
	HashBase.prototype._transform = function (chunk, encoding, callback) {
	  var error = null
	  try {
		this.update(chunk, encoding)
	  } catch (err) {
		error = err
	  }
	
	  callback(error)
	}
	
	HashBase.prototype._flush = function (callback) {
	  var error = null
	  try {
		this.push(this.digest())
	  } catch (err) {
		error = err
	  }
	
	  callback(error)
	}
	
	HashBase.prototype.update = function (data, encoding) {
	  throwIfNotStringOrBuffer(data, 'Data')
	  if (this._finalized) throw new Error('Digest already called')
	  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)
	
	  // consume data
	  var block = this._block
	  var offset = 0
	  while (this._blockOffset + data.length - offset >= this._blockSize) {
		for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
		this._update()
		this._blockOffset = 0
	  }
	  while (offset < data.length) block[this._blockOffset++] = data[offset++]
	
	  // update length
	  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
		this._length[j] += carry
		carry = (this._length[j] / 0x0100000000) | 0
		if (carry > 0) this._length[j] -= 0x0100000000 * carry
	  }
	
	  return this
	}
	
	HashBase.prototype._update = function () {
	  throw new Error('_update is not implemented')
	}
	
	HashBase.prototype.digest = function (encoding) {
	  if (this._finalized) throw new Error('Digest already called')
	  this._finalized = true
	
	  var digest = this._digest()
	  if (encoding !== undefined) digest = digest.toString(encoding)
	
	  // reset state
	  this._block.fill(0)
	  this._blockOffset = 0
	  for (var i = 0; i < 4; ++i) this._length[i] = 0
	
	  return digest
	}
	
	HashBase.prototype._digest = function () {
	  throw new Error('_digest is not implemented')
	}
	
	module.exports = HashBase
	
	},{"inherits":59,"readable-stream":88,"safe-buffer":92}],46:[function(require,module,exports){
	var hash = exports;
	
	hash.utils = require('./hash/utils');
	hash.common = require('./hash/common');
	hash.sha = require('./hash/sha');
	hash.ripemd = require('./hash/ripemd');
	hash.hmac = require('./hash/hmac');
	
	// Proxy hash functions to the main object
	hash.sha1 = hash.sha.sha1;
	hash.sha256 = hash.sha.sha256;
	hash.sha224 = hash.sha.sha224;
	hash.sha384 = hash.sha.sha384;
	hash.sha512 = hash.sha.sha512;
	hash.ripemd160 = hash.ripemd.ripemd160;
	
	},{"./hash/common":47,"./hash/hmac":48,"./hash/ripemd":49,"./hash/sha":50,"./hash/utils":57}],47:[function(require,module,exports){
	'use strict';
	
	var utils = require('./utils');
	var assert = require('minimalistic-assert');
	
	function BlockHash() {
	  this.pending = null;
	  this.pendingTotal = 0;
	  this.blockSize = this.constructor.blockSize;
	  this.outSize = this.constructor.outSize;
	  this.hmacStrength = this.constructor.hmacStrength;
	  this.padLength = this.constructor.padLength / 8;
	  this.endian = 'big';
	
	  this._delta8 = this.blockSize / 8;
	  this._delta32 = this.blockSize / 32;
	}
	exports.BlockHash = BlockHash;
	
	BlockHash.prototype.update = function update(msg, enc) {
	  // Convert message to array, pad it, and join into 32bit blocks
	  msg = utils.toArray(msg, enc);
	  if (!this.pending)
		this.pending = msg;
	  else
		this.pending = this.pending.concat(msg);
	  this.pendingTotal += msg.length;
	
	  // Enough data, try updating
	  if (this.pending.length >= this._delta8) {
		msg = this.pending;
	
		// Process pending data in blocks
		var r = msg.length % this._delta8;
		this.pending = msg.slice(msg.length - r, msg.length);
		if (this.pending.length === 0)
		  this.pending = null;
	
		msg = utils.join32(msg, 0, msg.length - r, this.endian);
		for (var i = 0; i < msg.length; i += this._delta32)
		  this._update(msg, i, i + this._delta32);
	  }
	
	  return this;
	};
	
	BlockHash.prototype.digest = function digest(enc) {
	  this.update(this._pad());
	  assert(this.pending === null);
	
	  return this._digest(enc);
	};
	
	BlockHash.prototype._pad = function pad() {
	  var len = this.pendingTotal;
	  var bytes = this._delta8;
	  var k = bytes - ((len + this.padLength) % bytes);
	  var res = new Array(k + this.padLength);
	  res[0] = 0x80;
	  for (var i = 1; i < k; i++)
		res[i] = 0;
	
	  // Append length
	  len <<= 3;
	  if (this.endian === 'big') {
		for (var t = 8; t < this.padLength; t++)
		  res[i++] = 0;
	
		res[i++] = 0;
		res[i++] = 0;
		res[i++] = 0;
		res[i++] = 0;
		res[i++] = (len >>> 24) & 0xff;
		res[i++] = (len >>> 16) & 0xff;
		res[i++] = (len >>> 8) & 0xff;
		res[i++] = len & 0xff;
	  } else {
		res[i++] = len & 0xff;
		res[i++] = (len >>> 8) & 0xff;
		res[i++] = (len >>> 16) & 0xff;
		res[i++] = (len >>> 24) & 0xff;
		res[i++] = 0;
		res[i++] = 0;
		res[i++] = 0;
		res[i++] = 0;
	
		for (t = 8; t < this.padLength; t++)
		  res[i++] = 0;
	  }
	
	  return res;
	};
	
	},{"./utils":57,"minimalistic-assert":69}],48:[function(require,module,exports){
	'use strict';
	
	var utils = require('./utils');
	var assert = require('minimalistic-assert');
	
	function Hmac(hash, key, enc) {
	  if (!(this instanceof Hmac))
		return new Hmac(hash, key, enc);
	  this.Hash = hash;
	  this.blockSize = hash.blockSize / 8;
	  this.outSize = hash.outSize / 8;
	  this.inner = null;
	  this.outer = null;
	
	  this._init(utils.toArray(key, enc));
	}
	module.exports = Hmac;
	
	Hmac.prototype._init = function init(key) {
	  // Shorten key, if needed
	  if (key.length > this.blockSize)
		key = new this.Hash().update(key).digest();
	  assert(key.length <= this.blockSize);
	
	  // Add padding to key
	  for (var i = key.length; i < this.blockSize; i++)
		key.push(0);
	
	  for (i = 0; i < key.length; i++)
		key[i] ^= 0x36;
	  this.inner = new this.Hash().update(key);
	
	  // 0x36 ^ 0x5c = 0x6a
	  for (i = 0; i < key.length; i++)
		key[i] ^= 0x6a;
	  this.outer = new this.Hash().update(key);
	};
	
	Hmac.prototype.update = function update(msg, enc) {
	  this.inner.update(msg, enc);
	  return this;
	};
	
	Hmac.prototype.digest = function digest(enc) {
	  this.outer.update(this.inner.digest());
	  return this.outer.digest(enc);
	};
	
	},{"./utils":57,"minimalistic-assert":69}],49:[function(require,module,exports){
	'use strict';
	
	var utils = require('./utils');
	var common = require('./common');
	
	var rotl32 = utils.rotl32;
	var sum32 = utils.sum32;
	var sum32_3 = utils.sum32_3;
	var sum32_4 = utils.sum32_4;
	var BlockHash = common.BlockHash;
	
	function RIPEMD160() {
	  if (!(this instanceof RIPEMD160))
		return new RIPEMD160();
	
	  BlockHash.call(this);
	
	  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
	  this.endian = 'little';
	}
	utils.inherits(RIPEMD160, BlockHash);
	exports.ripemd160 = RIPEMD160;
	
	RIPEMD160.blockSize = 512;
	RIPEMD160.outSize = 160;
	RIPEMD160.hmacStrength = 192;
	RIPEMD160.padLength = 64;
	
	RIPEMD160.prototype._update = function update(msg, start) {
	  var A = this.h[0];
	  var B = this.h[1];
	  var C = this.h[2];
	  var D = this.h[3];
	  var E = this.h[4];
	  var Ah = A;
	  var Bh = B;
	  var Ch = C;
	  var Dh = D;
	  var Eh = E;
	  for (var j = 0; j < 80; j++) {
		var T = sum32(
		  rotl32(
			sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
			s[j]),
		  E);
		A = E;
		E = D;
		D = rotl32(C, 10);
		C = B;
		B = T;
		T = sum32(
		  rotl32(
			sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
			sh[j]),
		  Eh);
		Ah = Eh;
		Eh = Dh;
		Dh = rotl32(Ch, 10);
		Ch = Bh;
		Bh = T;
	  }
	  T = sum32_3(this.h[1], C, Dh);
	  this.h[1] = sum32_3(this.h[2], D, Eh);
	  this.h[2] = sum32_3(this.h[3], E, Ah);
	  this.h[3] = sum32_3(this.h[4], A, Bh);
	  this.h[4] = sum32_3(this.h[0], B, Ch);
	  this.h[0] = T;
	};
	
	RIPEMD160.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
		return utils.toHex32(this.h, 'little');
	  else
		return utils.split32(this.h, 'little');
	};
	
	function f(j, x, y, z) {
	  if (j <= 15)
		return x ^ y ^ z;
	  else if (j <= 31)
		return (x & y) | ((~x) & z);
	  else if (j <= 47)
		return (x | (~y)) ^ z;
	  else if (j <= 63)
		return (x & z) | (y & (~z));
	  else
		return x ^ (y | (~z));
	}
	
	function K(j) {
	  if (j <= 15)
		return 0x00000000;
	  else if (j <= 31)
		return 0x5a827999;
	  else if (j <= 47)
		return 0x6ed9eba1;
	  else if (j <= 63)
		return 0x8f1bbcdc;
	  else
		return 0xa953fd4e;
	}
	
	function Kh(j) {
	  if (j <= 15)
		return 0x50a28be6;
	  else if (j <= 31)
		return 0x5c4dd124;
	  else if (j <= 47)
		return 0x6d703ef3;
	  else if (j <= 63)
		return 0x7a6d76e9;
	  else
		return 0x00000000;
	}
	
	var r = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	];
	
	var rh = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	];
	
	var s = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	];
	
	var sh = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	];
	
	},{"./common":47,"./utils":57}],50:[function(require,module,exports){
	'use strict';
	
	exports.sha1 = require('./sha/1');
	exports.sha224 = require('./sha/224');
	exports.sha256 = require('./sha/256');
	exports.sha384 = require('./sha/384');
	exports.sha512 = require('./sha/512');
	
	},{"./sha/1":51,"./sha/224":52,"./sha/256":53,"./sha/384":54,"./sha/512":55}],51:[function(require,module,exports){
	'use strict';
	
	var utils = require('../utils');
	var common = require('../common');
	var shaCommon = require('./common');
	
	var rotl32 = utils.rotl32;
	var sum32 = utils.sum32;
	var sum32_5 = utils.sum32_5;
	var ft_1 = shaCommon.ft_1;
	var BlockHash = common.BlockHash;
	
	var sha1_K = [
	  0x5A827999, 0x6ED9EBA1,
	  0x8F1BBCDC, 0xCA62C1D6
	];
	
	function SHA1() {
	  if (!(this instanceof SHA1))
		return new SHA1();
	
	  BlockHash.call(this);
	  this.h = [
		0x67452301, 0xefcdab89, 0x98badcfe,
		0x10325476, 0xc3d2e1f0 ];
	  this.W = new Array(80);
	}
	
	utils.inherits(SHA1, BlockHash);
	module.exports = SHA1;
	
	SHA1.blockSize = 512;
	SHA1.outSize = 160;
	SHA1.hmacStrength = 80;
	SHA1.padLength = 64;
	
	SHA1.prototype._update = function _update(msg, start) {
	  var W = this.W;
	
	  for (var i = 0; i < 16; i++)
		W[i] = msg[start + i];
	
	  for(; i < W.length; i++)
		W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
	
	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	
	  for (i = 0; i < W.length; i++) {
		var s = ~~(i / 20);
		var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
		e = d;
		d = c;
		c = rotl32(b, 30);
		b = a;
		a = t;
	  }
	
	  this.h[0] = sum32(this.h[0], a);
	  this.h[1] = sum32(this.h[1], b);
	  this.h[2] = sum32(this.h[2], c);
	  this.h[3] = sum32(this.h[3], d);
	  this.h[4] = sum32(this.h[4], e);
	};
	
	SHA1.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
		return utils.toHex32(this.h, 'big');
	  else
		return utils.split32(this.h, 'big');
	};
	
	},{"../common":47,"../utils":57,"./common":56}],52:[function(require,module,exports){
	'use strict';
	
	var utils = require('../utils');
	var SHA256 = require('./256');
	
	function SHA224() {
	  if (!(this instanceof SHA224))
		return new SHA224();
	
	  SHA256.call(this);
	  this.h = [
		0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
		0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
	}
	utils.inherits(SHA224, SHA256);
	module.exports = SHA224;
	
	SHA224.blockSize = 512;
	SHA224.outSize = 224;
	SHA224.hmacStrength = 192;
	SHA224.padLength = 64;
	
	SHA224.prototype._digest = function digest(enc) {
	  // Just truncate output
	  if (enc === 'hex')
		return utils.toHex32(this.h.slice(0, 7), 'big');
	  else
		return utils.split32(this.h.slice(0, 7), 'big');
	};
	
	
	},{"../utils":57,"./256":53}],53:[function(require,module,exports){
	'use strict';
	
	var utils = require('../utils');
	var common = require('../common');
	var shaCommon = require('./common');
	var assert = require('minimalistic-assert');
	
	var sum32 = utils.sum32;
	var sum32_4 = utils.sum32_4;
	var sum32_5 = utils.sum32_5;
	var ch32 = shaCommon.ch32;
	var maj32 = shaCommon.maj32;
	var s0_256 = shaCommon.s0_256;
	var s1_256 = shaCommon.s1_256;
	var g0_256 = shaCommon.g0_256;
	var g1_256 = shaCommon.g1_256;
	
	var BlockHash = common.BlockHash;
	
	var sha256_K = [
	  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	];
	
	function SHA256() {
	  if (!(this instanceof SHA256))
		return new SHA256();
	
	  BlockHash.call(this);
	  this.h = [
		0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
		0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	  ];
	  this.k = sha256_K;
	  this.W = new Array(64);
	}
	utils.inherits(SHA256, BlockHash);
	module.exports = SHA256;
	
	SHA256.blockSize = 512;
	SHA256.outSize = 256;
	SHA256.hmacStrength = 192;
	SHA256.padLength = 64;
	
	SHA256.prototype._update = function _update(msg, start) {
	  var W = this.W;
	
	  for (var i = 0; i < 16; i++)
		W[i] = msg[start + i];
	  for (; i < W.length; i++)
		W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
	
	  var a = this.h[0];
	  var b = this.h[1];
	  var c = this.h[2];
	  var d = this.h[3];
	  var e = this.h[4];
	  var f = this.h[5];
	  var g = this.h[6];
	  var h = this.h[7];
	
	  assert(this.k.length === W.length);
	  for (i = 0; i < W.length; i++) {
		var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
		var T2 = sum32(s0_256(a), maj32(a, b, c));
		h = g;
		g = f;
		f = e;
		e = sum32(d, T1);
		d = c;
		c = b;
		b = a;
		a = sum32(T1, T2);
	  }
	
	  this.h[0] = sum32(this.h[0], a);
	  this.h[1] = sum32(this.h[1], b);
	  this.h[2] = sum32(this.h[2], c);
	  this.h[3] = sum32(this.h[3], d);
	  this.h[4] = sum32(this.h[4], e);
	  this.h[5] = sum32(this.h[5], f);
	  this.h[6] = sum32(this.h[6], g);
	  this.h[7] = sum32(this.h[7], h);
	};
	
	SHA256.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
		return utils.toHex32(this.h, 'big');
	  else
		return utils.split32(this.h, 'big');
	};
	
	},{"../common":47,"../utils":57,"./common":56,"minimalistic-assert":69}],54:[function(require,module,exports){
	'use strict';
	
	var utils = require('../utils');
	
	var SHA512 = require('./512');
	
	function SHA384() {
	  if (!(this instanceof SHA384))
		return new SHA384();
	
	  SHA512.call(this);
	  this.h = [
		0xcbbb9d5d, 0xc1059ed8,
		0x629a292a, 0x367cd507,
		0x9159015a, 0x3070dd17,
		0x152fecd8, 0xf70e5939,
		0x67332667, 0xffc00b31,
		0x8eb44a87, 0x68581511,
		0xdb0c2e0d, 0x64f98fa7,
		0x47b5481d, 0xbefa4fa4 ];
	}
	utils.inherits(SHA384, SHA512);
	module.exports = SHA384;
	
	SHA384.blockSize = 1024;
	SHA384.outSize = 384;
	SHA384.hmacStrength = 192;
	SHA384.padLength = 128;
	
	SHA384.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
		return utils.toHex32(this.h.slice(0, 12), 'big');
	  else
		return utils.split32(this.h.slice(0, 12), 'big');
	};
	
	},{"../utils":57,"./512":55}],55:[function(require,module,exports){
	'use strict';
	
	var utils = require('../utils');
	var common = require('../common');
	var assert = require('minimalistic-assert');
	
	var rotr64_hi = utils.rotr64_hi;
	var rotr64_lo = utils.rotr64_lo;
	var shr64_hi = utils.shr64_hi;
	var shr64_lo = utils.shr64_lo;
	var sum64 = utils.sum64;
	var sum64_hi = utils.sum64_hi;
	var sum64_lo = utils.sum64_lo;
	var sum64_4_hi = utils.sum64_4_hi;
	var sum64_4_lo = utils.sum64_4_lo;
	var sum64_5_hi = utils.sum64_5_hi;
	var sum64_5_lo = utils.sum64_5_lo;
	
	var BlockHash = common.BlockHash;
	
	var sha512_K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	];
	
	function SHA512() {
	  if (!(this instanceof SHA512))
		return new SHA512();
	
	  BlockHash.call(this);
	  this.h = [
		0x6a09e667, 0xf3bcc908,
		0xbb67ae85, 0x84caa73b,
		0x3c6ef372, 0xfe94f82b,
		0xa54ff53a, 0x5f1d36f1,
		0x510e527f, 0xade682d1,
		0x9b05688c, 0x2b3e6c1f,
		0x1f83d9ab, 0xfb41bd6b,
		0x5be0cd19, 0x137e2179 ];
	  this.k = sha512_K;
	  this.W = new Array(160);
	}
	utils.inherits(SHA512, BlockHash);
	module.exports = SHA512;
	
	SHA512.blockSize = 1024;
	SHA512.outSize = 512;
	SHA512.hmacStrength = 192;
	SHA512.padLength = 128;
	
	SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
	  var W = this.W;
	
	  // 32 x 32bit words
	  for (var i = 0; i < 32; i++)
		W[i] = msg[start + i];
	  for (; i < W.length; i += 2) {
		var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
		var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
		var c1_hi = W[i - 14];  // i - 7
		var c1_lo = W[i - 13];
		var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
		var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
		var c3_hi = W[i - 32];  // i - 16
		var c3_lo = W[i - 31];
	
		W[i] = sum64_4_hi(
		  c0_hi, c0_lo,
		  c1_hi, c1_lo,
		  c2_hi, c2_lo,
		  c3_hi, c3_lo);
		W[i + 1] = sum64_4_lo(
		  c0_hi, c0_lo,
		  c1_hi, c1_lo,
		  c2_hi, c2_lo,
		  c3_hi, c3_lo);
	  }
	};
	
	SHA512.prototype._update = function _update(msg, start) {
	  this._prepareBlock(msg, start);
	
	  var W = this.W;
	
	  var ah = this.h[0];
	  var al = this.h[1];
	  var bh = this.h[2];
	  var bl = this.h[3];
	  var ch = this.h[4];
	  var cl = this.h[5];
	  var dh = this.h[6];
	  var dl = this.h[7];
	  var eh = this.h[8];
	  var el = this.h[9];
	  var fh = this.h[10];
	  var fl = this.h[11];
	  var gh = this.h[12];
	  var gl = this.h[13];
	  var hh = this.h[14];
	  var hl = this.h[15];
	
	  assert(this.k.length === W.length);
	  for (var i = 0; i < W.length; i += 2) {
		var c0_hi = hh;
		var c0_lo = hl;
		var c1_hi = s1_512_hi(eh, el);
		var c1_lo = s1_512_lo(eh, el);
		var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
		var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
		var c3_hi = this.k[i];
		var c3_lo = this.k[i + 1];
		var c4_hi = W[i];
		var c4_lo = W[i + 1];
	
		var T1_hi = sum64_5_hi(
		  c0_hi, c0_lo,
		  c1_hi, c1_lo,
		  c2_hi, c2_lo,
		  c3_hi, c3_lo,
		  c4_hi, c4_lo);
		var T1_lo = sum64_5_lo(
		  c0_hi, c0_lo,
		  c1_hi, c1_lo,
		  c2_hi, c2_lo,
		  c3_hi, c3_lo,
		  c4_hi, c4_lo);
	
		c0_hi = s0_512_hi(ah, al);
		c0_lo = s0_512_lo(ah, al);
		c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
		c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
	
		var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
		var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
	
		hh = gh;
		hl = gl;
	
		gh = fh;
		gl = fl;
	
		fh = eh;
		fl = el;
	
		eh = sum64_hi(dh, dl, T1_hi, T1_lo);
		el = sum64_lo(dl, dl, T1_hi, T1_lo);
	
		dh = ch;
		dl = cl;
	
		ch = bh;
		cl = bl;
	
		bh = ah;
		bl = al;
	
		ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
		al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
	  }
	
	  sum64(this.h, 0, ah, al);
	  sum64(this.h, 2, bh, bl);
	  sum64(this.h, 4, ch, cl);
	  sum64(this.h, 6, dh, dl);
	  sum64(this.h, 8, eh, el);
	  sum64(this.h, 10, fh, fl);
	  sum64(this.h, 12, gh, gl);
	  sum64(this.h, 14, hh, hl);
	};
	
	SHA512.prototype._digest = function digest(enc) {
	  if (enc === 'hex')
		return utils.toHex32(this.h, 'big');
	  else
		return utils.split32(this.h, 'big');
	};
	
	function ch64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ ((~xh) & zh);
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function ch64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ ((~xl) & zl);
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function maj64_hi(xh, xl, yh, yl, zh) {
	  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function maj64_lo(xh, xl, yh, yl, zh, zl) {
	  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function s0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 28);
	  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
	  var c2_hi = rotr64_hi(xl, xh, 7);  // 39
	
	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function s0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 28);
	  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
	  var c2_lo = rotr64_lo(xl, xh, 7);  // 39
	
	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function s1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 14);
	  var c1_hi = rotr64_hi(xh, xl, 18);
	  var c2_hi = rotr64_hi(xl, xh, 9);  // 41
	
	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function s1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 14);
	  var c1_lo = rotr64_lo(xh, xl, 18);
	  var c2_lo = rotr64_lo(xl, xh, 9);  // 41
	
	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function g0_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 1);
	  var c1_hi = rotr64_hi(xh, xl, 8);
	  var c2_hi = shr64_hi(xh, xl, 7);
	
	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function g0_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 1);
	  var c1_lo = rotr64_lo(xh, xl, 8);
	  var c2_lo = shr64_lo(xh, xl, 7);
	
	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function g1_512_hi(xh, xl) {
	  var c0_hi = rotr64_hi(xh, xl, 19);
	  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
	  var c2_hi = shr64_hi(xh, xl, 6);
	
	  var r = c0_hi ^ c1_hi ^ c2_hi;
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	function g1_512_lo(xh, xl) {
	  var c0_lo = rotr64_lo(xh, xl, 19);
	  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
	  var c2_lo = shr64_lo(xh, xl, 6);
	
	  var r = c0_lo ^ c1_lo ^ c2_lo;
	  if (r < 0)
		r += 0x100000000;
	  return r;
	}
	
	},{"../common":47,"../utils":57,"minimalistic-assert":69}],56:[function(require,module,exports){
	'use strict';
	
	var utils = require('../utils');
	var rotr32 = utils.rotr32;
	
	function ft_1(s, x, y, z) {
	  if (s === 0)
		return ch32(x, y, z);
	  if (s === 1 || s === 3)
		return p32(x, y, z);
	  if (s === 2)
		return maj32(x, y, z);
	}
	exports.ft_1 = ft_1;
	
	function ch32(x, y, z) {
	  return (x & y) ^ ((~x) & z);
	}
	exports.ch32 = ch32;
	
	function maj32(x, y, z) {
	  return (x & y) ^ (x & z) ^ (y & z);
	}
	exports.maj32 = maj32;
	
	function p32(x, y, z) {
	  return x ^ y ^ z;
	}
	exports.p32 = p32;
	
	function s0_256(x) {
	  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
	}
	exports.s0_256 = s0_256;
	
	function s1_256(x) {
	  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
	}
	exports.s1_256 = s1_256;
	
	function g0_256(x) {
	  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
	}
	exports.g0_256 = g0_256;
	
	function g1_256(x) {
	  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
	}
	exports.g1_256 = g1_256;
	
	},{"../utils":57}],57:[function(require,module,exports){
	'use strict';
	
	var assert = require('minimalistic-assert');
	var inherits = require('inherits');
	
	exports.inherits = inherits;
	
	function isSurrogatePair(msg, i) {
	  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
		return false;
	  }
	  if (i < 0 || i + 1 >= msg.length) {
		return false;
	  }
	  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
	}
	
	function toArray(msg, enc) {
	  if (Array.isArray(msg))
		return msg.slice();
	  if (!msg)
		return [];
	  var res = [];
	  if (typeof msg === 'string') {
		if (!enc) {
		  // Inspired by stringToUtf8ByteArray() in closure-library by Google
		  // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
		  // Apache License 2.0
		  // https://github.com/google/closure-library/blob/master/LICENSE
		  var p = 0;
		  for (var i = 0; i < msg.length; i++) {
			var c = msg.charCodeAt(i);
			if (c < 128) {
			  res[p++] = c;
			} else if (c < 2048) {
			  res[p++] = (c >> 6) | 192;
			  res[p++] = (c & 63) | 128;
			} else if (isSurrogatePair(msg, i)) {
			  c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
			  res[p++] = (c >> 18) | 240;
			  res[p++] = ((c >> 12) & 63) | 128;
			  res[p++] = ((c >> 6) & 63) | 128;
			  res[p++] = (c & 63) | 128;
			} else {
			  res[p++] = (c >> 12) | 224;
			  res[p++] = ((c >> 6) & 63) | 128;
			  res[p++] = (c & 63) | 128;
			}
		  }
		} else if (enc === 'hex') {
		  msg = msg.replace(/[^a-z0-9]+/ig, '');
		  if (msg.length % 2 !== 0)
			msg = '0' + msg;
		  for (i = 0; i < msg.length; i += 2)
			res.push(parseInt(msg[i] + msg[i + 1], 16));
		}
	  } else {
		for (i = 0; i < msg.length; i++)
		  res[i] = msg[i] | 0;
	  }
	  return res;
	}
	exports.toArray = toArray;
	
	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
		res += zero2(msg[i].toString(16));
	  return res;
	}
	exports.toHex = toHex;
	
	function htonl(w) {
	  var res = (w >>> 24) |
				((w >>> 8) & 0xff00) |
				((w << 8) & 0xff0000) |
				((w & 0xff) << 24);
	  return res >>> 0;
	}
	exports.htonl = htonl;
	
	function toHex32(msg, endian) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++) {
		var w = msg[i];
		if (endian === 'little')
		  w = htonl(w);
		res += zero8(w.toString(16));
	  }
	  return res;
	}
	exports.toHex32 = toHex32;
	
	function zero2(word) {
	  if (word.length === 1)
		return '0' + word;
	  else
		return word;
	}
	exports.zero2 = zero2;
	
	function zero8(word) {
	  if (word.length === 7)
		return '0' + word;
	  else if (word.length === 6)
		return '00' + word;
	  else if (word.length === 5)
		return '000' + word;
	  else if (word.length === 4)
		return '0000' + word;
	  else if (word.length === 3)
		return '00000' + word;
	  else if (word.length === 2)
		return '000000' + word;
	  else if (word.length === 1)
		return '0000000' + word;
	  else
		return word;
	}
	exports.zero8 = zero8;
	
	function join32(msg, start, end, endian) {
	  var len = end - start;
	  assert(len % 4 === 0);
	  var res = new Array(len / 4);
	  for (var i = 0, k = start; i < res.length; i++, k += 4) {
		var w;
		if (endian === 'big')
		  w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
		else
		  w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
		res[i] = w >>> 0;
	  }
	  return res;
	}
	exports.join32 = join32;
	
	function split32(msg, endian) {
	  var res = new Array(msg.length * 4);
	  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
		var m = msg[i];
		if (endian === 'big') {
		  res[k] = m >>> 24;
		  res[k + 1] = (m >>> 16) & 0xff;
		  res[k + 2] = (m >>> 8) & 0xff;
		  res[k + 3] = m & 0xff;
		} else {
		  res[k + 3] = m >>> 24;
		  res[k + 2] = (m >>> 16) & 0xff;
		  res[k + 1] = (m >>> 8) & 0xff;
		  res[k] = m & 0xff;
		}
	  }
	  return res;
	}
	exports.split32 = split32;
	
	function rotr32(w, b) {
	  return (w >>> b) | (w << (32 - b));
	}
	exports.rotr32 = rotr32;
	
	function rotl32(w, b) {
	  return (w << b) | (w >>> (32 - b));
	}
	exports.rotl32 = rotl32;
	
	function sum32(a, b) {
	  return (a + b) >>> 0;
	}
	exports.sum32 = sum32;
	
	function sum32_3(a, b, c) {
	  return (a + b + c) >>> 0;
	}
	exports.sum32_3 = sum32_3;
	
	function sum32_4(a, b, c, d) {
	  return (a + b + c + d) >>> 0;
	}
	exports.sum32_4 = sum32_4;
	
	function sum32_5(a, b, c, d, e) {
	  return (a + b + c + d + e) >>> 0;
	}
	exports.sum32_5 = sum32_5;
	
	function sum64(buf, pos, ah, al) {
	  var bh = buf[pos];
	  var bl = buf[pos + 1];
	
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  buf[pos] = hi >>> 0;
	  buf[pos + 1] = lo;
	}
	exports.sum64 = sum64;
	
	function sum64_hi(ah, al, bh, bl) {
	  var lo = (al + bl) >>> 0;
	  var hi = (lo < al ? 1 : 0) + ah + bh;
	  return hi >>> 0;
	}
	exports.sum64_hi = sum64_hi;
	
	function sum64_lo(ah, al, bh, bl) {
	  var lo = al + bl;
	  return lo >>> 0;
	}
	exports.sum64_lo = sum64_lo;
	
	function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	
	  var hi = ah + bh + ch + dh + carry;
	  return hi >>> 0;
	}
	exports.sum64_4_hi = sum64_4_hi;
	
	function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
	  var lo = al + bl + cl + dl;
	  return lo >>> 0;
	}
	exports.sum64_4_lo = sum64_4_lo;
	
	function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var carry = 0;
	  var lo = al;
	  lo = (lo + bl) >>> 0;
	  carry += lo < al ? 1 : 0;
	  lo = (lo + cl) >>> 0;
	  carry += lo < cl ? 1 : 0;
	  lo = (lo + dl) >>> 0;
	  carry += lo < dl ? 1 : 0;
	  lo = (lo + el) >>> 0;
	  carry += lo < el ? 1 : 0;
	
	  var hi = ah + bh + ch + dh + eh + carry;
	  return hi >>> 0;
	}
	exports.sum64_5_hi = sum64_5_hi;
	
	function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
	  var lo = al + bl + cl + dl + el;
	
	  return lo >>> 0;
	}
	exports.sum64_5_lo = sum64_5_lo;
	
	function rotr64_hi(ah, al, num) {
	  var r = (al << (32 - num)) | (ah >>> num);
	  return r >>> 0;
	}
	exports.rotr64_hi = rotr64_hi;
	
	function rotr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	exports.rotr64_lo = rotr64_lo;
	
	function shr64_hi(ah, al, num) {
	  return ah >>> num;
	}
	exports.shr64_hi = shr64_hi;
	
	function shr64_lo(ah, al, num) {
	  var r = (ah << (32 - num)) | (al >>> num);
	  return r >>> 0;
	}
	exports.shr64_lo = shr64_lo;
	
	},{"inherits":59,"minimalistic-assert":69}],58:[function(require,module,exports){
	'use strict';
	
	var hash = require('hash.js');
	var utils = require('minimalistic-crypto-utils');
	var assert = require('minimalistic-assert');
	
	function HmacDRBG(options) {
	  if (!(this instanceof HmacDRBG))
		return new HmacDRBG(options);
	  this.hash = options.hash;
	  this.predResist = !!options.predResist;
	
	  this.outLen = this.hash.outSize;
	  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
	
	  this._reseed = null;
	  this.reseedInterval = null;
	  this.K = null;
	  this.V = null;
	
	  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
	  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
	  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
	  assert(entropy.length >= (this.minEntropy / 8),
			 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	  this._init(entropy, nonce, pers);
	}
	module.exports = HmacDRBG;
	
	HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
	  var seed = entropy.concat(nonce).concat(pers);
	
	  this.K = new Array(this.outLen / 8);
	  this.V = new Array(this.outLen / 8);
	  for (var i = 0; i < this.V.length; i++) {
		this.K[i] = 0x00;
		this.V[i] = 0x01;
	  }
	
	  this._update(seed);
	  this._reseed = 1;
	  this.reseedInterval = 0x1000000000000;  // 2^48
	};
	
	HmacDRBG.prototype._hmac = function hmac() {
	  return new hash.hmac(this.hash, this.K);
	};
	
	HmacDRBG.prototype._update = function update(seed) {
	  var kmac = this._hmac()
					 .update(this.V)
					 .update([ 0x00 ]);
	  if (seed)
		kmac = kmac.update(seed);
	  this.K = kmac.digest();
	  this.V = this._hmac().update(this.V).digest();
	  if (!seed)
		return;
	
	  this.K = this._hmac()
				   .update(this.V)
				   .update([ 0x01 ])
				   .update(seed)
				   .digest();
	  this.V = this._hmac().update(this.V).digest();
	};
	
	HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
	  // Optional entropy enc
	  if (typeof entropyEnc !== 'string') {
		addEnc = add;
		add = entropyEnc;
		entropyEnc = null;
	  }
	
	  entropy = utils.toArray(entropy, entropyEnc);
	  add = utils.toArray(add, addEnc);
	
	  assert(entropy.length >= (this.minEntropy / 8),
			 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
	
	  this._update(entropy.concat(add || []));
	  this._reseed = 1;
	};
	
	HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
	  if (this._reseed > this.reseedInterval)
		throw new Error('Reseed is required');
	
	  // Optional encoding
	  if (typeof enc !== 'string') {
		addEnc = add;
		add = enc;
		enc = null;
	  }
	
	  // Optional additional data
	  if (add) {
		add = utils.toArray(add, addEnc || 'hex');
		this._update(add);
	  }
	
	  var temp = [];
	  while (temp.length < len) {
		this.V = this._hmac().update(this.V).digest();
		temp = temp.concat(this.V);
	  }
	
	  var res = temp.slice(0, len);
	  this._update(add);
	  this._reseed++;
	  return utils.encode(res, enc);
	};
	
	},{"hash.js":46,"minimalistic-assert":69,"minimalistic-crypto-utils":70}],59:[function(require,module,exports){
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
		if (superCtor) {
		  ctor.super_ = superCtor
		  ctor.prototype = Object.create(superCtor.prototype, {
			constructor: {
			  value: ctor,
			  enumerable: false,
			  writable: true,
			  configurable: true
			}
		  })
		}
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
		if (superCtor) {
		  ctor.super_ = superCtor
		  var TempCtor = function () {}
		  TempCtor.prototype = superCtor.prototype
		  ctor.prototype = new TempCtor()
		  ctor.prototype.constructor = ctor
		}
	  }
	}
	
	},{}],60:[function(require,module,exports){
	/**
	 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
	 * @param {String} str the string input value
	 * @return {Boolean} a boolean if it is or is not hex prefixed
	 * @throws if the str input is not a string
	 */
	module.exports = function isHexPrefixed(str) {
	  if (typeof str !== 'string') {
		throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + (typeof str) + ", while checking isHexPrefixed.");
	  }
	
	  return str.slice(0, 2) === '0x';
	}
	
	},{}],61:[function(require,module,exports){
	(function (process,global){(function (){
	/**
	 * [js-sha3]{@link https://github.com/emn178/js-sha3}
	 *
	 * @version 0.8.0
	 * @author Chen, Yi-Cyuan [emn178@gmail.com]
	 * @copyright Chen, Yi-Cyuan 2015-2018
	 * @license MIT
	 */
	/*jslint bitwise: true */
	(function () {
	  'use strict';
	
	  var INPUT_ERROR = 'input is invalid type';
	  var FINALIZE_ERROR = 'finalize already called';
	  var WINDOW = typeof window === 'object';
	  var root = WINDOW ? window : {};
	  if (root.JS_SHA3_NO_WINDOW) {
		WINDOW = false;
	  }
	  var WEB_WORKER = !WINDOW && typeof self === 'object';
	  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
	  if (NODE_JS) {
		root = global;
	  } else if (WEB_WORKER) {
		root = self;
	  }
	  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
	  var AMD = typeof define === 'function' && define.amd;
	  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
	  var HEX_CHARS = '0123456789abcdef'.split('');
	  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
	  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
	  var KECCAK_PADDING = [1, 256, 65536, 16777216];
	  var PADDING = [6, 1536, 393216, 100663296];
	  var SHIFT = [0, 8, 16, 24];
	  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
		0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
		2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
		2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
		2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
	  var BITS = [224, 256, 384, 512];
	  var SHAKE_BITS = [128, 256];
	  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
	  var CSHAKE_BYTEPAD = {
		'128': 168,
		'256': 136
	  };
	
	  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
		Array.isArray = function (obj) {
		  return Object.prototype.toString.call(obj) === '[object Array]';
		};
	  }
	
	  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
		ArrayBuffer.isView = function (obj) {
		  return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
		};
	  }
	
	  var createOutputMethod = function (bits, padding, outputType) {
		return function (message) {
		  return new Keccak(bits, padding, bits).update(message)[outputType]();
		};
	  };
	
	  var createShakeOutputMethod = function (bits, padding, outputType) {
		return function (message, outputBits) {
		  return new Keccak(bits, padding, outputBits).update(message)[outputType]();
		};
	  };
	
	  var createCshakeOutputMethod = function (bits, padding, outputType) {
		return function (message, outputBits, n, s) {
		  return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
		};
	  };
	
	  var createKmacOutputMethod = function (bits, padding, outputType) {
		return function (key, message, outputBits, s) {
		  return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
		};
	  };
	
	  var createOutputMethods = function (method, createMethod, bits, padding) {
		for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
		  var type = OUTPUT_TYPES[i];
		  method[type] = createMethod(bits, padding, type);
		}
		return method;
	  };
	
	  var createMethod = function (bits, padding) {
		var method = createOutputMethod(bits, padding, 'hex');
		method.create = function () {
		  return new Keccak(bits, padding, bits);
		};
		method.update = function (message) {
		  return method.create().update(message);
		};
		return createOutputMethods(method, createOutputMethod, bits, padding);
	  };
	
	  var createShakeMethod = function (bits, padding) {
		var method = createShakeOutputMethod(bits, padding, 'hex');
		method.create = function (outputBits) {
		  return new Keccak(bits, padding, outputBits);
		};
		method.update = function (message, outputBits) {
		  return method.create(outputBits).update(message);
		};
		return createOutputMethods(method, createShakeOutputMethod, bits, padding);
	  };
	
	  var createCshakeMethod = function (bits, padding) {
		var w = CSHAKE_BYTEPAD[bits];
		var method = createCshakeOutputMethod(bits, padding, 'hex');
		method.create = function (outputBits, n, s) {
		  if (!n && !s) {
			return methods['shake' + bits].create(outputBits);
		  } else {
			return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
		  }
		};
		method.update = function (message, outputBits, n, s) {
		  return method.create(outputBits, n, s).update(message);
		};
		return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
	  };
	
	  var createKmacMethod = function (bits, padding) {
		var w = CSHAKE_BYTEPAD[bits];
		var method = createKmacOutputMethod(bits, padding, 'hex');
		method.create = function (key, outputBits, s) {
		  return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
		};
		method.update = function (key, message, outputBits, s) {
		  return method.create(key, outputBits, s).update(message);
		};
		return createOutputMethods(method, createKmacOutputMethod, bits, padding);
	  };
	
	  var algorithms = [
		{ name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
		{ name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
		{ name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
		{ name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
		{ name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
	  ];
	
	  var methods = {}, methodNames = [];
	
	  for (var i = 0; i < algorithms.length; ++i) {
		var algorithm = algorithms[i];
		var bits = algorithm.bits;
		for (var j = 0; j < bits.length; ++j) {
		  var methodName = algorithm.name + '_' + bits[j];
		  methodNames.push(methodName);
		  methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
		  if (algorithm.name !== 'sha3') {
			var newMethodName = algorithm.name + bits[j];
			methodNames.push(newMethodName);
			methods[newMethodName] = methods[methodName];
		  }
		}
	  }
	
	  function Keccak(bits, padding, outputBits) {
		this.blocks = [];
		this.s = [];
		this.padding = padding;
		this.outputBits = outputBits;
		this.reset = true;
		this.finalized = false;
		this.block = 0;
		this.start = 0;
		this.blockCount = (1600 - (bits << 1)) >> 5;
		this.byteCount = this.blockCount << 2;
		this.outputBlocks = outputBits >> 5;
		this.extraBytes = (outputBits & 31) >> 3;
	
		for (var i = 0; i < 50; ++i) {
		  this.s[i] = 0;
		}
	  }
	
	  Keccak.prototype.update = function (message) {
		if (this.finalized) {
		  throw new Error(FINALIZE_ERROR);
		}
		var notString, type = typeof message;
		if (type !== 'string') {
		  if (type === 'object') {
			if (message === null) {
			  throw new Error(INPUT_ERROR);
			} else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
			  message = new Uint8Array(message);
			} else if (!Array.isArray(message)) {
			  if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
				throw new Error(INPUT_ERROR);
			  }
			}
		  } else {
			throw new Error(INPUT_ERROR);
		  }
		  notString = true;
		}
		var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
		  blockCount = this.blockCount, index = 0, s = this.s, i, code;
	
		while (index < length) {
		  if (this.reset) {
			this.reset = false;
			blocks[0] = this.block;
			for (i = 1; i < blockCount + 1; ++i) {
			  blocks[i] = 0;
			}
		  }
		  if (notString) {
			for (i = this.start; index < length && i < byteCount; ++index) {
			  blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
			}
		  } else {
			for (i = this.start; index < length && i < byteCount; ++index) {
			  code = message.charCodeAt(index);
			  if (code < 0x80) {
				blocks[i >> 2] |= code << SHIFT[i++ & 3];
			  } else if (code < 0x800) {
				blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
				blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
			  } else if (code < 0xd800 || code >= 0xe000) {
				blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
				blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
				blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
			  } else {
				code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
				blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
				blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
				blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
				blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
			  }
			}
		  }
		  this.lastByteIndex = i;
		  if (i >= byteCount) {
			this.start = i - byteCount;
			this.block = blocks[blockCount];
			for (i = 0; i < blockCount; ++i) {
			  s[i] ^= blocks[i];
			}
			f(s);
			this.reset = true;
		  } else {
			this.start = i;
		  }
		}
		return this;
	  };
	
	  Keccak.prototype.encode = function (x, right) {
		var o = x & 255, n = 1;
		var bytes = [o];
		x = x >> 8;
		o = x & 255;
		while (o > 0) {
		  bytes.unshift(o);
		  x = x >> 8;
		  o = x & 255;
		  ++n;
		}
		if (right) {
		  bytes.push(n);
		} else {
		  bytes.unshift(n);
		}
		this.update(bytes);
		return bytes.length;
	  };
	
	  Keccak.prototype.encodeString = function (str) {
		var notString, type = typeof str;
		if (type !== 'string') {
		  if (type === 'object') {
			if (str === null) {
			  throw new Error(INPUT_ERROR);
			} else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
			  str = new Uint8Array(str);
			} else if (!Array.isArray(str)) {
			  if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
				throw new Error(INPUT_ERROR);
			  }
			}
		  } else {
			throw new Error(INPUT_ERROR);
		  }
		  notString = true;
		}
		var bytes = 0, length = str.length;
		if (notString) {
		  bytes = length;
		} else {
		  for (var i = 0; i < str.length; ++i) {
			var code = str.charCodeAt(i);
			if (code < 0x80) {
			  bytes += 1;
			} else if (code < 0x800) {
			  bytes += 2;
			} else if (code < 0xd800 || code >= 0xe000) {
			  bytes += 3;
			} else {
			  code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
			  bytes += 4;
			}
		  }
		}
		bytes += this.encode(bytes * 8);
		this.update(str);
		return bytes;
	  };
	
	  Keccak.prototype.bytepad = function (strs, w) {
		var bytes = this.encode(w);
		for (var i = 0; i < strs.length; ++i) {
		  bytes += this.encodeString(strs[i]);
		}
		var paddingBytes = w - bytes % w;
		var zeros = [];
		zeros.length = paddingBytes;
		this.update(zeros);
		return this;
	  };
	
	  Keccak.prototype.finalize = function () {
		if (this.finalized) {
		  return;
		}
		this.finalized = true;
		var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
		blocks[i >> 2] |= this.padding[i & 3];
		if (this.lastByteIndex === this.byteCount) {
		  blocks[0] = blocks[blockCount];
		  for (i = 1; i < blockCount + 1; ++i) {
			blocks[i] = 0;
		  }
		}
		blocks[blockCount - 1] |= 0x80000000;
		for (i = 0; i < blockCount; ++i) {
		  s[i] ^= blocks[i];
		}
		f(s);
	  };
	
	  Keccak.prototype.toString = Keccak.prototype.hex = function () {
		this.finalize();
	
		var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
		  extraBytes = this.extraBytes, i = 0, j = 0;
		var hex = '', block;
		while (j < outputBlocks) {
		  for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
			block = s[i];
			hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
			  HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
			  HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
			  HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
		  }
		  if (j % blockCount === 0) {
			f(s);
			i = 0;
		  }
		}
		if (extraBytes) {
		  block = s[i];
		  hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
		  if (extraBytes > 1) {
			hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
		  }
		  if (extraBytes > 2) {
			hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
		  }
		}
		return hex;
	  };
	
	  Keccak.prototype.arrayBuffer = function () {
		this.finalize();
	
		var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
		  extraBytes = this.extraBytes, i = 0, j = 0;
		var bytes = this.outputBits >> 3;
		var buffer;
		if (extraBytes) {
		  buffer = new ArrayBuffer((outputBlocks + 1) << 2);
		} else {
		  buffer = new ArrayBuffer(bytes);
		}
		var array = new Uint32Array(buffer);
		while (j < outputBlocks) {
		  for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
			array[j] = s[i];
		  }
		  if (j % blockCount === 0) {
			f(s);
		  }
		}
		if (extraBytes) {
		  array[i] = s[i];
		  buffer = buffer.slice(0, bytes);
		}
		return buffer;
	  };
	
	  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
	
	  Keccak.prototype.digest = Keccak.prototype.array = function () {
		this.finalize();
	
		var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
		  extraBytes = this.extraBytes, i = 0, j = 0;
		var array = [], offset, block;
		while (j < outputBlocks) {
		  for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
			offset = j << 2;
			block = s[i];
			array[offset] = block & 0xFF;
			array[offset + 1] = (block >> 8) & 0xFF;
			array[offset + 2] = (block >> 16) & 0xFF;
			array[offset + 3] = (block >> 24) & 0xFF;
		  }
		  if (j % blockCount === 0) {
			f(s);
		  }
		}
		if (extraBytes) {
		  offset = j << 2;
		  block = s[i];
		  array[offset] = block & 0xFF;
		  if (extraBytes > 1) {
			array[offset + 1] = (block >> 8) & 0xFF;
		  }
		  if (extraBytes > 2) {
			array[offset + 2] = (block >> 16) & 0xFF;
		  }
		}
		return array;
	  };
	
	  function Kmac(bits, padding, outputBits) {
		Keccak.call(this, bits, padding, outputBits);
	  }
	
	  Kmac.prototype = new Keccak();
	
	  Kmac.prototype.finalize = function () {
		this.encode(this.outputBits, true);
		return Keccak.prototype.finalize.call(this);
	  };
	
	  var f = function (s) {
		var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
		  b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
		  b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
		  b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
		for (n = 0; n < 48; n += 2) {
		  c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
		  c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
		  c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
		  c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
		  c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
		  c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
		  c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
		  c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
		  c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
		  c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
	
		  h = c8 ^ ((c2 << 1) | (c3 >>> 31));
		  l = c9 ^ ((c3 << 1) | (c2 >>> 31));
		  s[0] ^= h;
		  s[1] ^= l;
		  s[10] ^= h;
		  s[11] ^= l;
		  s[20] ^= h;
		  s[21] ^= l;
		  s[30] ^= h;
		  s[31] ^= l;
		  s[40] ^= h;
		  s[41] ^= l;
		  h = c0 ^ ((c4 << 1) | (c5 >>> 31));
		  l = c1 ^ ((c5 << 1) | (c4 >>> 31));
		  s[2] ^= h;
		  s[3] ^= l;
		  s[12] ^= h;
		  s[13] ^= l;
		  s[22] ^= h;
		  s[23] ^= l;
		  s[32] ^= h;
		  s[33] ^= l;
		  s[42] ^= h;
		  s[43] ^= l;
		  h = c2 ^ ((c6 << 1) | (c7 >>> 31));
		  l = c3 ^ ((c7 << 1) | (c6 >>> 31));
		  s[4] ^= h;
		  s[5] ^= l;
		  s[14] ^= h;
		  s[15] ^= l;
		  s[24] ^= h;
		  s[25] ^= l;
		  s[34] ^= h;
		  s[35] ^= l;
		  s[44] ^= h;
		  s[45] ^= l;
		  h = c4 ^ ((c8 << 1) | (c9 >>> 31));
		  l = c5 ^ ((c9 << 1) | (c8 >>> 31));
		  s[6] ^= h;
		  s[7] ^= l;
		  s[16] ^= h;
		  s[17] ^= l;
		  s[26] ^= h;
		  s[27] ^= l;
		  s[36] ^= h;
		  s[37] ^= l;
		  s[46] ^= h;
		  s[47] ^= l;
		  h = c6 ^ ((c0 << 1) | (c1 >>> 31));
		  l = c7 ^ ((c1 << 1) | (c0 >>> 31));
		  s[8] ^= h;
		  s[9] ^= l;
		  s[18] ^= h;
		  s[19] ^= l;
		  s[28] ^= h;
		  s[29] ^= l;
		  s[38] ^= h;
		  s[39] ^= l;
		  s[48] ^= h;
		  s[49] ^= l;
	
		  b0 = s[0];
		  b1 = s[1];
		  b32 = (s[11] << 4) | (s[10] >>> 28);
		  b33 = (s[10] << 4) | (s[11] >>> 28);
		  b14 = (s[20] << 3) | (s[21] >>> 29);
		  b15 = (s[21] << 3) | (s[20] >>> 29);
		  b46 = (s[31] << 9) | (s[30] >>> 23);
		  b47 = (s[30] << 9) | (s[31] >>> 23);
		  b28 = (s[40] << 18) | (s[41] >>> 14);
		  b29 = (s[41] << 18) | (s[40] >>> 14);
		  b20 = (s[2] << 1) | (s[3] >>> 31);
		  b21 = (s[3] << 1) | (s[2] >>> 31);
		  b2 = (s[13] << 12) | (s[12] >>> 20);
		  b3 = (s[12] << 12) | (s[13] >>> 20);
		  b34 = (s[22] << 10) | (s[23] >>> 22);
		  b35 = (s[23] << 10) | (s[22] >>> 22);
		  b16 = (s[33] << 13) | (s[32] >>> 19);
		  b17 = (s[32] << 13) | (s[33] >>> 19);
		  b48 = (s[42] << 2) | (s[43] >>> 30);
		  b49 = (s[43] << 2) | (s[42] >>> 30);
		  b40 = (s[5] << 30) | (s[4] >>> 2);
		  b41 = (s[4] << 30) | (s[5] >>> 2);
		  b22 = (s[14] << 6) | (s[15] >>> 26);
		  b23 = (s[15] << 6) | (s[14] >>> 26);
		  b4 = (s[25] << 11) | (s[24] >>> 21);
		  b5 = (s[24] << 11) | (s[25] >>> 21);
		  b36 = (s[34] << 15) | (s[35] >>> 17);
		  b37 = (s[35] << 15) | (s[34] >>> 17);
		  b18 = (s[45] << 29) | (s[44] >>> 3);
		  b19 = (s[44] << 29) | (s[45] >>> 3);
		  b10 = (s[6] << 28) | (s[7] >>> 4);
		  b11 = (s[7] << 28) | (s[6] >>> 4);
		  b42 = (s[17] << 23) | (s[16] >>> 9);
		  b43 = (s[16] << 23) | (s[17] >>> 9);
		  b24 = (s[26] << 25) | (s[27] >>> 7);
		  b25 = (s[27] << 25) | (s[26] >>> 7);
		  b6 = (s[36] << 21) | (s[37] >>> 11);
		  b7 = (s[37] << 21) | (s[36] >>> 11);
		  b38 = (s[47] << 24) | (s[46] >>> 8);
		  b39 = (s[46] << 24) | (s[47] >>> 8);
		  b30 = (s[8] << 27) | (s[9] >>> 5);
		  b31 = (s[9] << 27) | (s[8] >>> 5);
		  b12 = (s[18] << 20) | (s[19] >>> 12);
		  b13 = (s[19] << 20) | (s[18] >>> 12);
		  b44 = (s[29] << 7) | (s[28] >>> 25);
		  b45 = (s[28] << 7) | (s[29] >>> 25);
		  b26 = (s[38] << 8) | (s[39] >>> 24);
		  b27 = (s[39] << 8) | (s[38] >>> 24);
		  b8 = (s[48] << 14) | (s[49] >>> 18);
		  b9 = (s[49] << 14) | (s[48] >>> 18);
	
		  s[0] = b0 ^ (~b2 & b4);
		  s[1] = b1 ^ (~b3 & b5);
		  s[10] = b10 ^ (~b12 & b14);
		  s[11] = b11 ^ (~b13 & b15);
		  s[20] = b20 ^ (~b22 & b24);
		  s[21] = b21 ^ (~b23 & b25);
		  s[30] = b30 ^ (~b32 & b34);
		  s[31] = b31 ^ (~b33 & b35);
		  s[40] = b40 ^ (~b42 & b44);
		  s[41] = b41 ^ (~b43 & b45);
		  s[2] = b2 ^ (~b4 & b6);
		  s[3] = b3 ^ (~b5 & b7);
		  s[12] = b12 ^ (~b14 & b16);
		  s[13] = b13 ^ (~b15 & b17);
		  s[22] = b22 ^ (~b24 & b26);
		  s[23] = b23 ^ (~b25 & b27);
		  s[32] = b32 ^ (~b34 & b36);
		  s[33] = b33 ^ (~b35 & b37);
		  s[42] = b42 ^ (~b44 & b46);
		  s[43] = b43 ^ (~b45 & b47);
		  s[4] = b4 ^ (~b6 & b8);
		  s[5] = b5 ^ (~b7 & b9);
		  s[14] = b14 ^ (~b16 & b18);
		  s[15] = b15 ^ (~b17 & b19);
		  s[24] = b24 ^ (~b26 & b28);
		  s[25] = b25 ^ (~b27 & b29);
		  s[34] = b34 ^ (~b36 & b38);
		  s[35] = b35 ^ (~b37 & b39);
		  s[44] = b44 ^ (~b46 & b48);
		  s[45] = b45 ^ (~b47 & b49);
		  s[6] = b6 ^ (~b8 & b0);
		  s[7] = b7 ^ (~b9 & b1);
		  s[16] = b16 ^ (~b18 & b10);
		  s[17] = b17 ^ (~b19 & b11);
		  s[26] = b26 ^ (~b28 & b20);
		  s[27] = b27 ^ (~b29 & b21);
		  s[36] = b36 ^ (~b38 & b30);
		  s[37] = b37 ^ (~b39 & b31);
		  s[46] = b46 ^ (~b48 & b40);
		  s[47] = b47 ^ (~b49 & b41);
		  s[8] = b8 ^ (~b0 & b2);
		  s[9] = b9 ^ (~b1 & b3);
		  s[18] = b18 ^ (~b10 & b12);
		  s[19] = b19 ^ (~b11 & b13);
		  s[28] = b28 ^ (~b20 & b22);
		  s[29] = b29 ^ (~b21 & b23);
		  s[38] = b38 ^ (~b30 & b32);
		  s[39] = b39 ^ (~b31 & b33);
		  s[48] = b48 ^ (~b40 & b42);
		  s[49] = b49 ^ (~b41 & b43);
	
		  s[0] ^= RC[n];
		  s[1] ^= RC[n + 1];
		}
	  };
	
	  if (COMMON_JS) {
		module.exports = methods;
	  } else {
		for (i = 0; i < methodNames.length; ++i) {
		  root[methodNames[i]] = methods[methodNames[i]];
		}
		if (AMD) {
		  define(function () {
			return methods;
		  });
		}
	  }
	})();
	
	}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"_process":133}],62:[function(require,module,exports){
	module.exports = require('./lib/api')(require('./lib/keccak'))
	
	},{"./lib/api":63,"./lib/keccak":67}],63:[function(require,module,exports){
	const createKeccak = require('./keccak')
	const createShake = require('./shake')
	
	module.exports = function (KeccakState) {
	  const Keccak = createKeccak(KeccakState)
	  const Shake = createShake(KeccakState)
	
	  return function (algorithm, options) {
		const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm
		switch (hash) {
		  case 'keccak224': return new Keccak(1152, 448, null, 224, options)
		  case 'keccak256': return new Keccak(1088, 512, null, 256, options)
		  case 'keccak384': return new Keccak(832, 768, null, 384, options)
		  case 'keccak512': return new Keccak(576, 1024, null, 512, options)
	
		  case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)
		  case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)
		  case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)
		  case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)
	
		  case 'shake128': return new Shake(1344, 256, 0x1f, options)
		  case 'shake256': return new Shake(1088, 512, 0x1f, options)
	
		  default: throw new Error('Invald algorithm: ' + algorithm)
		}
	  }
	}
	
	},{"./keccak":64,"./shake":65}],64:[function(require,module,exports){
	(function (Buffer){(function (){
	const { Transform } = require('readable-stream')
	
	module.exports = (KeccakState) => class Keccak extends Transform {
	  constructor (rate, capacity, delimitedSuffix, hashBitLength, options) {
		super(options)
	
		this._rate = rate
		this._capacity = capacity
		this._delimitedSuffix = delimitedSuffix
		this._hashBitLength = hashBitLength
		this._options = options
	
		this._state = new KeccakState()
		this._state.initialize(rate, capacity)
		this._finalized = false
	  }
	
	  _transform (chunk, encoding, callback) {
		let error = null
		try {
		  this.update(chunk, encoding)
		} catch (err) {
		  error = err
		}
	
		callback(error)
	  }
	
	  _flush (callback) {
		let error = null
		try {
		  this.push(this.digest())
		} catch (err) {
		  error = err
		}
	
		callback(error)
	  }
	
	  update (data, encoding) {
		if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
		if (this._finalized) throw new Error('Digest already called')
		if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)
	
		this._state.absorb(data)
	
		return this
	  }
	
	  digest (encoding) {
		if (this._finalized) throw new Error('Digest already called')
		this._finalized = true
	
		if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)
		let digest = this._state.squeeze(this._hashBitLength / 8)
		if (encoding !== undefined) digest = digest.toString(encoding)
	
		this._resetState()
	
		return digest
	  }
	
	  // remove result from memory
	  _resetState () {
		this._state.initialize(this._rate, this._capacity)
		return this
	  }
	
	  // because sometimes we need hash right now and little later
	  _clone () {
		const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)
		this._state.copy(clone._state)
		clone._finalized = this._finalized
	
		return clone
	  }
	}
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"buffer":125,"readable-stream":88}],65:[function(require,module,exports){
	(function (Buffer){(function (){
	const { Transform } = require('readable-stream')
	
	module.exports = (KeccakState) => class Shake extends Transform {
	  constructor (rate, capacity, delimitedSuffix, options) {
		super(options)
	
		this._rate = rate
		this._capacity = capacity
		this._delimitedSuffix = delimitedSuffix
		this._options = options
	
		this._state = new KeccakState()
		this._state.initialize(rate, capacity)
		this._finalized = false
	  }
	
	  _transform (chunk, encoding, callback) {
		let error = null
		try {
		  this.update(chunk, encoding)
		} catch (err) {
		  error = err
		}
	
		callback(error)
	  }
	
	  _flush () {}
	
	  _read (size) {
		this.push(this.squeeze(size))
	  }
	
	  update (data, encoding) {
		if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')
		if (this._finalized) throw new Error('Squeeze already called')
		if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)
	
		this._state.absorb(data)
	
		return this
	  }
	
	  squeeze (dataByteLength, encoding) {
		if (!this._finalized) {
		  this._finalized = true
		  this._state.absorbLastFewBits(this._delimitedSuffix)
		}
	
		let data = this._state.squeeze(dataByteLength)
		if (encoding !== undefined) data = data.toString(encoding)
	
		return data
	  }
	
	  _resetState () {
		this._state.initialize(this._rate, this._capacity)
		return this
	  }
	
	  _clone () {
		const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)
		this._state.copy(clone._state)
		clone._finalized = this._finalized
	
		return clone
	  }
	}
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"buffer":125,"readable-stream":88}],66:[function(require,module,exports){
	const P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]
	
	exports.p1600 = function (s) {
	  for (let round = 0; round < 24; ++round) {
		// theta
		const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]
		const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]
		const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]
		const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]
		const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]
		const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]
		const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]
		const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]
		const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]
		const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]
	
		let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)
		let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)
		const t1slo0 = s[0] ^ lo
		const t1shi0 = s[1] ^ hi
		const t1slo5 = s[10] ^ lo
		const t1shi5 = s[11] ^ hi
		const t1slo10 = s[20] ^ lo
		const t1shi10 = s[21] ^ hi
		const t1slo15 = s[30] ^ lo
		const t1shi15 = s[31] ^ hi
		const t1slo20 = s[40] ^ lo
		const t1shi20 = s[41] ^ hi
		lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)
		hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)
		const t1slo1 = s[2] ^ lo
		const t1shi1 = s[3] ^ hi
		const t1slo6 = s[12] ^ lo
		const t1shi6 = s[13] ^ hi
		const t1slo11 = s[22] ^ lo
		const t1shi11 = s[23] ^ hi
		const t1slo16 = s[32] ^ lo
		const t1shi16 = s[33] ^ hi
		const t1slo21 = s[42] ^ lo
		const t1shi21 = s[43] ^ hi
		lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)
		hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)
		const t1slo2 = s[4] ^ lo
		const t1shi2 = s[5] ^ hi
		const t1slo7 = s[14] ^ lo
		const t1shi7 = s[15] ^ hi
		const t1slo12 = s[24] ^ lo
		const t1shi12 = s[25] ^ hi
		const t1slo17 = s[34] ^ lo
		const t1shi17 = s[35] ^ hi
		const t1slo22 = s[44] ^ lo
		const t1shi22 = s[45] ^ hi
		lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)
		hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)
		const t1slo3 = s[6] ^ lo
		const t1shi3 = s[7] ^ hi
		const t1slo8 = s[16] ^ lo
		const t1shi8 = s[17] ^ hi
		const t1slo13 = s[26] ^ lo
		const t1shi13 = s[27] ^ hi
		const t1slo18 = s[36] ^ lo
		const t1shi18 = s[37] ^ hi
		const t1slo23 = s[46] ^ lo
		const t1shi23 = s[47] ^ hi
		lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)
		hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)
		const t1slo4 = s[8] ^ lo
		const t1shi4 = s[9] ^ hi
		const t1slo9 = s[18] ^ lo
		const t1shi9 = s[19] ^ hi
		const t1slo14 = s[28] ^ lo
		const t1shi14 = s[29] ^ hi
		const t1slo19 = s[38] ^ lo
		const t1shi19 = s[39] ^ hi
		const t1slo24 = s[48] ^ lo
		const t1shi24 = s[49] ^ hi
	
		// rho & pi
		const t2slo0 = t1slo0
		const t2shi0 = t1shi0
		const t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)
		const t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)
		const t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)
		const t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)
		const t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)
		const t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)
		const t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)
		const t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)
		const t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)
		const t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)
		const t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)
		const t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)
		const t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)
		const t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)
		const t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)
		const t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)
		const t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)
		const t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)
		const t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)
		const t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)
		const t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)
		const t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)
		const t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)
		const t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)
		const t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)
		const t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)
		const t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)
		const t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)
		const t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)
		const t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)
		const t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)
		const t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)
		const t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)
		const t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)
		const t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)
		const t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)
		const t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)
		const t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)
		const t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)
		const t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)
		const t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)
		const t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)
		const t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)
		const t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)
		const t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)
		const t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)
		const t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)
		const t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)
	
		// chi
		s[0] = t2slo0 ^ (~t2slo1 & t2slo2)
		s[1] = t2shi0 ^ (~t2shi1 & t2shi2)
		s[10] = t2slo5 ^ (~t2slo6 & t2slo7)
		s[11] = t2shi5 ^ (~t2shi6 & t2shi7)
		s[20] = t2slo10 ^ (~t2slo11 & t2slo12)
		s[21] = t2shi10 ^ (~t2shi11 & t2shi12)
		s[30] = t2slo15 ^ (~t2slo16 & t2slo17)
		s[31] = t2shi15 ^ (~t2shi16 & t2shi17)
		s[40] = t2slo20 ^ (~t2slo21 & t2slo22)
		s[41] = t2shi20 ^ (~t2shi21 & t2shi22)
		s[2] = t2slo1 ^ (~t2slo2 & t2slo3)
		s[3] = t2shi1 ^ (~t2shi2 & t2shi3)
		s[12] = t2slo6 ^ (~t2slo7 & t2slo8)
		s[13] = t2shi6 ^ (~t2shi7 & t2shi8)
		s[22] = t2slo11 ^ (~t2slo12 & t2slo13)
		s[23] = t2shi11 ^ (~t2shi12 & t2shi13)
		s[32] = t2slo16 ^ (~t2slo17 & t2slo18)
		s[33] = t2shi16 ^ (~t2shi17 & t2shi18)
		s[42] = t2slo21 ^ (~t2slo22 & t2slo23)
		s[43] = t2shi21 ^ (~t2shi22 & t2shi23)
		s[4] = t2slo2 ^ (~t2slo3 & t2slo4)
		s[5] = t2shi2 ^ (~t2shi3 & t2shi4)
		s[14] = t2slo7 ^ (~t2slo8 & t2slo9)
		s[15] = t2shi7 ^ (~t2shi8 & t2shi9)
		s[24] = t2slo12 ^ (~t2slo13 & t2slo14)
		s[25] = t2shi12 ^ (~t2shi13 & t2shi14)
		s[34] = t2slo17 ^ (~t2slo18 & t2slo19)
		s[35] = t2shi17 ^ (~t2shi18 & t2shi19)
		s[44] = t2slo22 ^ (~t2slo23 & t2slo24)
		s[45] = t2shi22 ^ (~t2shi23 & t2shi24)
		s[6] = t2slo3 ^ (~t2slo4 & t2slo0)
		s[7] = t2shi3 ^ (~t2shi4 & t2shi0)
		s[16] = t2slo8 ^ (~t2slo9 & t2slo5)
		s[17] = t2shi8 ^ (~t2shi9 & t2shi5)
		s[26] = t2slo13 ^ (~t2slo14 & t2slo10)
		s[27] = t2shi13 ^ (~t2shi14 & t2shi10)
		s[36] = t2slo18 ^ (~t2slo19 & t2slo15)
		s[37] = t2shi18 ^ (~t2shi19 & t2shi15)
		s[46] = t2slo23 ^ (~t2slo24 & t2slo20)
		s[47] = t2shi23 ^ (~t2shi24 & t2shi20)
		s[8] = t2slo4 ^ (~t2slo0 & t2slo1)
		s[9] = t2shi4 ^ (~t2shi0 & t2shi1)
		s[18] = t2slo9 ^ (~t2slo5 & t2slo6)
		s[19] = t2shi9 ^ (~t2shi5 & t2shi6)
		s[28] = t2slo14 ^ (~t2slo10 & t2slo11)
		s[29] = t2shi14 ^ (~t2shi10 & t2shi11)
		s[38] = t2slo19 ^ (~t2slo15 & t2slo16)
		s[39] = t2shi19 ^ (~t2shi15 & t2shi16)
		s[48] = t2slo24 ^ (~t2slo20 & t2slo21)
		s[49] = t2shi24 ^ (~t2shi20 & t2shi21)
	
		// iota
		s[0] ^= P1600_ROUND_CONSTANTS[round * 2]
		s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]
	  }
	}
	
	},{}],67:[function(require,module,exports){
	(function (Buffer){(function (){
	const keccakState = require('./keccak-state-unroll')
	
	function Keccak () {
	  // much faster than `new Array(50)`
	  this.state = [
		0, 0, 0, 0, 0,
		0, 0, 0, 0, 0,
		0, 0, 0, 0, 0,
		0, 0, 0, 0, 0,
		0, 0, 0, 0, 0
	  ]
	
	  this.blockSize = null
	  this.count = 0
	  this.squeezing = false
	}
	
	Keccak.prototype.initialize = function (rate, capacity) {
	  for (let i = 0; i < 50; ++i) this.state[i] = 0
	  this.blockSize = rate / 8
	  this.count = 0
	  this.squeezing = false
	}
	
	Keccak.prototype.absorb = function (data) {
	  for (let i = 0; i < data.length; ++i) {
		this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))
		this.count += 1
		if (this.count === this.blockSize) {
		  keccakState.p1600(this.state)
		  this.count = 0
		}
	  }
	}
	
	Keccak.prototype.absorbLastFewBits = function (bits) {
	  this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))
	  if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)
	  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))
	  keccakState.p1600(this.state)
	  this.count = 0
	  this.squeezing = true
	}
	
	Keccak.prototype.squeeze = function (length) {
	  if (!this.squeezing) this.absorbLastFewBits(0x01)
	
	  const output = Buffer.alloc(length)
	  for (let i = 0; i < length; ++i) {
		output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff
		this.count += 1
		if (this.count === this.blockSize) {
		  keccakState.p1600(this.state)
		  this.count = 0
		}
	  }
	
	  return output
	}
	
	Keccak.prototype.copy = function (dest) {
	  for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i]
	  dest.blockSize = this.blockSize
	  dest.count = this.count
	  dest.squeezing = this.squeezing
	}
	
	module.exports = Keccak
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"./keccak-state-unroll":66,"buffer":125}],68:[function(require,module,exports){
	'use strict'
	var inherits = require('inherits')
	var HashBase = require('hash-base')
	var Buffer = require('safe-buffer').Buffer
	
	var ARRAY16 = new Array(16)
	
	function MD5 () {
	  HashBase.call(this, 64)
	
	  // state
	  this._a = 0x67452301
	  this._b = 0xefcdab89
	  this._c = 0x98badcfe
	  this._d = 0x10325476
	}
	
	inherits(MD5, HashBase)
	
	MD5.prototype._update = function () {
	  var M = ARRAY16
	  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)
	
	  var a = this._a
	  var b = this._b
	  var c = this._c
	  var d = this._d
	
	  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
	  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
	  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
	  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
	  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
	  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
	  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
	  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
	  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
	  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
	  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
	  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
	  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
	  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
	  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
	  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)
	
	  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
	  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
	  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
	  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
	  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
	  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
	  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
	  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
	  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
	  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
	  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
	  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
	  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
	  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
	  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
	  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)
	
	  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
	  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
	  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
	  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
	  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
	  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
	  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
	  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
	  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
	  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
	  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
	  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
	  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
	  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
	  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
	  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)
	
	  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
	  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
	  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
	  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
	  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
	  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
	  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
	  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
	  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
	  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
	  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
	  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
	  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
	  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
	  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
	  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)
	
	  this._a = (this._a + a) | 0
	  this._b = (this._b + b) | 0
	  this._c = (this._c + c) | 0
	  this._d = (this._d + d) | 0
	}
	
	MD5.prototype._digest = function () {
	  // create padding and handle blocks
	  this._block[this._blockOffset++] = 0x80
	  if (this._blockOffset > 56) {
		this._block.fill(0, this._blockOffset, 64)
		this._update()
		this._blockOffset = 0
	  }
	
	  this._block.fill(0, this._blockOffset, 56)
	  this._block.writeUInt32LE(this._length[0], 56)
	  this._block.writeUInt32LE(this._length[1], 60)
	  this._update()
	
	  // produce result
	  var buffer = Buffer.allocUnsafe(16)
	  buffer.writeInt32LE(this._a, 0)
	  buffer.writeInt32LE(this._b, 4)
	  buffer.writeInt32LE(this._c, 8)
	  buffer.writeInt32LE(this._d, 12)
	  return buffer
	}
	
	function rotl (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}
	
	function fnF (a, b, c, d, m, k, s) {
	  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
	}
	
	function fnG (a, b, c, d, m, k, s) {
	  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
	}
	
	function fnH (a, b, c, d, m, k, s) {
	  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
	}
	
	function fnI (a, b, c, d, m, k, s) {
	  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
	}
	
	module.exports = MD5
	
	},{"hash-base":45,"inherits":59,"safe-buffer":92}],69:[function(require,module,exports){
	module.exports = assert;
	
	function assert(val, msg) {
	  if (!val)
		throw new Error(msg || 'Assertion failed');
	}
	
	assert.equal = function assertEqual(l, r, msg) {
	  if (l != r)
		throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
	};
	
	},{}],70:[function(require,module,exports){
	'use strict';
	
	var utils = exports;
	
	function toArray(msg, enc) {
	  if (Array.isArray(msg))
		return msg.slice();
	  if (!msg)
		return [];
	  var res = [];
	  if (typeof msg !== 'string') {
		for (var i = 0; i < msg.length; i++)
		  res[i] = msg[i] | 0;
		return res;
	  }
	  if (enc === 'hex') {
		msg = msg.replace(/[^a-z0-9]+/ig, '');
		if (msg.length % 2 !== 0)
		  msg = '0' + msg;
		for (var i = 0; i < msg.length; i += 2)
		  res.push(parseInt(msg[i] + msg[i + 1], 16));
	  } else {
		for (var i = 0; i < msg.length; i++) {
		  var c = msg.charCodeAt(i);
		  var hi = c >> 8;
		  var lo = c & 0xff;
		  if (hi)
			res.push(hi, lo);
		  else
			res.push(lo);
		}
	  }
	  return res;
	}
	utils.toArray = toArray;
	
	function zero2(word) {
	  if (word.length === 1)
		return '0' + word;
	  else
		return word;
	}
	utils.zero2 = zero2;
	
	function toHex(msg) {
	  var res = '';
	  for (var i = 0; i < msg.length; i++)
		res += zero2(msg[i].toString(16));
	  return res;
	}
	utils.toHex = toHex;
	
	utils.encode = function encode(arr, enc) {
	  if (enc === 'hex')
		return toHex(arr);
	  else
		return arr;
	};
	
	},{}],71:[function(require,module,exports){
	arguments[4][44][0].apply(exports,arguments)
	},{"dup":44}],72:[function(require,module,exports){
	var BN = require('bn.js');
	var stripHexPrefix = require('strip-hex-prefix');
	
	/**
	 * Returns a BN object, converts a number value to a BN
	 * @param {String|Number|Object} `arg` input a string number, hex string number, number, BigNumber or BN object
	 * @return {Object} `output` BN object of the number
	 * @throws if the argument is not an array, object that isn't a bignumber, not a string number or number
	 */
	module.exports = function numberToBN(arg) {
	  if (typeof arg === 'string' || typeof arg === 'number') {
		var multiplier = new BN(1); // eslint-disable-line
		var formattedString = String(arg).toLowerCase().trim();
		var isHexPrefixed = formattedString.substr(0, 2) === '0x' || formattedString.substr(0, 3) === '-0x';
		var stringArg = stripHexPrefix(formattedString); // eslint-disable-line
		if (stringArg.substr(0, 1) === '-') {
		  stringArg = stripHexPrefix(stringArg.slice(1));
		  multiplier = new BN(-1, 10);
		}
		stringArg = stringArg === '' ? '0' : stringArg;
	
		if ((!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/))
		  || stringArg.match(/^[a-fA-F]+$/)
		  || (isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/))) {
		  return new BN(stringArg, 16).mul(multiplier);
		}
	
		if ((stringArg.match(/^-?[0-9]+$/) || stringArg === '') && isHexPrefixed === false) {
		  return new BN(stringArg, 10).mul(multiplier);
		}
	  } else if (typeof arg === 'object' && arg.toString && (!arg.pop && !arg.push)) {
		if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
		  return new BN(arg.toString(10), 10);
		}
	  }
	
	  throw new Error('[number-to-bn] while converting number ' + JSON.stringify(arg) + ' to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.');
	}
	
	},{"bn.js":71,"strip-hex-prefix":105}],73:[function(require,module,exports){
	(function (process,global){(function (){
	'use strict'
	
	// limit of Crypto.getRandomValues()
	// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
	var MAX_BYTES = 65536
	
	// Node supports requesting up to this number of bytes
	// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
	var MAX_UINT32 = 4294967295
	
	function oldBrowser () {
	  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
	}
	
	var Buffer = require('safe-buffer').Buffer
	var crypto = global.crypto || global.msCrypto
	
	if (crypto && crypto.getRandomValues) {
	  module.exports = randomBytes
	} else {
	  module.exports = oldBrowser
	}
	
	function randomBytes (size, cb) {
	  // phantomjs needs to throw
	  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')
	
	  var bytes = Buffer.allocUnsafe(size)
	
	  if (size > 0) {  // getRandomValues fails on IE if size == 0
		if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
		  // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
		  for (var generated = 0; generated < size; generated += MAX_BYTES) {
			// buffer.slice automatically checks if the end is past the end of
			// the buffer so we don't have to here
			crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
		  }
		} else {
		  crypto.getRandomValues(bytes)
		}
	  }
	
	  if (typeof cb === 'function') {
		return process.nextTick(function () {
		  cb(null, bytes)
		})
	  }
	
	  return bytes
	}
	
	}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"_process":133,"safe-buffer":92}],74:[function(require,module,exports){
	'use strict';
	
	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }
	
	var codes = {};
	
	function createErrorType(code, message, Base) {
	  if (!Base) {
		Base = Error;
	  }
	
	  function getMessage(arg1, arg2, arg3) {
		if (typeof message === 'string') {
		  return message;
		} else {
		  return message(arg1, arg2, arg3);
		}
	  }
	
	  var NodeError =
	  /*#__PURE__*/
	  function (_Base) {
		_inheritsLoose(NodeError, _Base);
	
		function NodeError(arg1, arg2, arg3) {
		  return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
		}
	
		return NodeError;
	  }(Base);
	
	  NodeError.prototype.name = Base.name;
	  NodeError.prototype.code = code;
	  codes[code] = NodeError;
	} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
	
	
	function oneOf(expected, thing) {
	  if (Array.isArray(expected)) {
		var len = expected.length;
		expected = expected.map(function (i) {
		  return String(i);
		});
	
		if (len > 2) {
		  return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
		} else if (len === 2) {
		  return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
		} else {
		  return "of ".concat(thing, " ").concat(expected[0]);
		}
	  } else {
		return "of ".concat(thing, " ").concat(String(expected));
	  }
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
	
	
	function startsWith(str, search, pos) {
	  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
	
	
	function endsWith(str, search, this_len) {
	  if (this_len === undefined || this_len > str.length) {
		this_len = str.length;
	  }
	
	  return str.substring(this_len - search.length, this_len) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
	
	
	function includes(str, search, start) {
	  if (typeof start !== 'number') {
		start = 0;
	  }
	
	  if (start + search.length > str.length) {
		return false;
	  } else {
		return str.indexOf(search, start) !== -1;
	  }
	}
	
	createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
	  return 'The value "' + value + '" is invalid for option "' + name + '"';
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  // determiner: 'must be' or 'must not be'
	  var determiner;
	
	  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
		determiner = 'must not be';
		expected = expected.replace(/^not /, '');
	  } else {
		determiner = 'must be';
	  }
	
	  var msg;
	
	  if (endsWith(name, ' argument')) {
		// For cases like 'first argument'
		msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  } else {
		var type = includes(name, '.') ? 'property' : 'argument';
		msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  }
	
	  msg += ". Received type ".concat(typeof actual);
	  return msg;
	}, TypeError);
	createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
	createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
	  return 'The ' + name + ' method is not implemented';
	});
	createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
	createErrorType('ERR_STREAM_DESTROYED', function (name) {
	  return 'Cannot call ' + name + ' after a stream was destroyed';
	});
	createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
	createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
	createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
	createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
	createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
	  return 'Unknown encoding: ' + arg;
	}, TypeError);
	createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
	module.exports.codes = codes;
	
	},{}],75:[function(require,module,exports){
	(function (process){(function (){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	'use strict';
	/*<replacement>*/
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	
	  for (var key in obj) {
		keys.push(key);
	  }
	
	  return keys;
	};
	/*</replacement>*/
	
	
	module.exports = Duplex;
	
	var Readable = require('./_stream_readable');
	
	var Writable = require('./_stream_writable');
	
	require('inherits')(Duplex, Readable);
	
	{
	  // Allow the keys array to be GC'ed.
	  var keys = objectKeys(Writable.prototype);
	
	  for (var v = 0; v < keys.length; v++) {
		var method = keys[v];
		if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	  }
	}
	
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	  Readable.call(this, options);
	  Writable.call(this, options);
	  this.allowHalfOpen = true;
	
	  if (options) {
		if (options.readable === false) this.readable = false;
		if (options.writable === false) this.writable = false;
	
		if (options.allowHalfOpen === false) {
		  this.allowHalfOpen = false;
		  this.once('end', onend);
		}
	  }
	}
	
	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		return this._writableState.highWaterMark;
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		return this._writableState && this._writableState.getBuffer();
	  }
	});
	Object.defineProperty(Duplex.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		return this._writableState.length;
	  }
	}); // the no-half-open enforcer
	
	function onend() {
	  // If the writable side ended, then we're ok.
	  if (this._writableState.ended) return; // no more data can be written.
	  // But allow more writes to happen in this tick.
	
	  process.nextTick(onEndNT, this);
	}
	
	function onEndNT(self) {
	  self.end();
	}
	
	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		if (this._readableState === undefined || this._writableState === undefined) {
		  return false;
		}
	
		return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function set(value) {
		// we ignore the value if the stream
		// has not been initialized yet
		if (this._readableState === undefined || this._writableState === undefined) {
		  return;
		} // backward compatibility, the user is explicitly
		// managing destroyed
	
	
		this._readableState.destroyed = value;
		this._writableState.destroyed = value;
	  }
	});
	}).call(this)}).call(this,require('_process'))
	},{"./_stream_readable":77,"./_stream_writable":79,"_process":133,"inherits":59}],76:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	'use strict';
	
	module.exports = PassThrough;
	
	var Transform = require('./_stream_transform');
	
	require('inherits')(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};
	},{"./_stream_transform":78,"inherits":59}],77:[function(require,module,exports){
	(function (process,global){(function (){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	'use strict';
	
	module.exports = Readable;
	/*<replacement>*/
	
	var Duplex;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	/*<replacement>*/
	
	var EE = require('events').EventEmitter;
	
	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	/*<replacement>*/
	
	
	var Stream = require('./internal/streams/stream');
	/*</replacement>*/
	
	
	var Buffer = require('buffer').Buffer;
	
	var OurUint8Array = global.Uint8Array || function () {};
	
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*<replacement>*/
	
	
	var debugUtil = require('util');
	
	var debug;
	
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function debug() {};
	}
	/*</replacement>*/
	
	
	var BufferList = require('./internal/streams/buffer_list');
	
	var destroyImpl = require('./internal/streams/destroy');
	
	var _require = require('./internal/streams/state'),
		getHighWaterMark = _require.getHighWaterMark;
	
	var _require$codes = require('../errors').codes,
		ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
		ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
		ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
		ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
	
	
	var StringDecoder;
	var createReadableStreamAsyncIterator;
	var from;
	
	require('inherits')(Readable, Stream);
	
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
	
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.
	
	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}
	
	function ReadableState(options, stream, isDuplex) {
	  Duplex = Duplex || require('./_stream_duplex');
	  options = options || {}; // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.
	
	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	
	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	
	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.
	
	  this.sync = true; // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	  this.paused = true; // Should close be emitted on destroy. Defaults to true.
	
	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
	
	  this.autoDestroy = !!options.autoDestroy; // has it been destroyed
	
	  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	
	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
	
	  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
	
	  this.readingMore = false;
	  this.decoder = null;
	  this.encoding = null;
	
	  if (options.encoding) {
		if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
		this.decoder = new StringDecoder(options.encoding);
		this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  Duplex = Duplex || require('./_stream_duplex');
	  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the ReadableState constructor, at least with V8 6.5
	
	  var isDuplex = this instanceof Duplex;
	  this._readableState = new ReadableState(options, this, isDuplex); // legacy
	
	  this.readable = true;
	
	  if (options) {
		if (typeof options.read === 'function') this._read = options.read;
		if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }
	
	  Stream.call(this);
	}
	
	Object.defineProperty(Readable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		if (this._readableState === undefined) {
		  return false;
		}
	
		return this._readableState.destroyed;
	  },
	  set: function set(value) {
		// we ignore the value if the stream
		// has not been initialized yet
		if (!this._readableState) {
		  return;
		} // backward compatibility, the user is explicitly
		// managing destroyed
	
	
		this._readableState.destroyed = value;
	  }
	});
	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	
	Readable.prototype._destroy = function (err, cb) {
	  cb(err);
	}; // Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	
	
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;
	
	  if (!state.objectMode) {
		if (typeof chunk === 'string') {
		  encoding = encoding || state.defaultEncoding;
	
		  if (encoding !== state.encoding) {
			chunk = Buffer.from(chunk, encoding);
			encoding = '';
		  }
	
		  skipChunkCheck = true;
		}
	  } else {
		skipChunkCheck = true;
	  }
	
	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	}; // Unshift should *always* be something directly out of read()
	
	
	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};
	
	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  debug('readableAddChunk', chunk);
	  var state = stream._readableState;
	
	  if (chunk === null) {
		state.reading = false;
		onEofChunk(stream, state);
	  } else {
		var er;
		if (!skipChunkCheck) er = chunkInvalid(state, chunk);
	
		if (er) {
		  errorOrDestroy(stream, er);
		} else if (state.objectMode || chunk && chunk.length > 0) {
		  if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
			chunk = _uint8ArrayToBuffer(chunk);
		  }
	
		  if (addToFront) {
			if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
		  } else if (state.ended) {
			errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
		  } else if (state.destroyed) {
			return false;
		  } else {
			state.reading = false;
	
			if (state.decoder && !encoding) {
			  chunk = state.decoder.write(chunk);
			  if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
			} else {
			  addChunk(stream, state, chunk, false);
			}
		  }
		} else if (!addToFront) {
		  state.reading = false;
		  maybeReadMore(stream, state);
		}
	  } // We can push more data if we are below the highWaterMark.
	  // Also, if we have no data yet, we can stand some more bytes.
	  // This is to work around cases where hwm=0, such as the repl.
	
	
	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
	}
	
	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
		state.awaitDrain = 0;
		stream.emit('data', chunk);
	  } else {
		// update the buffer info.
		state.length += state.objectMode ? 1 : chunk.length;
		if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
		if (state.needReadable) emitReadable(stream);
	  }
	
	  maybeReadMore(stream, state);
	}
	
	function chunkInvalid(state, chunk) {
	  var er;
	
	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
		er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
	  }
	
	  return er;
	}
	
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	}; // backwards compatibility.
	
	
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
	  var decoder = new StringDecoder(enc);
	  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
	
	  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
	
	  var p = this._readableState.buffer.head;
	  var content = '';
	
	  while (p !== null) {
		content += decoder.write(p.data);
		p = p.next;
	  }
	
	  this._readableState.buffer.clear();
	
	  if (content !== '') this._readableState.buffer.push(content);
	  this._readableState.length = content.length;
	  return this;
	}; // Don't raise the hwm > 1GB
	
	
	var MAX_HWM = 0x40000000;
	
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
		// TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
		n = MAX_HWM;
	  } else {
		// Get the next highest power of 2 to prevent increasing hwm excessively in
		// tiny amounts
		n--;
		n |= n >>> 1;
		n |= n >>> 2;
		n |= n >>> 4;
		n |= n >>> 8;
		n |= n >>> 16;
		n++;
	  }
	
	  return n;
	} // This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	
	
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	
	  if (n !== n) {
		// Only flow one buffer at a time
		if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  } // If we're asking for more than the current hwm, then raise the hwm.
	
	
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n; // Don't have enough
	
	  if (!state.ended) {
		state.needReadable = true;
		return 0;
	  }
	
	  return state.length;
	} // you can override either this method, or the async _read(n) below.
	
	
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	
	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
		debug('read: emitReadable', state.length, state.ended);
		if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
		return null;
	  }
	
	  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
	
	  if (n === 0 && state.ended) {
		if (state.length === 0) endReadable(this);
		return null;
	  } // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	  // if we need a readable event, then we need to do some reading.
	
	
	  var doRead = state.needReadable;
	  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
	
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
		doRead = true;
		debug('length less than watermark', doRead);
	  } // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	
	
	  if (state.ended || state.reading) {
		doRead = false;
		debug('reading or ended', doRead);
	  } else if (doRead) {
		debug('do read');
		state.reading = true;
		state.sync = true; // if the length is currently zero, then we *need* a readable event.
	
		if (state.length === 0) state.needReadable = true; // call internal read method
	
		this._read(state.highWaterMark);
	
		state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
		// and we need to re-evaluate how much data we can return to the user.
	
		if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	
	  if (ret === null) {
		state.needReadable = state.length <= state.highWaterMark;
		n = 0;
	  } else {
		state.length -= n;
		state.awaitDrain = 0;
	  }
	
	  if (state.length === 0) {
		// If we have nothing in the buffer, then we want to know
		// as soon as we *do* get something into the buffer.
		if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
	
		if (nOrig !== n && state.ended) endReadable(this);
	  }
	
	  if (ret !== null) this.emit('data', ret);
	  return ret;
	};
	
	function onEofChunk(stream, state) {
	  debug('onEofChunk');
	  if (state.ended) return;
	
	  if (state.decoder) {
		var chunk = state.decoder.end();
	
		if (chunk && chunk.length) {
		  state.buffer.push(chunk);
		  state.length += state.objectMode ? 1 : chunk.length;
		}
	  }
	
	  state.ended = true;
	
	  if (state.sync) {
		// if we are sync, wait until next tick to emit the data.
		// Otherwise we risk emitting data in the flow()
		// the readable code triggers during a read() call
		emitReadable(stream);
	  } else {
		// emit 'readable' now to make sure it gets picked up.
		state.needReadable = false;
	
		if (!state.emittedReadable) {
		  state.emittedReadable = true;
		  emitReadable_(stream);
		}
	  }
	} // Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	
	
	function emitReadable(stream) {
	  var state = stream._readableState;
	  debug('emitReadable', state.needReadable, state.emittedReadable);
	  state.needReadable = false;
	
	  if (!state.emittedReadable) {
		debug('emitReadable', state.flowing);
		state.emittedReadable = true;
		process.nextTick(emitReadable_, stream);
	  }
	}
	
	function emitReadable_(stream) {
	  var state = stream._readableState;
	  debug('emitReadable_', state.destroyed, state.length, state.ended);
	
	  if (!state.destroyed && (state.length || state.ended)) {
		stream.emit('readable');
		state.emittedReadable = false;
	  } // The stream needs another readable event if
	  // 1. It is not flowing, as the flow mechanism will take
	  //    care of it.
	  // 2. It is not ended.
	  // 3. It is below the highWaterMark, so we can schedule
	  //    another readable later.
	
	
	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
	  flow(stream);
	} // at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	
	
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
		state.readingMore = true;
		process.nextTick(maybeReadMore_, stream, state);
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  // Attempt to read more data if we should.
	  //
	  // The conditions for reading more data are (one of):
	  // - Not enough data buffered (state.length < state.highWaterMark). The loop
	  //   is responsible for filling the buffer with enough data if such data
	  //   is available. If highWaterMark is 0 and we are not in the flowing mode
	  //   we should _not_ attempt to buffer any extra data. We'll get more data
	  //   when the stream consumer calls read() instead.
	  // - No data in the buffer, and the stream is in flowing mode. In this mode
	  //   the loop below is responsible for ensuring read() is called. Failing to
	  //   call read here would abort the flow and there's no other mechanism for
	  //   continuing the flow if the stream consumer has just subscribed to the
	  //   'data' event.
	  //
	  // In addition to the above conditions to keep reading data, the following
	  // conditions prevent the data from being read:
	  // - The stream has ended (state.ended).
	  // - There is already a pending 'read' operation (state.reading). This is a
	  //   case where the the stream has called the implementation defined _read()
	  //   method, but they are processing the call asynchronously and have _not_
	  //   called push() with new data. In this case we skip performing more
	  //   read()s. The execution ends in this method again after the _read() ends
	  //   up calling push() with more data.
	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
		var len = state.length;
		debug('maybeReadMore read 0');
		stream.read(0);
		if (len === state.length) // didn't get any data, stop spinning.
		  break;
	  }
	
	  state.readingMore = false;
	} // abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	
	
	Readable.prototype._read = function (n) {
	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
	};
	
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
		case 0:
		  state.pipes = dest;
		  break;
	
		case 1:
		  state.pipes = [state.pipes, dest];
		  break;
	
		default:
		  state.pipes.push(dest);
		  break;
	  }
	
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
	  dest.on('unpipe', onunpipe);
	
	  function onunpipe(readable, unpipeInfo) {
		debug('onunpipe');
	
		if (readable === src) {
		  if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
			unpipeInfo.hasUnpiped = true;
			cleanup();
		  }
		}
	  }
	
	  function onend() {
		debug('onend');
		dest.end();
	  } // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	
	
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	  var cleanedUp = false;
	
	  function cleanup() {
		debug('cleanup'); // cleanup event handlers once the pipe is broken
	
		dest.removeListener('close', onclose);
		dest.removeListener('finish', onfinish);
		dest.removeListener('drain', ondrain);
		dest.removeListener('error', onerror);
		dest.removeListener('unpipe', onunpipe);
		src.removeListener('end', onend);
		src.removeListener('end', unpipe);
		src.removeListener('data', ondata);
		cleanedUp = true; // if the reader is waiting for a drain event from this
		// specific writer, then it would cause it to never start
		// flowing again.
		// So, if this is awaiting a drain, then we just call it now.
		// If we don't know, then assume that we are waiting for one.
	
		if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	
	  src.on('data', ondata);
	
	  function ondata(chunk) {
		debug('ondata');
		var ret = dest.write(chunk);
		debug('dest.write', ret);
	
		if (ret === false) {
		  // If the user unpiped during `dest.write()`, it is possible
		  // to get stuck in a permanently paused state if that write
		  // also returned false.
		  // => Check whether `dest` is still a piping destination.
		  if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
			debug('false write response, pause', state.awaitDrain);
			state.awaitDrain++;
		  }
	
		  src.pause();
		}
	  } // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	
	
	  function onerror(er) {
		debug('onerror', er);
		unpipe();
		dest.removeListener('error', onerror);
		if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
	  } // Make sure our error handler is attached before userland ones.
	
	
	  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
	
	  function onclose() {
		dest.removeListener('finish', onfinish);
		unpipe();
	  }
	
	  dest.once('close', onclose);
	
	  function onfinish() {
		debug('onfinish');
		dest.removeListener('close', onclose);
		unpipe();
	  }
	
	  dest.once('finish', onfinish);
	
	  function unpipe() {
		debug('unpipe');
		src.unpipe(dest);
	  } // tell the dest that it's being piped to
	
	
	  dest.emit('pipe', src); // start the flow if it hasn't been started already.
	
	  if (!state.flowing) {
		debug('pipe resume');
		src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function pipeOnDrainFunctionResult() {
		var state = src._readableState;
		debug('pipeOnDrain', state.awaitDrain);
		if (state.awaitDrain) state.awaitDrain--;
	
		if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
		  state.flowing = true;
		  flow(src);
		}
	  };
	}
	
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = {
		hasUnpiped: false
	  }; // if we're not piping anywhere, then do nothing.
	
	  if (state.pipesCount === 0) return this; // just one destination.  most common case.
	
	  if (state.pipesCount === 1) {
		// passed in one, but it's not the right one.
		if (dest && dest !== state.pipes) return this;
		if (!dest) dest = state.pipes; // got a match.
	
		state.pipes = null;
		state.pipesCount = 0;
		state.flowing = false;
		if (dest) dest.emit('unpipe', this, unpipeInfo);
		return this;
	  } // slow case. multiple pipe destinations.
	
	
	  if (!dest) {
		// remove all.
		var dests = state.pipes;
		var len = state.pipesCount;
		state.pipes = null;
		state.pipesCount = 0;
		state.flowing = false;
	
		for (var i = 0; i < len; i++) {
		  dests[i].emit('unpipe', this, {
			hasUnpiped: false
		  });
		}
	
		return this;
	  } // try to find the right one.
	
	
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	  dest.emit('unpipe', this, unpipeInfo);
	  return this;
	}; // set up data events if they are asked for
	// Ensure readable listeners eventually get something
	
	
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	  var state = this._readableState;
	
	  if (ev === 'data') {
		// update readableListening so that resume() may be a no-op
		// a few lines down. This is needed to support once('readable').
		state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
	
		if (state.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
		if (!state.endEmitted && !state.readableListening) {
		  state.readableListening = state.needReadable = true;
		  state.flowing = false;
		  state.emittedReadable = false;
		  debug('on readable', state.length, state.reading);
	
		  if (state.length) {
			emitReadable(this);
		  } else if (!state.reading) {
			process.nextTick(nReadingNextTick, this);
		  }
		}
	  }
	
	  return res;
	};
	
	Readable.prototype.addListener = Readable.prototype.on;
	
	Readable.prototype.removeListener = function (ev, fn) {
	  var res = Stream.prototype.removeListener.call(this, ev, fn);
	
	  if (ev === 'readable') {
		// We need to check if there is someone still listening to
		// readable and reset the state. However this needs to happen
		// after readable has been emitted but before I/O (nextTick) to
		// support once('readable', fn) cycles. This means that calling
		// resume within the same tick will have no
		// effect.
		process.nextTick(updateReadableListening, this);
	  }
	
	  return res;
	};
	
	Readable.prototype.removeAllListeners = function (ev) {
	  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
	
	  if (ev === 'readable' || ev === undefined) {
		// We need to check if there is someone still listening to
		// readable and reset the state. However this needs to happen
		// after readable has been emitted but before I/O (nextTick) to
		// support once('readable', fn) cycles. This means that calling
		// resume within the same tick will have no
		// effect.
		process.nextTick(updateReadableListening, this);
	  }
	
	  return res;
	};
	
	function updateReadableListening(self) {
	  var state = self._readableState;
	  state.readableListening = self.listenerCount('readable') > 0;
	
	  if (state.resumeScheduled && !state.paused) {
		// flowing needs to be set to true now, otherwise
		// the upcoming resume will not flow.
		state.flowing = true; // crude way to check if we should resume
	  } else if (self.listenerCount('data') > 0) {
		self.resume();
	  }
	}
	
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	} // pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	
	
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	
	  if (!state.flowing) {
		debug('resume'); // we flow only if there is no one listening
		// for readable, but we still have to call
		// resume()
	
		state.flowing = !state.readableListening;
		resume(this, state);
	  }
	
	  state.paused = false;
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
		state.resumeScheduled = true;
		process.nextTick(resume_, stream, state);
	  }
	}
	
	function resume_(stream, state) {
	  debug('resume', state.reading);
	
	  if (!state.reading) {
		stream.read(0);
	  }
	
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	
	  if (this._readableState.flowing !== false) {
		debug('pause');
		this._readableState.flowing = false;
		this.emit('pause');
	  }
	
	  this._readableState.paused = true;
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	
	  while (state.flowing && stream.read() !== null) {
		;
	  }
	} // wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	
	
	Readable.prototype.wrap = function (stream) {
	  var _this = this;
	
	  var state = this._readableState;
	  var paused = false;
	  stream.on('end', function () {
		debug('wrapped end');
	
		if (state.decoder && !state.ended) {
		  var chunk = state.decoder.end();
		  if (chunk && chunk.length) _this.push(chunk);
		}
	
		_this.push(null);
	  });
	  stream.on('data', function (chunk) {
		debug('wrapped data');
		if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
	
		if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	
		var ret = _this.push(chunk);
	
		if (!ret) {
		  paused = true;
		  stream.pause();
		}
	  }); // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	
	  for (var i in stream) {
		if (this[i] === undefined && typeof stream[i] === 'function') {
		  this[i] = function methodWrap(method) {
			return function methodWrapReturnFunction() {
			  return stream[method].apply(stream, arguments);
			};
		  }(i);
		}
	  } // proxy certain important events.
	
	
	  for (var n = 0; n < kProxyEvents.length; n++) {
		stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  } // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	
	
	  this._read = function (n) {
		debug('wrapped _read', n);
	
		if (paused) {
		  paused = false;
		  stream.resume();
		}
	  };
	
	  return this;
	};
	
	if (typeof Symbol === 'function') {
	  Readable.prototype[Symbol.asyncIterator] = function () {
		if (createReadableStreamAsyncIterator === undefined) {
		  createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
		}
	
		return createReadableStreamAsyncIterator(this);
	  };
	}
	
	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		return this._readableState.highWaterMark;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		return this._readableState && this._readableState.buffer;
	  }
	});
	Object.defineProperty(Readable.prototype, 'readableFlowing', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		return this._readableState.flowing;
	  },
	  set: function set(state) {
		if (this._readableState) {
		  this._readableState.flowing = state;
		}
	  }
	}); // exposed for testing purposes only.
	
	Readable._fromList = fromList;
	Object.defineProperty(Readable.prototype, 'readableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		return this._readableState.length;
	  }
	}); // Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
		// read it all, truncate the list
		if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
		state.buffer.clear();
	  } else {
		// read part of list
		ret = state.buffer.consume(n, state.decoder);
	  }
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	  debug('endReadable', state.endEmitted);
	
	  if (!state.endEmitted) {
		state.ended = true;
		process.nextTick(endReadableNT, state, stream);
	  }
	}
	
	function endReadableNT(state, stream) {
	  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
	
	  if (!state.endEmitted && state.length === 0) {
		state.endEmitted = true;
		stream.readable = false;
		stream.emit('end');
	
		if (state.autoDestroy) {
		  // In case of duplex streams we need a way to detect
		  // if the writable side is ready for autoDestroy as well
		  var wState = stream._writableState;
	
		  if (!wState || wState.autoDestroy && wState.finished) {
			stream.destroy();
		  }
		}
	  }
	}
	
	if (typeof Symbol === 'function') {
	  Readable.from = function (iterable, opts) {
		if (from === undefined) {
		  from = require('./internal/streams/from');
		}
	
		return from(Readable, iterable, opts);
	  };
	}
	
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
		if (xs[i] === x) return i;
	  }
	
	  return -1;
	}
	}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../errors":74,"./_stream_duplex":75,"./internal/streams/async_iterator":80,"./internal/streams/buffer_list":81,"./internal/streams/destroy":82,"./internal/streams/from":84,"./internal/streams/state":86,"./internal/streams/stream":87,"_process":133,"buffer":125,"events":127,"inherits":59,"string_decoder/":104,"util":124}],78:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	'use strict';
	
	module.exports = Transform;
	
	var _require$codes = require('../errors').codes,
		ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
		ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
		ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
		ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
	
	var Duplex = require('./_stream_duplex');
	
	require('inherits')(Transform, Duplex);
	
	function afterTransform(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;
	  var cb = ts.writecb;
	
	  if (cb === null) {
		return this.emit('error', new ERR_MULTIPLE_CALLBACK());
	  }
	
	  ts.writechunk = null;
	  ts.writecb = null;
	  if (data != null) // single equals check for both `null` and `undefined`
		this.push(data);
	  cb(er);
	  var rs = this._readableState;
	  rs.reading = false;
	
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
		this._read(rs.highWaterMark);
	  }
	}
	
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	  Duplex.call(this, options);
	  this._transformState = {
		afterTransform: afterTransform.bind(this),
		needTransform: false,
		transforming: false,
		writecb: null,
		writechunk: null,
		writeencoding: null
	  }; // start out asking for a readable event once data is transformed.
	
	  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	
	  this._readableState.sync = false;
	
	  if (options) {
		if (typeof options.transform === 'function') this._transform = options.transform;
		if (typeof options.flush === 'function') this._flush = options.flush;
	  } // When the writable side finishes, then flush out anything remaining.
	
	
	  this.on('prefinish', prefinish);
	}
	
	function prefinish() {
	  var _this = this;
	
	  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
		this._flush(function (er, data) {
		  done(_this, er, data);
		});
	  } else {
		done(this, null, null);
	  }
	}
	
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	}; // This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	
	
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
	};
	
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	
	  if (!ts.transforming) {
		var rs = this._readableState;
		if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	}; // Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	
	
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && !ts.transforming) {
		ts.transforming = true;
	
		this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
		// mark that we need a transform, so that any data that comes in
		// will get processed, now that we've asked for it.
		ts.needTransform = true;
	  }
	};
	
	Transform.prototype._destroy = function (err, cb) {
	  Duplex.prototype._destroy.call(this, err, function (err2) {
		cb(err2);
	  });
	};
	
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	  if (data != null) // single equals check for both `null` and `undefined`
		stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	
	  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
	  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
	  return stream.push(null);
	}
	},{"../errors":74,"./_stream_duplex":75,"inherits":59}],79:[function(require,module,exports){
	(function (process,global){(function (){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	'use strict';
	
	module.exports = Writable;
	/* <replacement> */
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	} // It seems a linked list but it is not
	// there will be only 2 of these for each stream
	
	
	function CorkedRequest(state) {
	  var _this = this;
	
	  this.next = null;
	  this.entry = null;
	
	  this.finish = function () {
		onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */
	
	/*<replacement>*/
	
	
	var Duplex;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	/*<replacement>*/
	
	var internalUtil = {
	  deprecate: require('util-deprecate')
	};
	/*</replacement>*/
	
	/*<replacement>*/
	
	var Stream = require('./internal/streams/stream');
	/*</replacement>*/
	
	
	var Buffer = require('buffer').Buffer;
	
	var OurUint8Array = global.Uint8Array || function () {};
	
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	
	var destroyImpl = require('./internal/streams/destroy');
	
	var _require = require('./internal/streams/state'),
		getHighWaterMark = _require.getHighWaterMark;
	
	var _require$codes = require('../errors').codes,
		ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
		ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
		ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
		ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
		ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
		ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
		ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
		ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
	
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	
	require('inherits')(Writable, Stream);
	
	function nop() {}
	
	function WritableState(options, stream, isDuplex) {
	  Duplex = Duplex || require('./_stream_duplex');
	  options = options || {}; // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream,
	  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
	
	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	
	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	
	  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
	
	  this.finalCalled = false; // drain event flag.
	
	  this.needDrain = false; // at the start of calling end()
	
	  this.ending = false; // when end() has been called, and returned
	
	  this.ended = false; // when 'finish' is emitted
	
	  this.finished = false; // has it been destroyed
	
	  this.destroyed = false; // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	
	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	
	  this.length = 0; // a flag to see when we're in the middle of a write.
	
	  this.writing = false; // when true all writes will be buffered until .uncork() call
	
	  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	
	  this.sync = true; // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	
	  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
	
	  this.onwrite = function (er) {
		onwrite(stream, er);
	  }; // the callback that the user supplies to write(chunk,encoding,cb)
	
	
	  this.writecb = null; // the amount that is being written when _write is called.
	
	  this.writelen = 0;
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	
	  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	
	  this.prefinished = false; // True if the error was already emitted and should not be thrown again
	
	  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
	
	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
	
	  this.autoDestroy = !!options.autoDestroy; // count buffered requests
	
	  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	
	  while (current) {
		out.push(current);
		current = current.next;
	  }
	
	  return out;
	};
	
	(function () {
	  try {
		Object.defineProperty(WritableState.prototype, 'buffer', {
		  get: internalUtil.deprecate(function writableStateBufferGetter() {
			return this.getBuffer();
		  }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
		});
	  } catch (_) {}
	})(); // Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	
	
	var realHasInstance;
	
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
		value: function value(object) {
		  if (realHasInstance.call(this, object)) return true;
		  if (this !== Writable) return false;
		  return object && object._writableState instanceof WritableState;
		}
	  });
	} else {
	  realHasInstance = function realHasInstance(object) {
		return object instanceof this;
	  };
	}
	
	function Writable(options) {
	  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the WritableState constructor, at least with V8 6.5
	
	  var isDuplex = this instanceof Duplex;
	  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
	  this._writableState = new WritableState(options, this, isDuplex); // legacy.
	
	  this.writable = true;
	
	  if (options) {
		if (typeof options.write === 'function') this._write = options.write;
		if (typeof options.writev === 'function') this._writev = options.writev;
		if (typeof options.destroy === 'function') this._destroy = options.destroy;
		if (typeof options.final === 'function') this._final = options.final;
	  }
	
	  Stream.call(this);
	} // Otherwise people can pipe Writable streams, which is just wrong.
	
	
	Writable.prototype.pipe = function () {
	  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
	};
	
	function writeAfterEnd(stream, cb) {
	  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
	
	  errorOrDestroy(stream, er);
	  process.nextTick(cb, er);
	} // Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	
	
	function validChunk(stream, state, chunk, cb) {
	  var er;
	
	  if (chunk === null) {
		er = new ERR_STREAM_NULL_VALUES();
	  } else if (typeof chunk !== 'string' && !state.objectMode) {
		er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
	  }
	
	  if (er) {
		errorOrDestroy(stream, er);
		process.nextTick(cb, er);
		return false;
	  }
	
	  return true;
	}
	
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	
	  var isBuf = !state.objectMode && _isUint8Array(chunk);
	
	  if (isBuf && !Buffer.isBuffer(chunk)) {
		chunk = _uint8ArrayToBuffer(chunk);
	  }
	
	  if (typeof encoding === 'function') {
		cb = encoding;
		encoding = null;
	  }
	
	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	  if (typeof cb !== 'function') cb = nop;
	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
		state.pendingcb++;
		ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	  return ret;
	};
	
	Writable.prototype.cork = function () {
	  this._writableState.corked++;
	};
	
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	
	  if (state.corked) {
		state.corked--;
		if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	
	Object.defineProperty(Writable.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		return this._writableState && this._writableState.getBuffer();
	  }
	});
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
		chunk = Buffer.from(chunk, encoding);
	  }
	
	  return chunk;
	}
	
	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		return this._writableState.highWaterMark;
	  }
	}); // if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
		var newChunk = decodeChunk(state, chunk, encoding);
	
		if (chunk !== newChunk) {
		  isBuf = true;
		  encoding = 'buffer';
		  chunk = newChunk;
		}
	  }
	
	  var len = state.objectMode ? 1 : chunk.length;
	  state.length += len;
	  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
	
	  if (!ret) state.needDrain = true;
	
	  if (state.writing || state.corked) {
		var last = state.lastBufferedRequest;
		state.lastBufferedRequest = {
		  chunk: chunk,
		  encoding: encoding,
		  isBuf: isBuf,
		  callback: cb,
		  next: null
		};
	
		if (last) {
		  last.next = state.lastBufferedRequest;
		} else {
		  state.bufferedRequest = state.lastBufferedRequest;
		}
	
		state.bufferedRequestCount += 1;
	  } else {
		doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	
	  if (sync) {
		// defer the callback if we are being called synchronously
		// to avoid piling up things on the stack
		process.nextTick(cb, er); // this can emit finish, and it will always happen
		// after error
	
		process.nextTick(finishMaybe, stream, state);
		stream._writableState.errorEmitted = true;
		errorOrDestroy(stream, er);
	  } else {
		// the caller expect this to happen before if
		// it is async
		cb(er);
		stream._writableState.errorEmitted = true;
		errorOrDestroy(stream, er); // this can emit finish, but finish must
		// always follow error
	
		finishMaybe(stream, state);
	  }
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
	  onwriteStateUpdate(state);
	  if (er) onwriteError(stream, state, sync, er, cb);else {
		// Check if we're actually ready to finish, but don't emit yet
		var finished = needFinish(state) || stream.destroyed;
	
		if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
		  clearBuffer(stream, state);
		}
	
		if (sync) {
		  process.nextTick(afterWrite, stream, state, finished, cb);
		} else {
		  afterWrite(stream, state, finished, cb);
		}
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	} // Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	
	
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
		state.needDrain = false;
		stream.emit('drain');
	  }
	} // if there's something in the buffer waiting, then process it
	
	
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	
	  if (stream._writev && entry && entry.next) {
		// Fast case, write everything using _writev()
		var l = state.bufferedRequestCount;
		var buffer = new Array(l);
		var holder = state.corkedRequestsFree;
		holder.entry = entry;
		var count = 0;
		var allBuffers = true;
	
		while (entry) {
		  buffer[count] = entry;
		  if (!entry.isBuf) allBuffers = false;
		  entry = entry.next;
		  count += 1;
		}
	
		buffer.allBuffers = allBuffers;
		doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
		// as the hot path ends with doWrite
	
		state.pendingcb++;
		state.lastBufferedRequest = null;
	
		if (holder.next) {
		  state.corkedRequestsFree = holder.next;
		  holder.next = null;
		} else {
		  state.corkedRequestsFree = new CorkedRequest(state);
		}
	
		state.bufferedRequestCount = 0;
	  } else {
		// Slow case, write chunks one-by-one
		while (entry) {
		  var chunk = entry.chunk;
		  var encoding = entry.encoding;
		  var cb = entry.callback;
		  var len = state.objectMode ? 1 : chunk.length;
		  doWrite(stream, state, false, len, chunk, encoding, cb);
		  entry = entry.next;
		  state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
		  // it means that we need to wait until it does.
		  // also, that means that the chunk and cb are currently
		  // being processed, so move the buffer counter past them.
	
		  if (state.writing) {
			break;
		  }
		}
	
		if (entry === null) state.lastBufferedRequest = null;
	  }
	
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
		cb = chunk;
		chunk = null;
		encoding = null;
	  } else if (typeof encoding === 'function') {
		cb = encoding;
		encoding = null;
	  }
	
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
	
	  if (state.corked) {
		state.corked = 1;
		this.uncork();
	  } // ignore unnecessary end() calls.
	
	
	  if (!state.ending) endWritable(this, state, cb);
	  return this;
	};
	
	Object.defineProperty(Writable.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		return this._writableState.length;
	  }
	});
	
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	
	function callFinal(stream, state) {
	  stream._final(function (err) {
		state.pendingcb--;
	
		if (err) {
		  errorOrDestroy(stream, err);
		}
	
		state.prefinished = true;
		stream.emit('prefinish');
		finishMaybe(stream, state);
	  });
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
		if (typeof stream._final === 'function' && !state.destroyed) {
		  state.pendingcb++;
		  state.finalCalled = true;
		  process.nextTick(callFinal, stream, state);
		} else {
		  state.prefinished = true;
		  stream.emit('prefinish');
		}
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	
	  if (need) {
		prefinish(stream, state);
	
		if (state.pendingcb === 0) {
		  state.finished = true;
		  stream.emit('finish');
	
		  if (state.autoDestroy) {
			// In case of duplex streams we need a way to detect
			// if the readable side is ready for autoDestroy as well
			var rState = stream._readableState;
	
			if (!rState || rState.autoDestroy && rState.endEmitted) {
			  stream.destroy();
			}
		  }
		}
	  }
	
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	
	  if (cb) {
		if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
	  }
	
	  state.ended = true;
	  stream.writable = false;
	}
	
	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	
	  while (entry) {
		var cb = entry.callback;
		state.pendingcb--;
		cb(err);
		entry = entry.next;
	  } // reuse the free corkReq.
	
	
	  state.corkedRequestsFree.next = corkReq;
	}
	
	Object.defineProperty(Writable.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
		if (this._writableState === undefined) {
		  return false;
		}
	
		return this._writableState.destroyed;
	  },
	  set: function set(value) {
		// we ignore the value if the stream
		// has not been initialized yet
		if (!this._writableState) {
		  return;
		} // backward compatibility, the user is explicitly
		// managing destroyed
	
	
		this._writableState.destroyed = value;
	  }
	});
	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	
	Writable.prototype._destroy = function (err, cb) {
	  cb(err);
	};
	}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../errors":74,"./_stream_duplex":75,"./internal/streams/destroy":82,"./internal/streams/state":86,"./internal/streams/stream":87,"_process":133,"buffer":125,"inherits":59,"util-deprecate":107}],80:[function(require,module,exports){
	(function (process){(function (){
	'use strict';
	
	var _Object$setPrototypeO;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var finished = require('./end-of-stream');
	
	var kLastResolve = Symbol('lastResolve');
	var kLastReject = Symbol('lastReject');
	var kError = Symbol('error');
	var kEnded = Symbol('ended');
	var kLastPromise = Symbol('lastPromise');
	var kHandlePromise = Symbol('handlePromise');
	var kStream = Symbol('stream');
	
	function createIterResult(value, done) {
	  return {
		value: value,
		done: done
	  };
	}
	
	function readAndResolve(iter) {
	  var resolve = iter[kLastResolve];
	
	  if (resolve !== null) {
		var data = iter[kStream].read(); // we defer if data is null
		// we can be expecting either 'end' or
		// 'error'
	
		if (data !== null) {
		  iter[kLastPromise] = null;
		  iter[kLastResolve] = null;
		  iter[kLastReject] = null;
		  resolve(createIterResult(data, false));
		}
	  }
	}
	
	function onReadable(iter) {
	  // we wait for the next tick, because it might
	  // emit an error with process.nextTick
	  process.nextTick(readAndResolve, iter);
	}
	
	function wrapForNext(lastPromise, iter) {
	  return function (resolve, reject) {
		lastPromise.then(function () {
		  if (iter[kEnded]) {
			resolve(createIterResult(undefined, true));
			return;
		  }
	
		  iter[kHandlePromise](resolve, reject);
		}, reject);
	  };
	}
	
	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
	  get stream() {
		return this[kStream];
	  },
	
	  next: function next() {
		var _this = this;
	
		// if we have detected an error in the meanwhile
		// reject straight away
		var error = this[kError];
	
		if (error !== null) {
		  return Promise.reject(error);
		}
	
		if (this[kEnded]) {
		  return Promise.resolve(createIterResult(undefined, true));
		}
	
		if (this[kStream].destroyed) {
		  // We need to defer via nextTick because if .destroy(err) is
		  // called, the error will be emitted via nextTick, and
		  // we cannot guarantee that there is no error lingering around
		  // waiting to be emitted.
		  return new Promise(function (resolve, reject) {
			process.nextTick(function () {
			  if (_this[kError]) {
				reject(_this[kError]);
			  } else {
				resolve(createIterResult(undefined, true));
			  }
			});
		  });
		} // if we have multiple next() calls
		// we will wait for the previous Promise to finish
		// this logic is optimized to support for await loops,
		// where next() is only called once at a time
	
	
		var lastPromise = this[kLastPromise];
		var promise;
	
		if (lastPromise) {
		  promise = new Promise(wrapForNext(lastPromise, this));
		} else {
		  // fast path needed to support multiple this.push()
		  // without triggering the next() queue
		  var data = this[kStream].read();
	
		  if (data !== null) {
			return Promise.resolve(createIterResult(data, false));
		  }
	
		  promise = new Promise(this[kHandlePromise]);
		}
	
		this[kLastPromise] = promise;
		return promise;
	  }
	}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
	  return this;
	}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
	  var _this2 = this;
	
	  // destroy(err, cb) is a private API
	  // we can guarantee we have that here, because we control the
	  // Readable class this is attached to
	  return new Promise(function (resolve, reject) {
		_this2[kStream].destroy(null, function (err) {
		  if (err) {
			reject(err);
			return;
		  }
	
		  resolve(createIterResult(undefined, true));
		});
	  });
	}), _Object$setPrototypeO), AsyncIteratorPrototype);
	
	var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
	  var _Object$create;
	
	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
		value: stream,
		writable: true
	  }), _defineProperty(_Object$create, kLastResolve, {
		value: null,
		writable: true
	  }), _defineProperty(_Object$create, kLastReject, {
		value: null,
		writable: true
	  }), _defineProperty(_Object$create, kError, {
		value: null,
		writable: true
	  }), _defineProperty(_Object$create, kEnded, {
		value: stream._readableState.endEmitted,
		writable: true
	  }), _defineProperty(_Object$create, kHandlePromise, {
		value: function value(resolve, reject) {
		  var data = iterator[kStream].read();
	
		  if (data) {
			iterator[kLastPromise] = null;
			iterator[kLastResolve] = null;
			iterator[kLastReject] = null;
			resolve(createIterResult(data, false));
		  } else {
			iterator[kLastResolve] = resolve;
			iterator[kLastReject] = reject;
		  }
		},
		writable: true
	  }), _Object$create));
	  iterator[kLastPromise] = null;
	  finished(stream, function (err) {
		if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
		  var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
		  // returned by next() and store the error
	
		  if (reject !== null) {
			iterator[kLastPromise] = null;
			iterator[kLastResolve] = null;
			iterator[kLastReject] = null;
			reject(err);
		  }
	
		  iterator[kError] = err;
		  return;
		}
	
		var resolve = iterator[kLastResolve];
	
		if (resolve !== null) {
		  iterator[kLastPromise] = null;
		  iterator[kLastResolve] = null;
		  iterator[kLastReject] = null;
		  resolve(createIterResult(undefined, true));
		}
	
		iterator[kEnded] = true;
	  });
	  stream.on('readable', onReadable.bind(null, iterator));
	  return iterator;
	};
	
	module.exports = createReadableStreamAsyncIterator;
	}).call(this)}).call(this,require('_process'))
	},{"./end-of-stream":83,"_process":133}],81:[function(require,module,exports){
	'use strict';
	
	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }
	
	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
	
	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
	
	var _require = require('buffer'),
		Buffer = _require.Buffer;
	
	var _require2 = require('util'),
		inspect = _require2.inspect;
	
	var custom = inspect && inspect.custom || 'inspect';
	
	function copyBuffer(src, target, offset) {
	  Buffer.prototype.copy.call(src, target, offset);
	}
	
	module.exports =
	/*#__PURE__*/
	function () {
	  function BufferList() {
		_classCallCheck(this, BufferList);
	
		this.head = null;
		this.tail = null;
		this.length = 0;
	  }
	
	  _createClass(BufferList, [{
		key: "push",
		value: function push(v) {
		  var entry = {
			data: v,
			next: null
		  };
		  if (this.length > 0) this.tail.next = entry;else this.head = entry;
		  this.tail = entry;
		  ++this.length;
		}
	  }, {
		key: "unshift",
		value: function unshift(v) {
		  var entry = {
			data: v,
			next: this.head
		  };
		  if (this.length === 0) this.tail = entry;
		  this.head = entry;
		  ++this.length;
		}
	  }, {
		key: "shift",
		value: function shift() {
		  if (this.length === 0) return;
		  var ret = this.head.data;
		  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
		  --this.length;
		  return ret;
		}
	  }, {
		key: "clear",
		value: function clear() {
		  this.head = this.tail = null;
		  this.length = 0;
		}
	  }, {
		key: "join",
		value: function join(s) {
		  if (this.length === 0) return '';
		  var p = this.head;
		  var ret = '' + p.data;
	
		  while (p = p.next) {
			ret += s + p.data;
		  }
	
		  return ret;
		}
	  }, {
		key: "concat",
		value: function concat(n) {
		  if (this.length === 0) return Buffer.alloc(0);
		  var ret = Buffer.allocUnsafe(n >>> 0);
		  var p = this.head;
		  var i = 0;
	
		  while (p) {
			copyBuffer(p.data, ret, i);
			i += p.data.length;
			p = p.next;
		  }
	
		  return ret;
		} // Consumes a specified amount of bytes or characters from the buffered data.
	
	  }, {
		key: "consume",
		value: function consume(n, hasStrings) {
		  var ret;
	
		  if (n < this.head.data.length) {
			// `slice` is the same for buffers and strings.
			ret = this.head.data.slice(0, n);
			this.head.data = this.head.data.slice(n);
		  } else if (n === this.head.data.length) {
			// First chunk is a perfect match.
			ret = this.shift();
		  } else {
			// Result spans more than one buffer.
			ret = hasStrings ? this._getString(n) : this._getBuffer(n);
		  }
	
		  return ret;
		}
	  }, {
		key: "first",
		value: function first() {
		  return this.head.data;
		} // Consumes a specified amount of characters from the buffered data.
	
	  }, {
		key: "_getString",
		value: function _getString(n) {
		  var p = this.head;
		  var c = 1;
		  var ret = p.data;
		  n -= ret.length;
	
		  while (p = p.next) {
			var str = p.data;
			var nb = n > str.length ? str.length : n;
			if (nb === str.length) ret += str;else ret += str.slice(0, n);
			n -= nb;
	
			if (n === 0) {
			  if (nb === str.length) {
				++c;
				if (p.next) this.head = p.next;else this.head = this.tail = null;
			  } else {
				this.head = p;
				p.data = str.slice(nb);
			  }
	
			  break;
			}
	
			++c;
		  }
	
		  this.length -= c;
		  return ret;
		} // Consumes a specified amount of bytes from the buffered data.
	
	  }, {
		key: "_getBuffer",
		value: function _getBuffer(n) {
		  var ret = Buffer.allocUnsafe(n);
		  var p = this.head;
		  var c = 1;
		  p.data.copy(ret);
		  n -= p.data.length;
	
		  while (p = p.next) {
			var buf = p.data;
			var nb = n > buf.length ? buf.length : n;
			buf.copy(ret, ret.length - n, 0, nb);
			n -= nb;
	
			if (n === 0) {
			  if (nb === buf.length) {
				++c;
				if (p.next) this.head = p.next;else this.head = this.tail = null;
			  } else {
				this.head = p;
				p.data = buf.slice(nb);
			  }
	
			  break;
			}
	
			++c;
		  }
	
		  this.length -= c;
		  return ret;
		} // Make sure the linked list only shows the minimal necessary information.
	
	  }, {
		key: custom,
		value: function value(_, options) {
		  return inspect(this, _objectSpread({}, options, {
			// Only inspect one level.
			depth: 0,
			// It should not recurse.
			customInspect: false
		  }));
		}
	  }]);
	
	  return BufferList;
	}();
	},{"buffer":125,"util":124}],82:[function(require,module,exports){
	(function (process){(function (){
	'use strict'; // undocumented cb() API, needed for core, not for public API
	
	function destroy(err, cb) {
	  var _this = this;
	
	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;
	
	  if (readableDestroyed || writableDestroyed) {
		if (cb) {
		  cb(err);
		} else if (err) {
		  if (!this._writableState) {
			process.nextTick(emitErrorNT, this, err);
		  } else if (!this._writableState.errorEmitted) {
			this._writableState.errorEmitted = true;
			process.nextTick(emitErrorNT, this, err);
		  }
		}
	
		return this;
	  } // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks
	
	
	  if (this._readableState) {
		this._readableState.destroyed = true;
	  } // if this is a duplex stream mark the writable part as destroyed as well
	
	
	  if (this._writableState) {
		this._writableState.destroyed = true;
	  }
	
	  this._destroy(err || null, function (err) {
		if (!cb && err) {
		  if (!_this._writableState) {
			process.nextTick(emitErrorAndCloseNT, _this, err);
		  } else if (!_this._writableState.errorEmitted) {
			_this._writableState.errorEmitted = true;
			process.nextTick(emitErrorAndCloseNT, _this, err);
		  } else {
			process.nextTick(emitCloseNT, _this);
		  }
		} else if (cb) {
		  process.nextTick(emitCloseNT, _this);
		  cb(err);
		} else {
		  process.nextTick(emitCloseNT, _this);
		}
	  });
	
	  return this;
	}
	
	function emitErrorAndCloseNT(self, err) {
	  emitErrorNT(self, err);
	  emitCloseNT(self);
	}
	
	function emitCloseNT(self) {
	  if (self._writableState && !self._writableState.emitClose) return;
	  if (self._readableState && !self._readableState.emitClose) return;
	  self.emit('close');
	}
	
	function undestroy() {
	  if (this._readableState) {
		this._readableState.destroyed = false;
		this._readableState.reading = false;
		this._readableState.ended = false;
		this._readableState.endEmitted = false;
	  }
	
	  if (this._writableState) {
		this._writableState.destroyed = false;
		this._writableState.ended = false;
		this._writableState.ending = false;
		this._writableState.finalCalled = false;
		this._writableState.prefinished = false;
		this._writableState.finished = false;
		this._writableState.errorEmitted = false;
	  }
	}
	
	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}
	
	function errorOrDestroy(stream, err) {
	  // We have tests that rely on errors being emitted
	  // in the same tick, so changing this is semver major.
	  // For now when you opt-in to autoDestroy we allow
	  // the error to be emitted nextTick. In a future
	  // semver major update we should change the default to this.
	  var rState = stream._readableState;
	  var wState = stream._writableState;
	  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
	}
	
	module.exports = {
	  destroy: destroy,
	  undestroy: undestroy,
	  errorOrDestroy: errorOrDestroy
	};
	}).call(this)}).call(this,require('_process'))
	},{"_process":133}],83:[function(require,module,exports){
	// Ported from https://github.com/mafintosh/end-of-stream with
	// permission from the author, Mathias Buus (@mafintosh).
	'use strict';
	
	var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
	
	function once(callback) {
	  var called = false;
	  return function () {
		if (called) return;
		called = true;
	
		for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		  args[_key] = arguments[_key];
		}
	
		callback.apply(this, args);
	  };
	}
	
	function noop() {}
	
	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}
	
	function eos(stream, opts, callback) {
	  if (typeof opts === 'function') return eos(stream, null, opts);
	  if (!opts) opts = {};
	  callback = once(callback || noop);
	  var readable = opts.readable || opts.readable !== false && stream.readable;
	  var writable = opts.writable || opts.writable !== false && stream.writable;
	
	  var onlegacyfinish = function onlegacyfinish() {
		if (!stream.writable) onfinish();
	  };
	
	  var writableEnded = stream._writableState && stream._writableState.finished;
	
	  var onfinish = function onfinish() {
		writable = false;
		writableEnded = true;
		if (!readable) callback.call(stream);
	  };
	
	  var readableEnded = stream._readableState && stream._readableState.endEmitted;
	
	  var onend = function onend() {
		readable = false;
		readableEnded = true;
		if (!writable) callback.call(stream);
	  };
	
	  var onerror = function onerror(err) {
		callback.call(stream, err);
	  };
	
	  var onclose = function onclose() {
		var err;
	
		if (readable && !readableEnded) {
		  if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
		  return callback.call(stream, err);
		}
	
		if (writable && !writableEnded) {
		  if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
		  return callback.call(stream, err);
		}
	  };
	
	  var onrequest = function onrequest() {
		stream.req.on('finish', onfinish);
	  };
	
	  if (isRequest(stream)) {
		stream.on('complete', onfinish);
		stream.on('abort', onclose);
		if (stream.req) onrequest();else stream.on('request', onrequest);
	  } else if (writable && !stream._writableState) {
		// legacy streams
		stream.on('end', onlegacyfinish);
		stream.on('close', onlegacyfinish);
	  }
	
	  stream.on('end', onend);
	  stream.on('finish', onfinish);
	  if (opts.error !== false) stream.on('error', onerror);
	  stream.on('close', onclose);
	  return function () {
		stream.removeListener('complete', onfinish);
		stream.removeListener('abort', onclose);
		stream.removeListener('request', onrequest);
		if (stream.req) stream.req.removeListener('finish', onfinish);
		stream.removeListener('end', onlegacyfinish);
		stream.removeListener('close', onlegacyfinish);
		stream.removeListener('finish', onfinish);
		stream.removeListener('end', onend);
		stream.removeListener('error', onerror);
		stream.removeListener('close', onclose);
	  };
	}
	
	module.exports = eos;
	},{"../../../errors":74}],84:[function(require,module,exports){
	module.exports = function () {
	  throw new Error('Readable.from is not available in the browser')
	};
	
	},{}],85:[function(require,module,exports){
	// Ported from https://github.com/mafintosh/pump with
	// permission from the author, Mathias Buus (@mafintosh).
	'use strict';
	
	var eos;
	
	function once(callback) {
	  var called = false;
	  return function () {
		if (called) return;
		called = true;
		callback.apply(void 0, arguments);
	  };
	}
	
	var _require$codes = require('../../../errors').codes,
		ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
		ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
	
	function noop(err) {
	  // Rethrow the error if it exists to avoid swallowing it
	  if (err) throw err;
	}
	
	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}
	
	function destroyer(stream, reading, writing, callback) {
	  callback = once(callback);
	  var closed = false;
	  stream.on('close', function () {
		closed = true;
	  });
	  if (eos === undefined) eos = require('./end-of-stream');
	  eos(stream, {
		readable: reading,
		writable: writing
	  }, function (err) {
		if (err) return callback(err);
		closed = true;
		callback();
	  });
	  var destroyed = false;
	  return function (err) {
		if (closed) return;
		if (destroyed) return;
		destroyed = true; // request.destroy just do .end - .abort is what we want
	
		if (isRequest(stream)) return stream.abort();
		if (typeof stream.destroy === 'function') return stream.destroy();
		callback(err || new ERR_STREAM_DESTROYED('pipe'));
	  };
	}
	
	function call(fn) {
	  fn();
	}
	
	function pipe(from, to) {
	  return from.pipe(to);
	}
	
	function popCallback(streams) {
	  if (!streams.length) return noop;
	  if (typeof streams[streams.length - 1] !== 'function') return noop;
	  return streams.pop();
	}
	
	function pipeline() {
	  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
		streams[_key] = arguments[_key];
	  }
	
	  var callback = popCallback(streams);
	  if (Array.isArray(streams[0])) streams = streams[0];
	
	  if (streams.length < 2) {
		throw new ERR_MISSING_ARGS('streams');
	  }
	
	  var error;
	  var destroys = streams.map(function (stream, i) {
		var reading = i < streams.length - 1;
		var writing = i > 0;
		return destroyer(stream, reading, writing, function (err) {
		  if (!error) error = err;
		  if (err) destroys.forEach(call);
		  if (reading) return;
		  destroys.forEach(call);
		  callback(error);
		});
	  });
	  return streams.reduce(pipe);
	}
	
	module.exports = pipeline;
	},{"../../../errors":74,"./end-of-stream":83}],86:[function(require,module,exports){
	'use strict';
	
	var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
	
	function highWaterMarkFrom(options, isDuplex, duplexKey) {
	  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}
	
	function getHighWaterMark(state, options, duplexKey, isDuplex) {
	  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
	
	  if (hwm != null) {
		if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
		  var name = isDuplex ? duplexKey : 'highWaterMark';
		  throw new ERR_INVALID_OPT_VALUE(name, hwm);
		}
	
		return Math.floor(hwm);
	  } // Default value
	
	
	  return state.objectMode ? 16 : 16 * 1024;
	}
	
	module.exports = {
	  getHighWaterMark: getHighWaterMark
	};
	},{"../../../errors":74}],87:[function(require,module,exports){
	module.exports = require('events').EventEmitter;
	
	},{"events":127}],88:[function(require,module,exports){
	exports = module.exports = require('./lib/_stream_readable.js');
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = require('./lib/_stream_writable.js');
	exports.Duplex = require('./lib/_stream_duplex.js');
	exports.Transform = require('./lib/_stream_transform.js');
	exports.PassThrough = require('./lib/_stream_passthrough.js');
	exports.finished = require('./lib/internal/streams/end-of-stream.js');
	exports.pipeline = require('./lib/internal/streams/pipeline.js');
	
	},{"./lib/_stream_duplex.js":75,"./lib/_stream_passthrough.js":76,"./lib/_stream_readable.js":77,"./lib/_stream_transform.js":78,"./lib/_stream_writable.js":79,"./lib/internal/streams/end-of-stream.js":83,"./lib/internal/streams/pipeline.js":85}],89:[function(require,module,exports){
	'use strict'
	var Buffer = require('buffer').Buffer
	var inherits = require('inherits')
	var HashBase = require('hash-base')
	
	var ARRAY16 = new Array(16)
	
	var zl = [
	  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
	  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
	  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
	  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
	]
	
	var zr = [
	  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
	  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
	  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
	  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
	  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
	]
	
	var sl = [
	  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
	  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
	  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
	  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
	  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
	]
	
	var sr = [
	  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
	  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
	  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
	  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
	  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
	]
	
	var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
	var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]
	
	function RIPEMD160 () {
	  HashBase.call(this, 64)
	
	  // state
	  this._a = 0x67452301
	  this._b = 0xefcdab89
	  this._c = 0x98badcfe
	  this._d = 0x10325476
	  this._e = 0xc3d2e1f0
	}
	
	inherits(RIPEMD160, HashBase)
	
	RIPEMD160.prototype._update = function () {
	  var words = ARRAY16
	  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)
	
	  var al = this._a | 0
	  var bl = this._b | 0
	  var cl = this._c | 0
	  var dl = this._d | 0
	  var el = this._e | 0
	
	  var ar = this._a | 0
	  var br = this._b | 0
	  var cr = this._c | 0
	  var dr = this._d | 0
	  var er = this._e | 0
	
	  // computation
	  for (var i = 0; i < 80; i += 1) {
		var tl
		var tr
		if (i < 16) {
		  tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
		  tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
		} else if (i < 32) {
		  tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
		  tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
		} else if (i < 48) {
		  tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
		  tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
		} else if (i < 64) {
		  tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
		  tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
		} else { // if (i<80) {
		  tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
		  tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
		}
	
		al = el
		el = dl
		dl = rotl(cl, 10)
		cl = bl
		bl = tl
	
		ar = er
		er = dr
		dr = rotl(cr, 10)
		cr = br
		br = tr
	  }
	
	  // update state
	  var t = (this._b + cl + dr) | 0
	  this._b = (this._c + dl + er) | 0
	  this._c = (this._d + el + ar) | 0
	  this._d = (this._e + al + br) | 0
	  this._e = (this._a + bl + cr) | 0
	  this._a = t
	}
	
	RIPEMD160.prototype._digest = function () {
	  // create padding and handle blocks
	  this._block[this._blockOffset++] = 0x80
	  if (this._blockOffset > 56) {
		this._block.fill(0, this._blockOffset, 64)
		this._update()
		this._blockOffset = 0
	  }
	
	  this._block.fill(0, this._blockOffset, 56)
	  this._block.writeUInt32LE(this._length[0], 56)
	  this._block.writeUInt32LE(this._length[1], 60)
	  this._update()
	
	  // produce result
	  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
	  buffer.writeInt32LE(this._a, 0)
	  buffer.writeInt32LE(this._b, 4)
	  buffer.writeInt32LE(this._c, 8)
	  buffer.writeInt32LE(this._d, 12)
	  buffer.writeInt32LE(this._e, 16)
	  return buffer
	}
	
	function rotl (x, n) {
	  return (x << n) | (x >>> (32 - n))
	}
	
	function fn1 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
	}
	
	function fn2 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
	}
	
	function fn3 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
	}
	
	function fn4 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
	}
	
	function fn5 (a, b, c, d, e, m, k, s) {
	  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
	}
	
	module.exports = RIPEMD160
	
	},{"buffer":125,"hash-base":45,"inherits":59}],90:[function(require,module,exports){
	(function (Buffer){(function (){
	"use strict";
	var __importDefault = (this && this.__importDefault) || function (mod) {
		return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getLength = exports.decode = exports.encode = void 0;
	var bn_js_1 = __importDefault(require("bn.js"));
	/**
	 * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
	 * This function takes in a data, convert it to buffer if not, and a length for recursion
	 * @param input - will be converted to buffer
	 * @returns returns buffer of encoded data
	 **/
	function encode(input) {
		if (Array.isArray(input)) {
			var output = [];
			for (var i = 0; i < input.length; i++) {
				output.push(encode(input[i]));
			}
			var buf = Buffer.concat(output);
			return Buffer.concat([encodeLength(buf.length, 192), buf]);
		}
		else {
			var inputBuf = toBuffer(input);
			return inputBuf.length === 1 && inputBuf[0] < 128
				? inputBuf
				: Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);
		}
	}
	exports.encode = encode;
	/**
	 * Parse integers. Check if there is no leading zeros
	 * @param v The value to parse
	 * @param base The base to parse the integer into
	 */
	function safeParseInt(v, base) {
		if (v[0] === '0' && v[1] === '0') {
			throw new Error('invalid RLP: extra zeros');
		}
		return parseInt(v, base);
	}
	function encodeLength(len, offset) {
		if (len < 56) {
			return Buffer.from([len + offset]);
		}
		else {
			var hexLength = intToHex(len);
			var lLength = hexLength.length / 2;
			var firstByte = intToHex(offset + 55 + lLength);
			return Buffer.from(firstByte + hexLength, 'hex');
		}
	}
	function decode(input, stream) {
		if (stream === void 0) { stream = false; }
		if (!input || input.length === 0) {
			return Buffer.from([]);
		}
		var inputBuffer = toBuffer(input);
		var decoded = _decode(inputBuffer);
		if (stream) {
			return decoded;
		}
		if (decoded.remainder.length !== 0) {
			throw new Error('invalid remainder');
		}
		return decoded.data;
	}
	exports.decode = decode;
	/**
	 * Get the length of the RLP input
	 * @param input
	 * @returns The length of the input or an empty Buffer if no input
	 */
	function getLength(input) {
		if (!input || input.length === 0) {
			return Buffer.from([]);
		}
		var inputBuffer = toBuffer(input);
		var firstByte = inputBuffer[0];
		if (firstByte <= 0x7f) {
			return inputBuffer.length;
		}
		else if (firstByte <= 0xb7) {
			return firstByte - 0x7f;
		}
		else if (firstByte <= 0xbf) {
			return firstByte - 0xb6;
		}
		else if (firstByte <= 0xf7) {
			// a list between  0-55 bytes long
			return firstByte - 0xbf;
		}
		else {
			// a list  over 55 bytes long
			var llength = firstByte - 0xf6;
			var length_1 = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
			return llength + length_1;
		}
	}
	exports.getLength = getLength;
	/** Decode an input with RLP */
	function _decode(input) {
		var length, llength, data, innerRemainder, d;
		var decoded = [];
		var firstByte = input[0];
		if (firstByte <= 0x7f) {
			// a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
			return {
				data: input.slice(0, 1),
				remainder: input.slice(1),
			};
		}
		else if (firstByte <= 0xb7) {
			// string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
			// The range of the first byte is [0x80, 0xb7]
			length = firstByte - 0x7f;
			// set 0x80 null to 0
			if (firstByte === 0x80) {
				data = Buffer.from([]);
			}
			else {
				data = input.slice(1, length);
			}
			if (length === 2 && data[0] < 0x80) {
				throw new Error('invalid rlp encoding: byte must be less 0x80');
			}
			return {
				data: data,
				remainder: input.slice(length),
			};
		}
		else if (firstByte <= 0xbf) {
			// string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
			// followed by the length, followed by the string
			llength = firstByte - 0xb6;
			if (input.length - 1 < llength) {
				throw new Error('invalid RLP: not enough bytes for string length');
			}
			length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
			if (length <= 55) {
				throw new Error('invalid RLP: expected string length to be greater than 55');
			}
			data = input.slice(llength, length + llength);
			if (data.length < length) {
				throw new Error('invalid RLP: not enough bytes for string');
			}
			return {
				data: data,
				remainder: input.slice(length + llength),
			};
		}
		else if (firstByte <= 0xf7) {
			// a list between  0-55 bytes long
			length = firstByte - 0xbf;
			innerRemainder = input.slice(1, length);
			while (innerRemainder.length) {
				d = _decode(innerRemainder);
				decoded.push(d.data);
				innerRemainder = d.remainder;
			}
			return {
				data: decoded,
				remainder: input.slice(length),
			};
		}
		else {
			// a list  over 55 bytes long
			llength = firstByte - 0xf6;
			length = safeParseInt(input.slice(1, llength).toString('hex'), 16);
			var totalLength = llength + length;
			if (totalLength > input.length) {
				throw new Error('invalid rlp: total length is larger than the data');
			}
			innerRemainder = input.slice(llength, totalLength);
			if (innerRemainder.length === 0) {
				throw new Error('invalid rlp, List has a invalid length');
			}
			while (innerRemainder.length) {
				d = _decode(innerRemainder);
				decoded.push(d.data);
				innerRemainder = d.remainder;
			}
			return {
				data: decoded,
				remainder: input.slice(totalLength),
			};
		}
	}
	/** Check if a string is prefixed by 0x */
	function isHexPrefixed(str) {
		return str.slice(0, 2) === '0x';
	}
	/** Removes 0x from a given String */
	function stripHexPrefix(str) {
		if (typeof str !== 'string') {
			return str;
		}
		return isHexPrefixed(str) ? str.slice(2) : str;
	}
	/** Transform an integer into its hexadecimal value */
	function intToHex(integer) {
		if (integer < 0) {
			throw new Error('Invalid integer as argument, must be unsigned!');
		}
		var hex = integer.toString(16);
		return hex.length % 2 ? "0" + hex : hex;
	}
	/** Pad a string to be even */
	function padToEven(a) {
		return a.length % 2 ? "0" + a : a;
	}
	/** Transform an integer into a Buffer */
	function intToBuffer(integer) {
		var hex = intToHex(integer);
		return Buffer.from(hex, 'hex');
	}
	/** Transform anything into a Buffer */
	function toBuffer(v) {
		if (!Buffer.isBuffer(v)) {
			if (typeof v === 'string') {
				if (isHexPrefixed(v)) {
					return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');
				}
				else {
					return Buffer.from(v);
				}
			}
			else if (typeof v === 'number' || typeof v === 'bigint') {
				if (!v) {
					return Buffer.from([]);
				}
				else {
					return intToBuffer(v);
				}
			}
			else if (v === null || v === undefined) {
				return Buffer.from([]);
			}
			else if (v instanceof Uint8Array) {
				return Buffer.from(v);
			}
			else if (bn_js_1.default.isBN(v)) {
				// converts a BN to a Buffer
				return Buffer.from(v.toArray());
			}
			else {
				throw new Error('invalid type');
			}
		}
		return v;
	}
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"bn.js":91,"buffer":125}],91:[function(require,module,exports){
	arguments[4][42][0].apply(exports,arguments)
	},{"buffer":124,"dup":42}],92:[function(require,module,exports){
	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
	/* eslint-disable node/no-deprecated-api */
	var buffer = require('buffer')
	var Buffer = buffer.Buffer
	
	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
		dst[key] = src[key]
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports)
	  exports.Buffer = SafeBuffer
	}
	
	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}
	
	SafeBuffer.prototype = Object.create(Buffer.prototype)
	
	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer)
	
	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
		throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	}
	
	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
		throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size)
	  if (fill !== undefined) {
		if (typeof encoding === 'string') {
		  buf.fill(fill, encoding)
		} else {
		  buf.fill(fill)
		}
	  } else {
		buf.fill(0)
	  }
	  return buf
	}
	
	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
		throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	}
	
	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
		throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}
	
	},{"buffer":125}],93:[function(require,module,exports){
	module.exports = require('./lib')(require('./lib/elliptic'))
	
	},{"./lib":95,"./lib/elliptic":94}],94:[function(require,module,exports){
	const EC = require('elliptic').ec
	
	const ec = new EC('secp256k1')
	const ecparams = ec.curve
	
	// Hack, we can not use bn.js@5, while elliptic uses bn.js@4
	// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
	const BN = ecparams.n.constructor
	
	function loadCompressedPublicKey (first, xbuf) {
	  let x = new BN(xbuf)
	
	  // overflow
	  if (x.cmp(ecparams.p) >= 0) return null
	  x = x.toRed(ecparams.red)
	
	  // compute corresponding Y
	  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()
	  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()
	
	  return ec.keyPair({ pub: { x: x, y: y } })
	}
	
	function loadUncompressedPublicKey (first, xbuf, ybuf) {
	  let x = new BN(xbuf)
	  let y = new BN(ybuf)
	
	  // overflow
	  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null
	
	  x = x.toRed(ecparams.red)
	  y = y.toRed(ecparams.red)
	
	  // is odd flag
	  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null
	
	  // x*x*x + b = y*y
	  const x3 = x.redSqr().redIMul(x)
	  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null
	
	  return ec.keyPair({ pub: { x: x, y: y } })
	}
	
	function loadPublicKey (pubkey) {
	  // length should be validated in interface
	  const first = pubkey[0]
	  switch (first) {
		case 0x02:
		case 0x03:
		  if (pubkey.length !== 33) return null
		  return loadCompressedPublicKey(first, pubkey.subarray(1, 33))
		case 0x04:
		case 0x06:
		case 0x07:
		  if (pubkey.length !== 65) return null
		  return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))
		default:
		  return null
	  }
	}
	
	function savePublicKey (output, point) {
	  const pubkey = point.encode(null, output.length === 33)
	  // Loop should be faster because we do not need create extra Uint8Array
	  // output.set(new Uint8Array(pubkey))
	  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]
	}
	
	module.exports = {
	  contextRandomize () {
		return 0
	  },
	
	  privateKeyVerify (seckey) {
		const bn = new BN(seckey)
		return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1
	  },
	
	  privateKeyNegate (seckey) {
		const bn = new BN(seckey)
		const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)
		seckey.set(negate)
		return 0
	  },
	
	  privateKeyTweakAdd (seckey, tweak) {
		const bn = new BN(tweak)
		if (bn.cmp(ecparams.n) >= 0) return 1
	
		bn.iadd(new BN(seckey))
		if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)
		if (bn.isZero()) return 1
	
		const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
		seckey.set(tweaked)
	
		return 0
	  },
	
	  privateKeyTweakMul (seckey, tweak) {
		let bn = new BN(tweak)
		if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1
	
		bn.imul(new BN(seckey))
		if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)
	
		const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)
		seckey.set(tweaked)
	
		return 0
	  },
	
	  publicKeyVerify (pubkey) {
		const pair = loadPublicKey(pubkey)
		return pair === null ? 1 : 0
	  },
	
	  publicKeyCreate (output, seckey) {
		const bn = new BN(seckey)
		if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1
	
		const point = ec.keyFromPrivate(seckey).getPublic()
		savePublicKey(output, point)
	
		return 0
	  },
	
	  publicKeyConvert (output, pubkey) {
		const pair = loadPublicKey(pubkey)
		if (pair === null) return 1
	
		const point = pair.getPublic()
		savePublicKey(output, point)
	
		return 0
	  },
	
	  publicKeyNegate (output, pubkey) {
		const pair = loadPublicKey(pubkey)
		if (pair === null) return 1
	
		const point = pair.getPublic()
		point.y = point.y.redNeg()
		savePublicKey(output, point)
	
		return 0
	  },
	
	  publicKeyCombine (output, pubkeys) {
		const pairs = new Array(pubkeys.length)
		for (let i = 0; i < pubkeys.length; ++i) {
		  pairs[i] = loadPublicKey(pubkeys[i])
		  if (pairs[i] === null) return 1
		}
	
		let point = pairs[0].getPublic()
		for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)
		if (point.isInfinity()) return 2
	
		savePublicKey(output, point)
	
		return 0
	  },
	
	  publicKeyTweakAdd (output, pubkey, tweak) {
		const pair = loadPublicKey(pubkey)
		if (pair === null) return 1
	
		tweak = new BN(tweak)
		if (tweak.cmp(ecparams.n) >= 0) return 2
	
		const point = pair.getPublic().add(ecparams.g.mul(tweak))
		if (point.isInfinity()) return 2
	
		savePublicKey(output, point)
	
		return 0
	  },
	
	  publicKeyTweakMul (output, pubkey, tweak) {
		const pair = loadPublicKey(pubkey)
		if (pair === null) return 1
	
		tweak = new BN(tweak)
		if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2
	
		const point = pair.getPublic().mul(tweak)
		savePublicKey(output, point)
	
		return 0
	  },
	
	  signatureNormalize (sig) {
		const r = new BN(sig.subarray(0, 32))
		const s = new BN(sig.subarray(32, 64))
		if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1
	
		if (s.cmp(ec.nh) === 1) {
		  sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)
		}
	
		return 0
	  },
	
	  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
	  // Adapted for Uint8Array instead Buffer
	  signatureExport (obj, sig) {
		const sigR = sig.subarray(0, 32)
		const sigS = sig.subarray(32, 64)
		if (new BN(sigR).cmp(ecparams.n) >= 0) return 1
		if (new BN(sigS).cmp(ecparams.n) >= 0) return 1
	
		const { output } = obj
	
		// Prepare R
		let r = output.subarray(4, 4 + 33)
		r[0] = 0x00
		r.set(sigR, 1)
	
		let lenR = 33
		let posR = 0
		for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);
	
		r = r.subarray(posR)
		if (r[0] & 0x80) return 1
		if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1
	
		// Prepare S
		let s = output.subarray(6 + 33, 6 + 33 + 33)
		s[0] = 0x00
		s.set(sigS, 1)
	
		let lenS = 33
		let posS = 0
		for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);
	
		s = s.subarray(posS)
		if (s[0] & 0x80) return 1
		if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1
	
		// Set output length for return
		obj.outputlen = 6 + lenR + lenS
	
		// Output in specified format
		// 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
		output[0] = 0x30
		output[1] = obj.outputlen - 2
		output[2] = 0x02
		output[3] = r.length
		output.set(r, 4)
		output[4 + lenR] = 0x02
		output[5 + lenR] = s.length
		output.set(s, 6 + lenR)
	
		return 0
	  },
	
	  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
	  // Adapted for Uint8Array instead Buffer
	  signatureImport (output, sig) {
		if (sig.length < 8) return 1
		if (sig.length > 72) return 1
		if (sig[0] !== 0x30) return 1
		if (sig[1] !== sig.length - 2) return 1
		if (sig[2] !== 0x02) return 1
	
		const lenR = sig[3]
		if (lenR === 0) return 1
		if (5 + lenR >= sig.length) return 1
		if (sig[4 + lenR] !== 0x02) return 1
	
		const lenS = sig[5 + lenR]
		if (lenS === 0) return 1
		if ((6 + lenR + lenS) !== sig.length) return 1
	
		if (sig[4] & 0x80) return 1
		if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1
	
		if (sig[lenR + 6] & 0x80) return 1
		if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1
	
		let sigR = sig.subarray(4, 4 + lenR)
		if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)
		if (sigR.length > 32) return 1
	
		let sigS = sig.subarray(6 + lenR)
		if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)
		if (sigS.length > 32) throw new Error('S length is too long')
	
		let r = new BN(sigR)
		if (r.cmp(ecparams.n) >= 0) r = new BN(0)
	
		let s = new BN(sig.subarray(6 + lenR))
		if (s.cmp(ecparams.n) >= 0) s = new BN(0)
	
		output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)
		output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)
	
		return 0
	  },
	
	  ecdsaSign (obj, message, seckey, data, noncefn) {
		if (noncefn) {
		  const _noncefn = noncefn
		  noncefn = (counter) => {
			const nonce = _noncefn(message, seckey, null, data, counter)
	
			const isValid = nonce instanceof Uint8Array && nonce.length === 32
			if (!isValid) throw new Error('This is the way')
	
			return new BN(nonce)
		  }
		}
	
		const d = new BN(seckey)
		if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1
	
		let sig
		try {
		  sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })
		} catch (err) {
		  return 1
		}
	
		obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)
		obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)
		obj.recid = sig.recoveryParam
	
		return 0
	  },
	
	  ecdsaVerify (sig, msg32, pubkey) {
		const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }
	
		const sigr = new BN(sigObj.r)
		const sigs = new BN(sigObj.s)
		if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
		if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3
	
		const pair = loadPublicKey(pubkey)
		if (pair === null) return 2
	
		const point = pair.getPublic()
		const isValid = ec.verify(msg32, sigObj, point)
		return isValid ? 0 : 3
	  },
	
	  ecdsaRecover (output, sig, recid, msg32) {
		const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }
	
		const sigr = new BN(sigObj.r)
		const sigs = new BN(sigObj.s)
		if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1
	
		if (sigr.isZero() || sigs.isZero()) return 2
	
		// Can throw `throw new Error('Unable to find sencond key candinate');`
		let point
		try {
		  point = ec.recoverPubKey(msg32, sigObj, recid)
		} catch (err) {
		  return 2
		}
	
		savePublicKey(output, point)
	
		return 0
	  },
	
	  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
		const pair = loadPublicKey(pubkey)
		if (pair === null) return 1
	
		const scalar = new BN(seckey)
		if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2
	
		const point = pair.getPublic().mul(scalar)
	
		if (hashfn === undefined) {
		  const data = point.encode(null, true)
		  const sha256 = ec.hash().update(data).digest()
		  for (let i = 0; i < 32; ++i) output[i] = sha256[i]
		} else {
		  if (!xbuf) xbuf = new Uint8Array(32)
		  const x = point.getX().toArray('be', 32)
		  for (let i = 0; i < 32; ++i) xbuf[i] = x[i]
	
		  if (!ybuf) ybuf = new Uint8Array(32)
		  const y = point.getY().toArray('be', 32)
		  for (let i = 0; i < 32; ++i) ybuf[i] = y[i]
	
		  const hash = hashfn(xbuf, ybuf, data)
	
		  const isValid = hash instanceof Uint8Array && hash.length === output.length
		  if (!isValid) return 2
	
		  output.set(hash)
		}
	
		return 0
	  }
	}
	
	},{"elliptic":7}],95:[function(require,module,exports){
	const errors = {
	  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
	  TWEAK_ADD:
		'The tweak was out of range or the resulted private key is invalid',
	  TWEAK_MUL: 'The tweak was out of range or equal to zero',
	  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
	  SECKEY_INVALID: 'Private Key is invalid',
	  PUBKEY_PARSE: 'Public Key could not be parsed',
	  PUBKEY_SERIALIZE: 'Public Key serialization error',
	  PUBKEY_COMBINE: 'The sum of the public keys is not valid',
	  SIG_PARSE: 'Signature could not be parsed',
	  SIGN: 'The nonce generation function failed, or the private key was invalid',
	  RECOVER: 'Public key could not be recover',
	  ECDH: 'Scalar was invalid (zero or overflow)'
	}
	
	function assert (cond, msg) {
	  if (!cond) throw new Error(msg)
	}
	
	function isUint8Array (name, value, length) {
	  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)
	
	  if (length !== undefined) {
		if (Array.isArray(length)) {
		  const numbers = length.join(', ')
		  const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`
		  assert(length.includes(value.length), msg)
		} else {
		  const msg = `Expected ${name} to be an Uint8Array with length ${length}`
		  assert(value.length === length, msg)
		}
	  }
	}
	
	function isCompressed (value) {
	  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')
	}
	
	function getAssertedOutput (output = (len) => new Uint8Array(len), length) {
	  if (typeof output === 'function') output = output(length)
	  isUint8Array('output', output, length)
	  return output
	}
	
	function toTypeString (value) {
	  return Object.prototype.toString.call(value).slice(8, -1)
	}
	
	module.exports = (secp256k1) => {
	  return {
		contextRandomize (seed) {
		  assert(
			seed === null || seed instanceof Uint8Array,
			'Expected seed to be an Uint8Array or null'
		  )
		  if (seed !== null) isUint8Array('seed', seed, 32)
	
		  switch (secp256k1.contextRandomize(seed)) {
			case 1:
			  throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)
		  }
		},
	
		privateKeyVerify (seckey) {
		  isUint8Array('private key', seckey, 32)
	
		  return secp256k1.privateKeyVerify(seckey) === 0
		},
	
		privateKeyNegate (seckey) {
		  isUint8Array('private key', seckey, 32)
	
		  switch (secp256k1.privateKeyNegate(seckey)) {
			case 0:
			  return seckey
			case 1:
			  throw new Error(errors.IMPOSSIBLE_CASE)
		  }
		},
	
		privateKeyTweakAdd (seckey, tweak) {
		  isUint8Array('private key', seckey, 32)
		  isUint8Array('tweak', tweak, 32)
	
		  switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {
			case 0:
			  return seckey
			case 1:
			  throw new Error(errors.TWEAK_ADD)
		  }
		},
	
		privateKeyTweakMul (seckey, tweak) {
		  isUint8Array('private key', seckey, 32)
		  isUint8Array('tweak', tweak, 32)
	
		  switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {
			case 0:
			  return seckey
			case 1:
			  throw new Error(errors.TWEAK_MUL)
		  }
		},
	
		publicKeyVerify (pubkey) {
		  isUint8Array('public key', pubkey, [33, 65])
	
		  return secp256k1.publicKeyVerify(pubkey) === 0
		},
	
		publicKeyCreate (seckey, compressed = true, output) {
		  isUint8Array('private key', seckey, 32)
		  isCompressed(compressed)
		  output = getAssertedOutput(output, compressed ? 33 : 65)
	
		  switch (secp256k1.publicKeyCreate(output, seckey)) {
			case 0:
			  return output
			case 1:
			  throw new Error(errors.SECKEY_INVALID)
			case 2:
			  throw new Error(errors.PUBKEY_SERIALIZE)
		  }
		},
	
		publicKeyConvert (pubkey, compressed = true, output) {
		  isUint8Array('public key', pubkey, [33, 65])
		  isCompressed(compressed)
		  output = getAssertedOutput(output, compressed ? 33 : 65)
	
		  switch (secp256k1.publicKeyConvert(output, pubkey)) {
			case 0:
			  return output
			case 1:
			  throw new Error(errors.PUBKEY_PARSE)
			case 2:
			  throw new Error(errors.PUBKEY_SERIALIZE)
		  }
		},
	
		publicKeyNegate (pubkey, compressed = true, output) {
		  isUint8Array('public key', pubkey, [33, 65])
		  isCompressed(compressed)
		  output = getAssertedOutput(output, compressed ? 33 : 65)
	
		  switch (secp256k1.publicKeyNegate(output, pubkey)) {
			case 0:
			  return output
			case 1:
			  throw new Error(errors.PUBKEY_PARSE)
			case 2:
			  throw new Error(errors.IMPOSSIBLE_CASE)
			case 3:
			  throw new Error(errors.PUBKEY_SERIALIZE)
		  }
		},
	
		publicKeyCombine (pubkeys, compressed = true, output) {
		  assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')
		  assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')
		  for (const pubkey of pubkeys) {
			isUint8Array('public key', pubkey, [33, 65])
		  }
		  isCompressed(compressed)
		  output = getAssertedOutput(output, compressed ? 33 : 65)
	
		  switch (secp256k1.publicKeyCombine(output, pubkeys)) {
			case 0:
			  return output
			case 1:
			  throw new Error(errors.PUBKEY_PARSE)
			case 2:
			  throw new Error(errors.PUBKEY_COMBINE)
			case 3:
			  throw new Error(errors.PUBKEY_SERIALIZE)
		  }
		},
	
		publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
		  isUint8Array('public key', pubkey, [33, 65])
		  isUint8Array('tweak', tweak, 32)
		  isCompressed(compressed)
		  output = getAssertedOutput(output, compressed ? 33 : 65)
	
		  switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {
			case 0:
			  return output
			case 1:
			  throw new Error(errors.PUBKEY_PARSE)
			case 2:
			  throw new Error(errors.TWEAK_ADD)
		  }
		},
	
		publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
		  isUint8Array('public key', pubkey, [33, 65])
		  isUint8Array('tweak', tweak, 32)
		  isCompressed(compressed)
		  output = getAssertedOutput(output, compressed ? 33 : 65)
	
		  switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {
			case 0:
			  return output
			case 1:
			  throw new Error(errors.PUBKEY_PARSE)
			case 2:
			  throw new Error(errors.TWEAK_MUL)
		  }
		},
	
		signatureNormalize (sig) {
		  isUint8Array('signature', sig, 64)
	
		  switch (secp256k1.signatureNormalize(sig)) {
			case 0:
			  return sig
			case 1:
			  throw new Error(errors.SIG_PARSE)
		  }
		},
	
		signatureExport (sig, output) {
		  isUint8Array('signature', sig, 64)
		  output = getAssertedOutput(output, 72)
	
		  const obj = { output, outputlen: 72 }
		  switch (secp256k1.signatureExport(obj, sig)) {
			case 0:
			  return output.slice(0, obj.outputlen)
			case 1:
			  throw new Error(errors.SIG_PARSE)
			case 2:
			  throw new Error(errors.IMPOSSIBLE_CASE)
		  }
		},
	
		signatureImport (sig, output) {
		  isUint8Array('signature', sig)
		  output = getAssertedOutput(output, 64)
	
		  switch (secp256k1.signatureImport(output, sig)) {
			case 0:
			  return output
			case 1:
			  throw new Error(errors.SIG_PARSE)
			case 2:
			  throw new Error(errors.IMPOSSIBLE_CASE)
		  }
		},
	
		ecdsaSign (msg32, seckey, options = {}, output) {
		  isUint8Array('message', msg32, 32)
		  isUint8Array('private key', seckey, 32)
		  assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
		  if (options.data !== undefined) isUint8Array('options.data', options.data)
		  if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')
		  output = getAssertedOutput(output, 64)
	
		  const obj = { signature: output, recid: null }
		  switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {
			case 0:
			  return obj
			case 1:
			  throw new Error(errors.SIGN)
			case 2:
			  throw new Error(errors.IMPOSSIBLE_CASE)
		  }
		},
	
		ecdsaVerify (sig, msg32, pubkey) {
		  isUint8Array('signature', sig, 64)
		  isUint8Array('message', msg32, 32)
		  isUint8Array('public key', pubkey, [33, 65])
	
		  switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {
			case 0:
			  return true
			case 3:
			  return false
			case 1:
			  throw new Error(errors.SIG_PARSE)
			case 2:
			  throw new Error(errors.PUBKEY_PARSE)
		  }
		},
	
		ecdsaRecover (sig, recid, msg32, compressed = true, output) {
		  isUint8Array('signature', sig, 64)
		  assert(
			toTypeString(recid) === 'Number' &&
			  recid >= 0 &&
			  recid <= 3,
			'Expected recovery id to be a Number within interval [0, 3]'
		  )
		  isUint8Array('message', msg32, 32)
		  isCompressed(compressed)
		  output = getAssertedOutput(output, compressed ? 33 : 65)
	
		  switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {
			case 0:
			  return output
			case 1:
			  throw new Error(errors.SIG_PARSE)
			case 2:
			  throw new Error(errors.RECOVER)
			case 3:
			  throw new Error(errors.IMPOSSIBLE_CASE)
		  }
		},
	
		ecdh (pubkey, seckey, options = {}, output) {
		  isUint8Array('public key', pubkey, [33, 65])
		  isUint8Array('private key', seckey, 32)
		  assert(toTypeString(options) === 'Object', 'Expected options to be an Object')
		  if (options.data !== undefined) isUint8Array('options.data', options.data)
		  if (options.hashfn !== undefined) {
			assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')
			if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)
			if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)
			isUint8Array('output', output)
		  } else {
			output = getAssertedOutput(output, 32)
		  }
	
		  switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {
			case 0:
			  return output
			case 1:
			  throw new Error(errors.PUBKEY_PARSE)
			case 2:
			  throw new Error(errors.ECDH)
		  }
		}
	  }
	}
	
	},{}],96:[function(require,module,exports){
	var Buffer = require('safe-buffer').Buffer
	
	// prototype class for hash functions
	function Hash (blockSize, finalSize) {
	  this._block = Buffer.alloc(blockSize)
	  this._finalSize = finalSize
	  this._blockSize = blockSize
	  this._len = 0
	}
	
	Hash.prototype.update = function (data, enc) {
	  if (typeof data === 'string') {
		enc = enc || 'utf8'
		data = Buffer.from(data, enc)
	  }
	
	  var block = this._block
	  var blockSize = this._blockSize
	  var length = data.length
	  var accum = this._len
	
	  for (var offset = 0; offset < length;) {
		var assigned = accum % blockSize
		var remainder = Math.min(length - offset, blockSize - assigned)
	
		for (var i = 0; i < remainder; i++) {
		  block[assigned + i] = data[offset + i]
		}
	
		accum += remainder
		offset += remainder
	
		if ((accum % blockSize) === 0) {
		  this._update(block)
		}
	  }
	
	  this._len += length
	  return this
	}
	
	Hash.prototype.digest = function (enc) {
	  var rem = this._len % this._blockSize
	
	  this._block[rem] = 0x80
	
	  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
	  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
	  this._block.fill(0, rem + 1)
	
	  if (rem >= this._finalSize) {
		this._update(this._block)
		this._block.fill(0)
	  }
	
	  var bits = this._len * 8
	
	  // uint32
	  if (bits <= 0xffffffff) {
		this._block.writeUInt32BE(bits, this._blockSize - 4)
	
	  // uint64
	  } else {
		var lowBits = (bits & 0xffffffff) >>> 0
		var highBits = (bits - lowBits) / 0x100000000
	
		this._block.writeUInt32BE(highBits, this._blockSize - 8)
		this._block.writeUInt32BE(lowBits, this._blockSize - 4)
	  }
	
	  this._update(this._block)
	  var hash = this._hash()
	
	  return enc ? hash.toString(enc) : hash
	}
	
	Hash.prototype._update = function () {
	  throw new Error('_update must be implemented by subclass')
	}
	
	module.exports = Hash
	
	},{"safe-buffer":92}],97:[function(require,module,exports){
	var exports = module.exports = function SHA (algorithm) {
	  algorithm = algorithm.toLowerCase()
	
	  var Algorithm = exports[algorithm]
	  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')
	
	  return new Algorithm()
	}
	
	exports.sha = require('./sha')
	exports.sha1 = require('./sha1')
	exports.sha224 = require('./sha224')
	exports.sha256 = require('./sha256')
	exports.sha384 = require('./sha384')
	exports.sha512 = require('./sha512')
	
	},{"./sha":98,"./sha1":99,"./sha224":100,"./sha256":101,"./sha384":102,"./sha512":103}],98:[function(require,module,exports){
	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
	 * in FIPS PUB 180-1
	 * This source code is derived from sha1.js of the same repository.
	 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
	 * operation was added.
	 */
	
	var inherits = require('inherits')
	var Hash = require('./hash')
	var Buffer = require('safe-buffer').Buffer
	
	var K = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	]
	
	var W = new Array(80)
	
	function Sha () {
	  this.init()
	  this._w = W
	
	  Hash.call(this, 64, 56)
	}
	
	inherits(Sha, Hash)
	
	Sha.prototype.init = function () {
	  this._a = 0x67452301
	  this._b = 0xefcdab89
	  this._c = 0x98badcfe
	  this._d = 0x10325476
	  this._e = 0xc3d2e1f0
	
	  return this
	}
	
	function rotl5 (num) {
	  return (num << 5) | (num >>> 27)
	}
	
	function rotl30 (num) {
	  return (num << 30) | (num >>> 2)
	}
	
	function ft (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}
	
	Sha.prototype._update = function (M) {
	  var W = this._w
	
	  var a = this._a | 0
	  var b = this._b | 0
	  var c = this._c | 0
	  var d = this._d | 0
	  var e = this._e | 0
	
	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
	  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]
	
	  for (var j = 0; j < 80; ++j) {
		var s = ~~(j / 20)
		var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0
	
		e = d
		d = c
		c = rotl30(b)
		b = a
		a = t
	  }
	
	  this._a = (a + this._a) | 0
	  this._b = (b + this._b) | 0
	  this._c = (c + this._c) | 0
	  this._d = (d + this._d) | 0
	  this._e = (e + this._e) | 0
	}
	
	Sha.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(20)
	
	  H.writeInt32BE(this._a | 0, 0)
	  H.writeInt32BE(this._b | 0, 4)
	  H.writeInt32BE(this._c | 0, 8)
	  H.writeInt32BE(this._d | 0, 12)
	  H.writeInt32BE(this._e | 0, 16)
	
	  return H
	}
	
	module.exports = Sha
	
	},{"./hash":96,"inherits":59,"safe-buffer":92}],99:[function(require,module,exports){
	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */
	
	var inherits = require('inherits')
	var Hash = require('./hash')
	var Buffer = require('safe-buffer').Buffer
	
	var K = [
	  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
	]
	
	var W = new Array(80)
	
	function Sha1 () {
	  this.init()
	  this._w = W
	
	  Hash.call(this, 64, 56)
	}
	
	inherits(Sha1, Hash)
	
	Sha1.prototype.init = function () {
	  this._a = 0x67452301
	  this._b = 0xefcdab89
	  this._c = 0x98badcfe
	  this._d = 0x10325476
	  this._e = 0xc3d2e1f0
	
	  return this
	}
	
	function rotl1 (num) {
	  return (num << 1) | (num >>> 31)
	}
	
	function rotl5 (num) {
	  return (num << 5) | (num >>> 27)
	}
	
	function rotl30 (num) {
	  return (num << 30) | (num >>> 2)
	}
	
	function ft (s, b, c, d) {
	  if (s === 0) return (b & c) | ((~b) & d)
	  if (s === 2) return (b & c) | (b & d) | (c & d)
	  return b ^ c ^ d
	}
	
	Sha1.prototype._update = function (M) {
	  var W = this._w
	
	  var a = this._a | 0
	  var b = this._b | 0
	  var c = this._c | 0
	  var d = this._d | 0
	  var e = this._e | 0
	
	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
	  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])
	
	  for (var j = 0; j < 80; ++j) {
		var s = ~~(j / 20)
		var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0
	
		e = d
		d = c
		c = rotl30(b)
		b = a
		a = t
	  }
	
	  this._a = (a + this._a) | 0
	  this._b = (b + this._b) | 0
	  this._c = (c + this._c) | 0
	  this._d = (d + this._d) | 0
	  this._e = (e + this._e) | 0
	}
	
	Sha1.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(20)
	
	  H.writeInt32BE(this._a | 0, 0)
	  H.writeInt32BE(this._b | 0, 4)
	  H.writeInt32BE(this._c | 0, 8)
	  H.writeInt32BE(this._d | 0, 12)
	  H.writeInt32BE(this._e | 0, 16)
	
	  return H
	}
	
	module.exports = Sha1
	
	},{"./hash":96,"inherits":59,"safe-buffer":92}],100:[function(require,module,exports){
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */
	
	var inherits = require('inherits')
	var Sha256 = require('./sha256')
	var Hash = require('./hash')
	var Buffer = require('safe-buffer').Buffer
	
	var W = new Array(64)
	
	function Sha224 () {
	  this.init()
	
	  this._w = W // new Array(64)
	
	  Hash.call(this, 64, 56)
	}
	
	inherits(Sha224, Sha256)
	
	Sha224.prototype.init = function () {
	  this._a = 0xc1059ed8
	  this._b = 0x367cd507
	  this._c = 0x3070dd17
	  this._d = 0xf70e5939
	  this._e = 0xffc00b31
	  this._f = 0x68581511
	  this._g = 0x64f98fa7
	  this._h = 0xbefa4fa4
	
	  return this
	}
	
	Sha224.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(28)
	
	  H.writeInt32BE(this._a, 0)
	  H.writeInt32BE(this._b, 4)
	  H.writeInt32BE(this._c, 8)
	  H.writeInt32BE(this._d, 12)
	  H.writeInt32BE(this._e, 16)
	  H.writeInt32BE(this._f, 20)
	  H.writeInt32BE(this._g, 24)
	
	  return H
	}
	
	module.exports = Sha224
	
	},{"./hash":96,"./sha256":101,"inherits":59,"safe-buffer":92}],101:[function(require,module,exports){
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */
	
	var inherits = require('inherits')
	var Hash = require('./hash')
	var Buffer = require('safe-buffer').Buffer
	
	var K = [
	  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	]
	
	var W = new Array(64)
	
	function Sha256 () {
	  this.init()
	
	  this._w = W // new Array(64)
	
	  Hash.call(this, 64, 56)
	}
	
	inherits(Sha256, Hash)
	
	Sha256.prototype.init = function () {
	  this._a = 0x6a09e667
	  this._b = 0xbb67ae85
	  this._c = 0x3c6ef372
	  this._d = 0xa54ff53a
	  this._e = 0x510e527f
	  this._f = 0x9b05688c
	  this._g = 0x1f83d9ab
	  this._h = 0x5be0cd19
	
	  return this
	}
	
	function ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}
	
	function maj (x, y, z) {
	  return (x & y) | (z & (x | y))
	}
	
	function sigma0 (x) {
	  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
	}
	
	function sigma1 (x) {
	  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
	}
	
	function gamma0 (x) {
	  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
	}
	
	function gamma1 (x) {
	  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
	}
	
	Sha256.prototype._update = function (M) {
	  var W = this._w
	
	  var a = this._a | 0
	  var b = this._b | 0
	  var c = this._c | 0
	  var d = this._d | 0
	  var e = this._e | 0
	  var f = this._f | 0
	  var g = this._g | 0
	  var h = this._h | 0
	
	  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
	  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0
	
	  for (var j = 0; j < 64; ++j) {
		var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
		var T2 = (sigma0(a) + maj(a, b, c)) | 0
	
		h = g
		g = f
		f = e
		e = (d + T1) | 0
		d = c
		c = b
		b = a
		a = (T1 + T2) | 0
	  }
	
	  this._a = (a + this._a) | 0
	  this._b = (b + this._b) | 0
	  this._c = (c + this._c) | 0
	  this._d = (d + this._d) | 0
	  this._e = (e + this._e) | 0
	  this._f = (f + this._f) | 0
	  this._g = (g + this._g) | 0
	  this._h = (h + this._h) | 0
	}
	
	Sha256.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(32)
	
	  H.writeInt32BE(this._a, 0)
	  H.writeInt32BE(this._b, 4)
	  H.writeInt32BE(this._c, 8)
	  H.writeInt32BE(this._d, 12)
	  H.writeInt32BE(this._e, 16)
	  H.writeInt32BE(this._f, 20)
	  H.writeInt32BE(this._g, 24)
	  H.writeInt32BE(this._h, 28)
	
	  return H
	}
	
	module.exports = Sha256
	
	},{"./hash":96,"inherits":59,"safe-buffer":92}],102:[function(require,module,exports){
	var inherits = require('inherits')
	var SHA512 = require('./sha512')
	var Hash = require('./hash')
	var Buffer = require('safe-buffer').Buffer
	
	var W = new Array(160)
	
	function Sha384 () {
	  this.init()
	  this._w = W
	
	  Hash.call(this, 128, 112)
	}
	
	inherits(Sha384, SHA512)
	
	Sha384.prototype.init = function () {
	  this._ah = 0xcbbb9d5d
	  this._bh = 0x629a292a
	  this._ch = 0x9159015a
	  this._dh = 0x152fecd8
	  this._eh = 0x67332667
	  this._fh = 0x8eb44a87
	  this._gh = 0xdb0c2e0d
	  this._hh = 0x47b5481d
	
	  this._al = 0xc1059ed8
	  this._bl = 0x367cd507
	  this._cl = 0x3070dd17
	  this._dl = 0xf70e5939
	  this._el = 0xffc00b31
	  this._fl = 0x68581511
	  this._gl = 0x64f98fa7
	  this._hl = 0xbefa4fa4
	
	  return this
	}
	
	Sha384.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(48)
	
	  function writeInt64BE (h, l, offset) {
		H.writeInt32BE(h, offset)
		H.writeInt32BE(l, offset + 4)
	  }
	
	  writeInt64BE(this._ah, this._al, 0)
	  writeInt64BE(this._bh, this._bl, 8)
	  writeInt64BE(this._ch, this._cl, 16)
	  writeInt64BE(this._dh, this._dl, 24)
	  writeInt64BE(this._eh, this._el, 32)
	  writeInt64BE(this._fh, this._fl, 40)
	
	  return H
	}
	
	module.exports = Sha384
	
	},{"./hash":96,"./sha512":103,"inherits":59,"safe-buffer":92}],103:[function(require,module,exports){
	var inherits = require('inherits')
	var Hash = require('./hash')
	var Buffer = require('safe-buffer').Buffer
	
	var K = [
	  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	]
	
	var W = new Array(160)
	
	function Sha512 () {
	  this.init()
	  this._w = W
	
	  Hash.call(this, 128, 112)
	}
	
	inherits(Sha512, Hash)
	
	Sha512.prototype.init = function () {
	  this._ah = 0x6a09e667
	  this._bh = 0xbb67ae85
	  this._ch = 0x3c6ef372
	  this._dh = 0xa54ff53a
	  this._eh = 0x510e527f
	  this._fh = 0x9b05688c
	  this._gh = 0x1f83d9ab
	  this._hh = 0x5be0cd19
	
	  this._al = 0xf3bcc908
	  this._bl = 0x84caa73b
	  this._cl = 0xfe94f82b
	  this._dl = 0x5f1d36f1
	  this._el = 0xade682d1
	  this._fl = 0x2b3e6c1f
	  this._gl = 0xfb41bd6b
	  this._hl = 0x137e2179
	
	  return this
	}
	
	function Ch (x, y, z) {
	  return z ^ (x & (y ^ z))
	}
	
	function maj (x, y, z) {
	  return (x & y) | (z & (x | y))
	}
	
	function sigma0 (x, xl) {
	  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
	}
	
	function sigma1 (x, xl) {
	  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
	}
	
	function Gamma0 (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
	}
	
	function Gamma0l (x, xl) {
	  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
	}
	
	function Gamma1 (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
	}
	
	function Gamma1l (x, xl) {
	  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
	}
	
	function getCarry (a, b) {
	  return (a >>> 0) < (b >>> 0) ? 1 : 0
	}
	
	Sha512.prototype._update = function (M) {
	  var W = this._w
	
	  var ah = this._ah | 0
	  var bh = this._bh | 0
	  var ch = this._ch | 0
	  var dh = this._dh | 0
	  var eh = this._eh | 0
	  var fh = this._fh | 0
	  var gh = this._gh | 0
	  var hh = this._hh | 0
	
	  var al = this._al | 0
	  var bl = this._bl | 0
	  var cl = this._cl | 0
	  var dl = this._dl | 0
	  var el = this._el | 0
	  var fl = this._fl | 0
	  var gl = this._gl | 0
	  var hl = this._hl | 0
	
	  for (var i = 0; i < 32; i += 2) {
		W[i] = M.readInt32BE(i * 4)
		W[i + 1] = M.readInt32BE(i * 4 + 4)
	  }
	  for (; i < 160; i += 2) {
		var xh = W[i - 15 * 2]
		var xl = W[i - 15 * 2 + 1]
		var gamma0 = Gamma0(xh, xl)
		var gamma0l = Gamma0l(xl, xh)
	
		xh = W[i - 2 * 2]
		xl = W[i - 2 * 2 + 1]
		var gamma1 = Gamma1(xh, xl)
		var gamma1l = Gamma1l(xl, xh)
	
		// W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
		var Wi7h = W[i - 7 * 2]
		var Wi7l = W[i - 7 * 2 + 1]
	
		var Wi16h = W[i - 16 * 2]
		var Wi16l = W[i - 16 * 2 + 1]
	
		var Wil = (gamma0l + Wi7l) | 0
		var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
		Wil = (Wil + gamma1l) | 0
		Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
		Wil = (Wil + Wi16l) | 0
		Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0
	
		W[i] = Wih
		W[i + 1] = Wil
	  }
	
	  for (var j = 0; j < 160; j += 2) {
		Wih = W[j]
		Wil = W[j + 1]
	
		var majh = maj(ah, bh, ch)
		var majl = maj(al, bl, cl)
	
		var sigma0h = sigma0(ah, al)
		var sigma0l = sigma0(al, ah)
		var sigma1h = sigma1(eh, el)
		var sigma1l = sigma1(el, eh)
	
		// t1 = h + sigma1 + ch + K[j] + W[j]
		var Kih = K[j]
		var Kil = K[j + 1]
	
		var chh = Ch(eh, fh, gh)
		var chl = Ch(el, fl, gl)
	
		var t1l = (hl + sigma1l) | 0
		var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
		t1l = (t1l + chl) | 0
		t1h = (t1h + chh + getCarry(t1l, chl)) | 0
		t1l = (t1l + Kil) | 0
		t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
		t1l = (t1l + Wil) | 0
		t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0
	
		// t2 = sigma0 + maj
		var t2l = (sigma0l + majl) | 0
		var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0
	
		hh = gh
		hl = gl
		gh = fh
		gl = fl
		fh = eh
		fl = el
		el = (dl + t1l) | 0
		eh = (dh + t1h + getCarry(el, dl)) | 0
		dh = ch
		dl = cl
		ch = bh
		cl = bl
		bh = ah
		bl = al
		al = (t1l + t2l) | 0
		ah = (t1h + t2h + getCarry(al, t1l)) | 0
	  }
	
	  this._al = (this._al + al) | 0
	  this._bl = (this._bl + bl) | 0
	  this._cl = (this._cl + cl) | 0
	  this._dl = (this._dl + dl) | 0
	  this._el = (this._el + el) | 0
	  this._fl = (this._fl + fl) | 0
	  this._gl = (this._gl + gl) | 0
	  this._hl = (this._hl + hl) | 0
	
	  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
	  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
	  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
	  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
	  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
	  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
	  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
	  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
	}
	
	Sha512.prototype._hash = function () {
	  var H = Buffer.allocUnsafe(64)
	
	  function writeInt64BE (h, l, offset) {
		H.writeInt32BE(h, offset)
		H.writeInt32BE(l, offset + 4)
	  }
	
	  writeInt64BE(this._ah, this._al, 0)
	  writeInt64BE(this._bh, this._bl, 8)
	  writeInt64BE(this._ch, this._cl, 16)
	  writeInt64BE(this._dh, this._dl, 24)
	  writeInt64BE(this._eh, this._el, 32)
	  writeInt64BE(this._fh, this._fl, 40)
	  writeInt64BE(this._gh, this._gl, 48)
	  writeInt64BE(this._hh, this._hl, 56)
	
	  return H
	}
	
	module.exports = Sha512
	
	},{"./hash":96,"inherits":59,"safe-buffer":92}],104:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	/*<replacement>*/
	
	var Buffer = require('safe-buffer').Buffer;
	/*</replacement>*/
	
	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
		case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
		  return true;
		default:
		  return false;
	  }
	};
	
	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
		switch (enc) {
		  case 'utf8':
		  case 'utf-8':
			return 'utf8';
		  case 'ucs2':
		  case 'ucs-2':
		  case 'utf16le':
		  case 'utf-16le':
			return 'utf16le';
		  case 'latin1':
		  case 'binary':
			return 'latin1';
		  case 'base64':
		  case 'ascii':
		  case 'hex':
			return enc;
		  default:
			if (retried) return; // undefined
			enc = ('' + enc).toLowerCase();
			retried = true;
		}
	  }
	};
	
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	exports.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
		case 'utf16le':
		  this.text = utf16Text;
		  this.end = utf16End;
		  nb = 4;
		  break;
		case 'utf8':
		  this.fillLast = utf8FillLast;
		  nb = 4;
		  break;
		case 'base64':
		  this.text = base64Text;
		  this.end = base64End;
		  nb = 3;
		  break;
		default:
		  this.write = simpleWrite;
		  this.end = simpleEnd;
		  return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}
	
	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
		r = this.fillLast(buf);
		if (r === undefined) return '';
		i = this.lastNeed;
		this.lastNeed = 0;
	  } else {
		i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};
	
	StringDecoder.prototype.end = utf8End;
	
	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;
	
	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
		buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
		return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};
	
	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}
	
	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
		if (nb > 0) self.lastNeed = nb - 1;
		return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
		if (nb > 0) self.lastNeed = nb - 2;
		return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
		if (nb > 0) {
		  if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
		}
		return nb;
	  }
	  return 0;
	}
	
	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
		self.lastNeed = 0;
		return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
		if ((buf[1] & 0xC0) !== 0x80) {
		  self.lastNeed = 1;
		  return '\ufffd';
		}
		if (self.lastNeed > 2 && buf.length > 2) {
		  if ((buf[2] & 0xC0) !== 0x80) {
			self.lastNeed = 2;
			return '\ufffd';
		  }
		}
	  }
	}
	
	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf, p);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
		buf.copy(this.lastChar, p, 0, this.lastNeed);
		return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}
	
	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}
	
	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}
	
	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
		var r = buf.toString('utf16le', i);
		if (r) {
		  var c = r.charCodeAt(r.length - 1);
		  if (c >= 0xD800 && c <= 0xDBFF) {
			this.lastNeed = 2;
			this.lastTotal = 4;
			this.lastChar[0] = buf[buf.length - 2];
			this.lastChar[1] = buf[buf.length - 1];
			return r.slice(0, -1);
		  }
		}
		return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}
	
	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
		var end = this.lastTotal - this.lastNeed;
		return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}
	
	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
		this.lastChar[0] = buf[buf.length - 1];
	  } else {
		this.lastChar[0] = buf[buf.length - 2];
		this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}
	
	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}
	
	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}
	
	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}
	},{"safe-buffer":92}],105:[function(require,module,exports){
	var isHexPrefixed = require('is-hex-prefixed');
	
	/**
	 * Removes '0x' from a given `String` is present
	 * @param {String} str the string value
	 * @return {String|Optional} a string by pass if necessary
	 */
	module.exports = function stripHexPrefix(str) {
	  if (typeof str !== 'string') {
		return str;
	  }
	
	  return isHexPrefixed(str) ? str.slice(2) : str;
	}
	
	},{"is-hex-prefixed":60}],106:[function(require,module,exports){
	/*! https://mths.be/utf8js v3.0.0 by @mathias */
	;(function(root) {
	
		var stringFromCharCode = String.fromCharCode;
	
		// Taken from https://mths.be/punycode
		function ucs2decode(string) {
			var output = [];
			var counter = 0;
			var length = string.length;
			var value;
			var extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		// Taken from https://mths.be/punycode
		function ucs2encode(array) {
			var length = array.length;
			var index = -1;
			var value;
			var output = '';
			while (++index < length) {
				value = array[index];
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
			}
			return output;
		}
	
		function checkScalarValue(codePoint) {
			if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
		}
		/*--------------------------------------------------------------------------*/
	
		function createByte(codePoint, shift) {
			return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
		}
	
		function encodeCodePoint(codePoint) {
			if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
				return stringFromCharCode(codePoint);
			}
			var symbol = '';
			if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
				symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
			}
			else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
				checkScalarValue(codePoint);
				symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
				symbol += createByte(codePoint, 6);
			}
			else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
				symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
				symbol += createByte(codePoint, 12);
				symbol += createByte(codePoint, 6);
			}
			symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
			return symbol;
		}
	
		function utf8encode(string) {
			var codePoints = ucs2decode(string);
			var length = codePoints.length;
			var index = -1;
			var codePoint;
			var byteString = '';
			while (++index < length) {
				codePoint = codePoints[index];
				byteString += encodeCodePoint(codePoint);
			}
			return byteString;
		}
	
		/*--------------------------------------------------------------------------*/
	
		function readContinuationByte() {
			if (byteIndex >= byteCount) {
				throw Error('Invalid byte index');
			}
	
			var continuationByte = byteArray[byteIndex] & 0xFF;
			byteIndex++;
	
			if ((continuationByte & 0xC0) == 0x80) {
				return continuationByte & 0x3F;
			}
	
			// If we end up here, it’s not a continuation byte
			throw Error('Invalid continuation byte');
		}
	
		function decodeSymbol() {
			var byte1;
			var byte2;
			var byte3;
			var byte4;
			var codePoint;
	
			if (byteIndex > byteCount) {
				throw Error('Invalid byte index');
			}
	
			if (byteIndex == byteCount) {
				return false;
			}
	
			// Read first byte
			byte1 = byteArray[byteIndex] & 0xFF;
			byteIndex++;
	
			// 1-byte sequence (no continuation bytes)
			if ((byte1 & 0x80) == 0) {
				return byte1;
			}
	
			// 2-byte sequence
			if ((byte1 & 0xE0) == 0xC0) {
				byte2 = readContinuationByte();
				codePoint = ((byte1 & 0x1F) << 6) | byte2;
				if (codePoint >= 0x80) {
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}
	
			// 3-byte sequence (may include unpaired surrogates)
			if ((byte1 & 0xF0) == 0xE0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
				if (codePoint >= 0x0800) {
					checkScalarValue(codePoint);
					return codePoint;
				} else {
					throw Error('Invalid continuation byte');
				}
			}
	
			// 4-byte sequence
			if ((byte1 & 0xF8) == 0xF0) {
				byte2 = readContinuationByte();
				byte3 = readContinuationByte();
				byte4 = readContinuationByte();
				codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
					(byte3 << 0x06) | byte4;
				if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
					return codePoint;
				}
			}
	
			throw Error('Invalid UTF-8 detected');
		}
	
		var byteArray;
		var byteCount;
		var byteIndex;
		function utf8decode(byteString) {
			byteArray = ucs2decode(byteString);
			byteCount = byteArray.length;
			byteIndex = 0;
			var codePoints = [];
			var tmp;
			while ((tmp = decodeSymbol()) !== false) {
				codePoints.push(tmp);
			}
			return ucs2encode(codePoints);
		}
	
		/*--------------------------------------------------------------------------*/
	
		root.version = '3.0.0';
		root.encode = utf8encode;
		root.decode = utf8decode;
	
	}(typeof exports === 'undefined' ? this.utf8 = {} : exports));
	
	},{}],107:[function(require,module,exports){
	(function (global){(function (){
	
	/**
	 * Module exports.
	 */
	
	module.exports = deprecate;
	
	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */
	
	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
		return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
		if (!warned) {
		  if (config('throwDeprecation')) {
			throw new Error(msg);
		  } else if (config('traceDeprecation')) {
			console.trace(msg);
		  } else {
			console.warn(msg);
		  }
		  warned = true;
		}
		return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	}
	
	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */
	
	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
		if (!global.localStorage) return false;
	  } catch (_) {
		return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	
	}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],108:[function(require,module,exports){
	/*
		This file is part of web3.js.
	
		web3.js is free software: you can redistribute it and/or modify
		it under the terms of the GNU Lesser General Public License as published by
		the Free Software Foundation, either version 3 of the License, or
		(at your option) any later version.
	
		web3.js is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU Lesser General Public License for more details.
	
		You should have received a copy of the GNU Lesser General Public License
		along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file errors.js
	 * @author Fabian Vogelsteller <fabian@ethereum.org>
	 * @author Marek Kotewicz <marek@parity.io>
	 * @date 2017
	 */
	"use strict";
	module.exports = {
		ErrorResponse: function (result) {
			var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);
			var data = (!!result.error && !!result.error.data) ? result.error.data : null;
			var err = new Error('Returned error: ' + message);
			err.data = data;
			return err;
		},
		InvalidNumberOfParams: function (got, expected, method) {
			return new Error('Invalid number of parameters for "' + method + '". Got ' + got + ' expected ' + expected + '!');
		},
		InvalidConnection: function (host, event) {
			return this.ConnectionError('CONNECTION ERROR: Couldn\'t connect to node ' + host + '.', event);
		},
		InvalidProvider: function () {
			return new Error('Provider not set or invalid');
		},
		InvalidResponse: function (result) {
			var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);
			return new Error(message);
		},
		ConnectionTimeout: function (ms) {
			return new Error('CONNECTION TIMEOUT: timeout of ' + ms + ' ms achived');
		},
		ConnectionNotOpenError: function (event) {
			return this.ConnectionError('connection not open on send()', event);
		},
		ConnectionCloseError: function (event) {
			if (typeof event === 'object' && event.code && event.reason) {
				return this.ConnectionError('CONNECTION ERROR: The connection got closed with ' +
					'the close code `' + event.code + '` and the following ' +
					'reason string `' + event.reason + '`', event);
			}
			return new Error('CONNECTION ERROR: The connection closed unexpectedly');
		},
		MaxAttemptsReachedOnReconnectingError: function () {
			return new Error('Maximum number of reconnect attempts reached!');
		},
		PendingRequestsOnReconnectingError: function () {
			return new Error('CONNECTION ERROR: Provider started to reconnect before the response got received!');
		},
		ConnectionError: function (msg, event) {
			const error = new Error(msg);
			if (event) {
				error.code = event.code;
				error.reason = event.reason;
			}
			return error;
		},
		RevertInstructionError: function (reason, signature) {
			var error = new Error('Your request got reverted with the following reason string: ' + reason);
			error.reason = reason;
			error.signature = signature;
			return error;
		},
		TransactionRevertInstructionError: function (reason, signature, receipt) {
			var error = new Error('Transaction has been reverted by the EVM:\n' + JSON.stringify(receipt, null, 2));
			error.reason = reason;
			error.signature = signature;
			error.receipt = receipt;
			return error;
		},
		TransactionError: function (message, receipt) {
			var error = new Error(message);
			error.receipt = receipt;
			return error;
		},
		NoContractAddressFoundError: function (receipt) {
			return this.TransactionError('The transaction receipt didn\'t contain a contract address.', receipt);
		},
		ContractCodeNotStoredError: function (receipt) {
			return this.TransactionError('The contract code couldn\'t be stored, please check your gas limit.', receipt);
		},
		TransactionRevertedWithoutReasonError: function (receipt) {
			return this.TransactionError('Transaction has been reverted by the EVM:\n' + JSON.stringify(receipt, null, 2), receipt);
		},
		TransactionOutOfGasError: function (receipt) {
			return this.TransactionError('Transaction ran out of gas. Please provide more gas:\n' + JSON.stringify(receipt, null, 2), receipt);
		},
		ResolverMethodMissingError: function (address, name) {
			return new Error('The resolver at ' + address + 'does not implement requested method: "' + name + '".');
		},
		ContractMissingABIError: function () {
			return new Error('You must provide the json interface of the contract when instantiating a contract object.');
		},
		ContractOnceRequiresCallbackError: function () {
			return new Error('Once requires a callback as the second parameter.');
		},
		ContractEventDoesNotExistError: function (eventName) {
			return new Error('Event "' + eventName + '" doesn\'t exist in this contract.');
		},
		ContractReservedEventError: function (type) {
			return new Error('The event "' + type + '" is a reserved event name, you can\'t use it.');
		},
		ContractMissingDeployDataError: function () {
			return new Error('No "data" specified in neither the given options, nor the default options.');
		},
		ContractNoAddressDefinedError: function () {
			return new Error('This contract object doesn\'t have address set yet, please set an address first.');
		},
		ContractNoFromAddressDefinedError: function () {
			return new Error('No "from" address specified in neither the given options, nor the default options.');
		}
	};
	
	},{}],109:[function(require,module,exports){
	/*
		This file is part of web3.js.
	
		web3.js is free software: you can redistribute it and/or modify
		it under the terms of the GNU Lesser General Public License as published by
		the Free Software Foundation, either version 3 of the License, or
		(at your option) any later version.
	
		web3.js is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU Lesser General Public License for more details.
	
		You should have received a copy of the GNU Lesser General Public License
		along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file formatters.js
	 * @author Fabian Vogelsteller <fabian@ethereum.org>
	 * @author Marek Kotewicz <marek@parity.io>
	 * @date 2017
	 */
	"use strict";
	var utils = require('web3-utils');
	var Iban = require('web3-eth-iban');
	/**
	 * Will format the given storage key array values to hex strings.
	 *
	 * @method inputStorageKeysFormatter
	 *
	 * @param {Array<Number|String|BN|BigNumber>} keys
	 *
	 * @returns {Array<String>}
	 */
	var inputStorageKeysFormatter = function (keys) {
		return keys.map(utils.numberToHex);
	};
	/**
	 * Will format the given proof response from the node.
	 *
	 * @method outputProofFormatter
	 *
	 * @param {object} proof
	 *
	 * @returns {object}
	 */
	var outputProofFormatter = function (proof) {
		proof.address = utils.toChecksumAddress(proof.address);
		proof.nonce = utils.hexToNumberString(proof.nonce);
		proof.balance = utils.hexToNumberString(proof.balance);
		return proof;
	};
	/**
	 * Should the format output to a big number
	 *
	 * @method outputBigNumberFormatter
	 *
	 * @param {String|Number|BigNumber|BN} number
	 *
	 * @returns {BN} object
	 */
	var outputBigNumberFormatter = function (number) {
		return utils.toBN(number).toString(10);
	};
	/**
	 * Returns true if the given blockNumber is 'latest', 'pending', 'earliest, 'finalized' or 'safe'
	 *
	 * @method isPredefinedBlockNumber
	 *
	 * @param {String} blockNumber
	 *
	 * @returns {Boolean}
	 */
	var isPredefinedBlockNumber = function (blockNumber) {
		return ['latest', 'pending', 'earliest', 'finalized', 'safe'].includes(blockNumber);
	};
	/**
	 * Returns the given block number as hex string or does return the defaultBlock property of the current module
	 *
	 * @method inputDefaultBlockNumberFormatter
	 *
	 * @param {String|Number|BN|BigNumber} blockNumber
	 *
	 * @returns {String}
	 */
	var inputDefaultBlockNumberFormatter = function (blockNumber) {
		if (this && (blockNumber === undefined || blockNumber === null)) {
			return inputBlockNumberFormatter(this.defaultBlock);
		}
		return inputBlockNumberFormatter(blockNumber);
	};
	/**
	 * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'finalized', 'safe', 'genesis'
	 *
	 * @param {String|Number|BN|BigNumber} blockNumber
	 *
	 * @returns {String}
	 */
	var inputBlockNumberFormatter = function (blockNumber) {
		if (blockNumber === undefined) {
			return undefined;
		}
		if (isPredefinedBlockNumber(blockNumber)) {
			return blockNumber;
		}
		if (blockNumber === 'genesis') {
			return '0x0';
		}
		return (utils.isHexStrict(blockNumber)) ? ((typeof blockNumber === 'string') ? blockNumber.toLowerCase() : blockNumber) : utils.numberToHex(blockNumber);
	};
	/**
	 * Formats the input of a transaction and converts all values to HEX
	 *
	 * @method _txInputFormatter
	 * @param {Object} transaction options
	 * @returns object
	 */
	var _txInputFormatter = function (options) {
		if (options.to) { // it might be contract creation
			options.to = inputAddressFormatter(options.to);
		}
		if (options.data && options.input) {
			throw new Error('You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.');
		}
		if (!options.data && options.input) {
			options.data = options.input;
			delete options.input;
		}
		if (options.data && !options.data.startsWith('0x')) {
			options.data = '0x' + options.data;
		}
		if (options.data && !utils.isHex(options.data)) {
			throw new Error('The data field must be HEX encoded data.');
		}
		// allow both
		if (options.gas || options.gasLimit) {
			options.gas = options.gas || options.gasLimit;
		}
		if (options.maxPriorityFeePerGas || options.maxFeePerGas) {
			delete options.gasPrice;
		}
		['gasPrice', 'gas', 'value', 'maxPriorityFeePerGas', 'maxFeePerGas', 'nonce'].filter(function (key) {
			return options[key] !== undefined;
		}).forEach(function (key) {
			options[key] = utils.numberToHex(options[key]);
		});
		return options;
	};
	/**
	 * Formats the input of a transaction and converts all values to HEX
	 *
	 * @method inputCallFormatter
	 * @param {Object} transaction options
	 * @returns object
	 */
	var inputCallFormatter = function (options) {
		options = _txInputFormatter(options);
		var from = options.from || (this ? this.defaultAccount : null);
		if (from) {
			options.from = inputAddressFormatter(from);
		}
		return options;
	};
	/**
	 * Formats the input of a transaction and converts all values to HEX
	 *
	 * @method inputTransactionFormatter
	 * @param {Object} options
	 * @returns object
	 */
	var inputTransactionFormatter = function (options) {
		options = _txInputFormatter(options);
		// check from, only if not number, or object
		if (!(typeof options.from === 'number') && !(!!options.from && typeof options.from === 'object')) {
			options.from = options.from || (this ? this.defaultAccount : null);
			if (!options.from && !(typeof options.from === 'number')) {
				throw new Error('The send transactions "from" field must be defined!');
			}
			options.from = inputAddressFormatter(options.from);
		}
		return options;
	};
	/**
	 * Hex encodes the data passed to eth_sign and personal_sign
	 *
	 * @method inputSignFormatter
	 * @param {String} data
	 * @returns {String}
	 */
	var inputSignFormatter = function (data) {
		return (utils.isHexStrict(data)) ? data : utils.utf8ToHex(data);
	};
	/**
	 * Formats the output of a transaction to its proper values
	 *
	 * @method outputTransactionFormatter
	 * @param {Object} tx
	 * @returns {Object}
	 */
	var outputTransactionFormatter = function (tx) {
		if (tx.blockNumber !== null)
			tx.blockNumber = utils.hexToNumber(tx.blockNumber);
		if (tx.transactionIndex !== null)
			tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);
		tx.nonce = utils.hexToNumber(tx.nonce);
		tx.gas = utils.hexToNumber(tx.gas);
		if (tx.gasPrice)
			tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);
		if (tx.maxFeePerGas)
			tx.maxFeePerGas = outputBigNumberFormatter(tx.maxFeePerGas);
		if (tx.maxPriorityFeePerGas)
			tx.maxPriorityFeePerGas = outputBigNumberFormatter(tx.maxPriorityFeePerGas);
		if (tx.type)
			tx.type = utils.hexToNumber(tx.type);
		tx.value = outputBigNumberFormatter(tx.value);
		if (tx.to && utils.isAddress(tx.to)) { // tx.to could be `0x0` or `null` while contract creation
			tx.to = utils.toChecksumAddress(tx.to);
		}
		else {
			tx.to = null; // set to `null` if invalid address
		}
		if (tx.from) {
			tx.from = utils.toChecksumAddress(tx.from);
		}
		return tx;
	};
	/**
	 * Formats the output of a transaction receipt to its proper values
	 *
	 * @method outputTransactionReceiptFormatter
	 * @param {Object} receipt
	 * @returns {Object}
	 */
	var outputTransactionReceiptFormatter = function (receipt) {
		if (typeof receipt !== 'object') {
			throw new Error('Received receipt is invalid: ' + receipt);
		}
		if (!this.hexFormat) {
			if (receipt.blockNumber !== null)
				receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);
			if (receipt.transactionIndex !== null)
				receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);
			receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);
			receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);
			if (receipt.effectiveGasPrice) {
				receipt.effectiveGasPrice = utils.hexToNumber(receipt.effectiveGasPrice);
			}
		}
		if (Array.isArray(receipt.logs)) {
			receipt.logs = receipt.logs.map(outputLogFormatter);
		}
		if (receipt.contractAddress) {
			receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);
		}
		if (typeof receipt.status !== 'undefined' && receipt.status !== null) {
			receipt.status = Boolean(parseInt(receipt.status));
		}
		return receipt;
	};
	/**
	 * Formats the output of a block to its proper values
	 *
	 * @method outputBlockFormatter
	 * @param {Object} block
	 * @returns {Object}
	 */
	var outputBlockFormatter = function (block) {
		// transform to number
		block.gasLimit = utils.hexToNumber(block.gasLimit);
		block.gasUsed = utils.hexToNumber(block.gasUsed);
		block.size = utils.hexToNumber(block.size);
		block.timestamp = utils.hexToNumber(block.timestamp);
		if (block.number !== null)
			block.number = utils.hexToNumber(block.number);
		if (block.difficulty)
			block.difficulty = outputBigNumberFormatter(block.difficulty);
		if (block.totalDifficulty)
			block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);
		if (Array.isArray(block.transactions)) {
			block.transactions.forEach(function (item) {
				if (!(typeof item === 'string'))
					return outputTransactionFormatter(item);
			});
		}
		if (block.miner)
			block.miner = utils.toChecksumAddress(block.miner);
		if (block.baseFeePerGas)
			block.baseFeePerGas = utils.hexToNumber(block.baseFeePerGas);
		return block;
	};
	/**
	 * Formats the input of a log
	 *
	 * @method inputLogFormatter
	 * @param {Object} log object
	 * @returns {Object} log
	 */
	var inputLogFormatter = function (options) {
		var toTopic = function (value) {
			if (value === null || typeof value === 'undefined')
				return null;
			value = String(value);
			if (value.indexOf('0x') === 0)
				return value;
			else
				return utils.fromUtf8(value);
		};
		if (options === undefined)
			options = {};
		// If options !== undefined, don't blow out existing data
		if (options.fromBlock === undefined)
			options = { ...options, fromBlock: 'latest' };
		if (options.fromBlock || options.fromBlock === 0)
			options.fromBlock = inputBlockNumberFormatter(options.fromBlock);
		if (options.toBlock || options.toBlock === 0)
			options.toBlock = inputBlockNumberFormatter(options.toBlock);
		// make sure topics, get converted to hex
		options.topics = options.topics || [];
		options.topics = options.topics.map(function (topic) {
			return (Array.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);
		});
		toTopic = null;
		if (options.address) {
			options.address = (Array.isArray(options.address)) ? options.address.map(function (addr) {
				return inputAddressFormatter(addr);
			}) : inputAddressFormatter(options.address);
		}
		return options;
	};
	/**
	 * Formats the output of a log
	 *
	 * @method outputLogFormatter
	 * @param {Object} log object
	 * @returns {Object} log
	 */
	var outputLogFormatter = function (log) {
		// generate a custom log id
		if (typeof log.blockHash === 'string' &&
			typeof log.transactionHash === 'string' &&
			typeof log.logIndex === 'string') {
			var shaId = utils.sha3(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''));
			log.id = 'log_' + shaId.replace('0x', '').slice(0, 8);
		}
		else if (!log.id) {
			log.id = null;
		}
		if (log.blockNumber !== null)
			log.blockNumber = utils.hexToNumber(log.blockNumber);
		if (log.transactionIndex !== null)
			log.transactionIndex = utils.hexToNumber(log.transactionIndex);
		if (log.logIndex !== null)
			log.logIndex = utils.hexToNumber(log.logIndex);
		if (log.address) {
			log.address = utils.toChecksumAddress(log.address);
		}
		return log;
	};
	/**
	 * Formats the input of a whisper post and converts all values to HEX
	 *
	 * @method inputPostFormatter
	 * @param {Object} transaction object
	 * @returns {Object}
	 */
	var inputPostFormatter = function (post) {
		// post.payload = utils.toHex(post.payload);
		if (post.ttl)
			post.ttl = utils.numberToHex(post.ttl);
		if (post.workToProve)
			post.workToProve = utils.numberToHex(post.workToProve);
		if (post.priority)
			post.priority = utils.numberToHex(post.priority);
		// fallback
		if (!Array.isArray(post.topics)) {
			post.topics = post.topics ? [post.topics] : [];
		}
		// format the following options
		post.topics = post.topics.map(function (topic) {
			// convert only if not hex
			return (topic.indexOf('0x') === 0) ? topic : utils.fromUtf8(topic);
		});
		return post;
	};
	/**
	 * Formats the output of a received post message
	 *
	 * @method outputPostFormatter
	 * @param {Object}
	 * @returns {Object}
	 */
	var outputPostFormatter = function (post) {
		post.expiry = utils.hexToNumber(post.expiry);
		post.sent = utils.hexToNumber(post.sent);
		post.ttl = utils.hexToNumber(post.ttl);
		post.workProved = utils.hexToNumber(post.workProved);
		// post.payloadRaw = post.payload;
		// post.payload = utils.hexToAscii(post.payload);
		// if (utils.isJson(post.payload)) {
		//     post.payload = JSON.parse(post.payload);
		// }
		// format the following options
		if (!post.topics) {
			post.topics = [];
		}
		post.topics = post.topics.map(function (topic) {
			return utils.toUtf8(topic);
		});
		return post;
	};
	var inputAddressFormatter = function (address) {
		var iban = new Iban(address);
		if (iban.isValid() && iban.isDirect()) {
			return iban.toAddress().toLowerCase();
		}
		else if (utils.isAddress(address)) {
			return '0x' + address.toLowerCase().replace('0x', '');
		}
		throw new Error(`Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`);
	};
	var outputSyncingFormatter = function (result) {
		result.startingBlock = utils.hexToNumber(result.startingBlock);
		result.currentBlock = utils.hexToNumber(result.currentBlock);
		result.highestBlock = utils.hexToNumber(result.highestBlock);
		if (result.knownStates) {
			result.knownStates = utils.hexToNumber(result.knownStates);
			result.pulledStates = utils.hexToNumber(result.pulledStates);
		}
		return result;
	};
	module.exports = {
		inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
		inputBlockNumberFormatter: inputBlockNumberFormatter,
		inputCallFormatter: inputCallFormatter,
		inputTransactionFormatter: inputTransactionFormatter,
		inputAddressFormatter: inputAddressFormatter,
		inputPostFormatter: inputPostFormatter,
		inputLogFormatter: inputLogFormatter,
		inputSignFormatter: inputSignFormatter,
		inputStorageKeysFormatter: inputStorageKeysFormatter,
		outputProofFormatter: outputProofFormatter,
		outputBigNumberFormatter: outputBigNumberFormatter,
		outputTransactionFormatter: outputTransactionFormatter,
		outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
		outputBlockFormatter: outputBlockFormatter,
		outputLogFormatter: outputLogFormatter,
		outputPostFormatter: outputPostFormatter,
		outputSyncingFormatter: outputSyncingFormatter
	};
	
	},{"web3-eth-iban":111,"web3-utils":114}],110:[function(require,module,exports){
	/*
		This file is part of web3.js.
	
		web3.js is free software: you can redistribute it and/or modify
		it under the terms of the GNU Lesser General Public License as published by
		the Free Software Foundation, either version 3 of the License, or
		(at your option) any later version.
	
		web3.js is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU Lesser General Public License for more details.
	
		You should have received a copy of the GNU Lesser General Public License
		along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file index.js
	 * @author Fabian Vogelsteller <fabian@ethereum.org>
	 * @date 2017
	 */
	"use strict";
	var errors = require('./errors');
	var formatters = require('./formatters');
	module.exports = {
		errors: errors,
		formatters: formatters
	};
	
	},{"./errors":108,"./formatters":109}],111:[function(require,module,exports){
	/*
		This file is part of web3.js.
	
		web3.js is free software: you can redistribute it and/or modify
		it under the terms of the GNU Lesser General Public License as published by
		the Free Software Foundation, either version 3 of the License, or
		(at your option) any later version.
	
		web3.js is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU Lesser General Public License for more details.
	
		You should have received a copy of the GNU Lesser General Public License
		along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/**
	 * @file iban.js
	 *
	 * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol
	 *
	 * @author Marek Kotewicz <marek@parity.io>
	 * @date 2015
	 */
	"use strict";
	const utils = require('web3-utils');
	const BigNumber = require('bn.js');
	const leftPad = function (string, bytes) {
		let result = string;
		while (result.length < bytes * 2) {
			result = '0' + result;
		}
		return result;
	};
	/**
	 * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
	 * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
	 *
	 * @method iso13616Prepare
	 * @param {String} iban the IBAN
	 * @returns {String} the prepared IBAN
	 */
	const iso13616Prepare = function (iban) {
		const A = 'A'.charCodeAt(0);
		const Z = 'Z'.charCodeAt(0);
		iban = iban.toUpperCase();
		iban = iban.slice(4) + iban.slice(0, 4);
		return iban.split('').map(function (n) {
			const code = n.charCodeAt(0);
			if (code >= A && code <= Z) {
				// A = 10, B = 11, ... Z = 35
				return code - A + 10;
			}
			else {
				return n;
			}
		}).join('');
	};
	/**
	 * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
	 *
	 * @method mod9710
	 * @param {String} iban
	 * @returns {Number}
	 */
	const mod9710 = function (iban) {
		let remainder = iban;
		let block;
		while (remainder.length > 2) {
			block = remainder.slice(0, 9);
			remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);
		}
		return parseInt(remainder, 10) % 97;
	};
	/**
	 * This prototype should be used to create iban object from iban correct string
	 *
	 * @param {String} iban
	 */
	class Iban {
		constructor(iban) {
			this._iban = iban;
		}
		/**
		 * This method should be used to create an ethereum address from a direct iban address
		 *
		 * @method toAddress
		 * @param {String} iban address
		 * @return {String} the ethereum address
		 */
		static toAddress(ib) {
			ib = new Iban(ib);
			if (!ib.isDirect()) {
				throw new Error('IBAN is indirect and can\'t be converted');
			}
			return ib.toAddress();
		}
		/**
		 * This method should be used to create iban address from an ethereum address
		 *
		 * @method toIban
		 * @param {String} address
		 * @return {String} the IBAN address
		 */
		static toIban(address) {
			return Iban.fromAddress(address).toString();
		}
		/**
		 * This method should be used to create iban object from an ethereum address
		 *
		 * @method fromAddress
		 * @param {String} address
		 * @return {Iban} the IBAN object
		 */
		static fromAddress(address) {
			if (!utils.isAddress(address)) {
				throw new Error('Provided address is not a valid address: ' + address);
			}
			address = address.replace('0x', '').replace('0X', '');
			const asBn = new BigNumber(address, 16);
			const base36 = asBn.toString(36);
			const padded = leftPad(base36, 15);
			return Iban.fromBban(padded.toUpperCase());
		}
		/**
		 * Convert the passed BBAN to an IBAN for this country specification.
		 * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
		 * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
		 *
		 * @method fromBban
		 * @param {String} bban the BBAN to convert to IBAN
		 * @returns {Iban} the IBAN object
		 */
		static fromBban(bban) {
			const countryCode = 'XE';
			const remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));
			const checkDigit = ('0' + (98 - remainder)).slice(-2);
			return new Iban(countryCode + checkDigit + bban);
		}
		/**
		 * Should be used to create IBAN object for given institution and identifier
		 *
		 * @method createIndirect
		 * @param {Object} options, required options are "institution" and "identifier"
		 * @return {Iban} the IBAN object
		 */
		static createIndirect(options) {
			return Iban.fromBban('ETH' + options.institution + options.identifier);
		}
		/**
		 * This method should be used to check if given string is valid iban object
		 *
		 * @method isValid
		 * @param {String} iban string
		 * @return {Boolean} true if it is valid IBAN
		 */
		static isValid(iban) {
			const i = new Iban(iban);
			return i.isValid();
		}
		;
		/**
		 * Should be called to check if iban is correct
		 *
		 * @method isValid
		 * @returns {Boolean} true if it is, otherwise false
		 */
		isValid() {
			return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&
				mod9710(iso13616Prepare(this._iban)) === 1;
		}
		;
		/**
		 * Should be called to check if iban number is direct
		 *
		 * @method isDirect
		 * @returns {Boolean} true if it is, otherwise false
		 */
		isDirect() {
			return this._iban.length === 34 || this._iban.length === 35;
		}
		;
		/**
		 * Should be called to check if iban number if indirect
		 *
		 * @method isIndirect
		 * @returns {Boolean} true if it is, otherwise false
		 */
		isIndirect() {
			return this._iban.length === 20;
		}
		;
		/**
		 * Should be called to get iban checksum
		 * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
		 *
		 * @method checksum
		 * @returns {String} checksum
		 */
		checksum() {
			return this._iban.slice(2, 4);
		}
		;
		/**
		 * Should be called to get institution identifier
		 * eg. XREG
		 *
		 * @method institution
		 * @returns {String} institution identifier
		 */
		institution() {
			return this.isIndirect() ? this._iban.slice(7, 11) : '';
		}
		;
		/**
		 * Should be called to get client identifier within institution
		 * eg. GAVOFYORK
		 *
		 * @method client
		 * @returns {String} client identifier
		 */
		client() {
			return this.isIndirect() ? this._iban.slice(11) : '';
		}
		;
		/**
		 * Should be called to get client direct address
		 *
		 * @method toAddress
		 * @returns {String} ethereum address
		 */
		toAddress() {
			if (this.isDirect()) {
				const base36 = this._iban.slice(4);
				const asBn = new BigNumber(base36, 36);
				return utils.toChecksumAddress(asBn.toString(16, 20));
			}
			return '';
		}
		;
		toString() {
			return this._iban;
		}
		;
	}
	module.exports = Iban;
	
	},{"bn.js":112,"web3-utils":114}],112:[function(require,module,exports){
	arguments[4][42][0].apply(exports,arguments)
	},{"buffer":124,"dup":42}],113:[function(require,module,exports){
	/*
		This file is part of web3.js.
	
		web3.js is free software: you can redistribute it and/or modify
		it under the terms of the GNU Lesser General Public License as published by
		the Free Software Foundation, either version 3 of the License, or
		(at your option) any later version.
	
		web3.js is distributed in the hope that it will be useful,
		but WITHOUT ANY WARRANTY; without even the implied warranty of
		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
		GNU Lesser General Public License for more details.
	
		You should have received a copy of the GNU Lesser General Public License
		along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	*/
	/** @file httpprovider.js
	 * @authors:
	 *   Marek Kotewicz <marek@parity.io>
	 *   Marian Oancea
	 *   Fabian Vogelsteller <fabian@ethereum.org>
	 *   AyanamiTech <ayanami0330@protonmail.com>
	 * @date 2015
	 */
	var errors = require('web3-core-helpers').errors;
	var http = require('http');
	var https = require('https');
	// Apply missing polyfill for IE
	require('cross-fetch/polyfill');
	require('es6-promise').polyfill();
	require('abortcontroller-polyfill/dist/polyfill-patch-fetch');
	/**
	 * HttpProvider should be used to send rpc calls over http
	 */
	var HttpProvider = function HttpProvider(host, options) {
		options = options || {};
		this.withCredentials = options.withCredentials;
		this.timeout = options.timeout || 0;
		this.headers = options.headers;
		this.agent = options.agent;
		this.connected = false;
		// keepAlive is true unless explicitly set to false
		const keepAlive = options.keepAlive !== false;
		this.host = host || 'http://localhost:8545';
		if (!this.agent) {
			if (this.host.substring(0, 5) === "https") {
				this.httpsAgent = new https.Agent({ keepAlive });
			}
			else {
				this.httpAgent = new http.Agent({ keepAlive });
			}
		}
	};
	/**
	 * Should be used to make async request
	 *
	 * @method send
	 * @param {Object} payload
	 * @param {Function} callback triggered on end with (err, result)
	 */
	HttpProvider.prototype.send = function (payload, callback) {
		var options = {
			method: 'POST',
			body: JSON.stringify(payload)
		};
		var headers = {};
		var controller;
		if (typeof AbortController !== 'undefined') {
			controller = new AbortController();
		}
		else if (typeof window !== 'undefined' && typeof window.AbortController !== 'undefined') {
			// Some chrome version doesn't recognize new AbortController(); so we are using it from window instead
			// https://stackoverflow.com/questions/55718778/why-abortcontroller-is-not-defined
			controller = new window.AbortController();
		}
		if (typeof controller !== 'undefined') {
			options.signal = controller.signal;
		}
		// the current runtime is node
		if (typeof XMLHttpRequest === 'undefined') {
			// https://github.com/node-fetch/node-fetch#custom-agent
			var agents = { httpsAgent: this.httpsAgent, httpAgent: this.httpAgent };
			if (this.agent) {
				agents.httpsAgent = this.agent.https;
				agents.httpAgent = this.agent.http;
			}
			if (this.host.substring(0, 5) === "https") {
				options.agent = agents.httpsAgent;
			}
			else {
				options.agent = agents.httpAgent;
			}
		}
		if (this.headers) {
			this.headers.forEach(function (header) {
				headers[header.name] = header.value;
			});
		}
		// Default headers
		if (!headers['Content-Type']) {
			headers['Content-Type'] = 'application/json';
		}
		// As the Fetch API supports the credentials as following options 'include', 'omit', 'same-origin'
		// https://developer.mozilla.org/en-US/docs/Web/API/fetch#credentials
		// To avoid breaking change in 1.x we override this value based on boolean option.
		if (this.withCredentials) {
			options.credentials = 'include';
		}
		else {
			options.credentials = 'omit';
		}
		options.headers = headers;
		if (this.timeout > 0 && typeof controller !== 'undefined') {
			this.timeoutId = setTimeout(function () {
				controller.abort();
			}, this.timeout);
		}
		var success = function (response) {
			if (this.timeoutId !== undefined) {
				clearTimeout(this.timeoutId);
			}
			// Response is a stream data so should be awaited for json response
			response.json().then(function (data) {
				callback(null, data);
			}).catch(function (error) {
				callback(errors.InvalidResponse(response));
			});
		};
		var failed = function (error) {
			if (this.timeoutId !== undefined) {
				clearTimeout(this.timeoutId);
			}
			if (error.name === 'AbortError') {
				callback(errors.ConnectionTimeout(this.timeout));
			}
			callback(errors.InvalidConnection(this.host));
		};
		fetch(this.host, options)
			.then(success.bind(this))
			.catch(failed.bind(this));
	};
	HttpProvider.prototype.disconnect = function () {
		//NO OP
	};
	/**
	 * Returns the desired boolean.
	 *
	 * @method supportsSubscriptions
	 * @returns {boolean}
	 */
	HttpProvider.prototype.supportsSubscriptions = function () {
		return false;
	};
	module.exports = HttpProvider;
	
	},{"abortcontroller-polyfill/dist/polyfill-patch-fetch":1,"cross-fetch/polyfill":6,"es6-promise":23,"http":154,"https":128,"web3-core-helpers":110}],114:[function(require,module,exports){
	/*
	 This file is part of web3.js.
	
	 web3.js is free software: you can redistribute it and/or modify
	 it under the terms of the GNU Lesser General Public License as published by
	 the Free Software Foundation, either version 3 of the License, or
	 (at your option) any later version.
	
	 web3.js is distributed in the hope that it will be useful,
	 but WITHOUT ANY WARRANTY; without even the implied warranty of
	 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 GNU Lesser General Public License for more details.
	
	 You should have received a copy of the GNU Lesser General Public License
	 along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	 */
	/**
	 * @file utils.js
	 * @author Marek Kotewicz <marek@parity.io>
	 * @author Fabian Vogelsteller <fabian@ethereum.org>
	 * @date 2017
	 */
	var ethjsUnit = require('ethjs-unit');
	var utils = require('./utils.js');
	var soliditySha3 = require('./soliditySha3.js');
	var randombytes = require('randombytes');
	var BN = require('bn.js');
	/**
	 * Fires an error in an event emitter and callback and returns the eventemitter
	 *
	 * @method _fireError
	 * @param {Object} error a string, a error, or an object with {message, data}
	 * @param {Object} emitter
	 * @param {Function} reject
	 * @param {Function} callback
	 * @param {any} optionalData
	 * @return {Object} the emitter
	 */
	var _fireError = function (error, emitter, reject, callback, optionalData) {
		/*jshint maxcomplexity: 10 */
		// add data if given
		if (!!error && typeof error === 'object' && !(error instanceof Error) && error.data) {
			if (!!error.data && typeof error.data === 'object' || Array.isArray(error.data)) {
				error.data = JSON.stringify(error.data, null, 2);
			}
			error = error.message + "\n" + error.data;
		}
		if (typeof error === 'string') {
			error = new Error(error);
		}
		if (typeof callback === 'function') {
			callback(error, optionalData);
		}
		if (typeof reject === 'function') {
			// suppress uncatched error if an error listener is present
			// OR suppress uncatched error if an callback listener is present
			if (emitter &&
				(typeof emitter.listeners === 'function' &&
					emitter.listeners('error').length) || typeof callback === 'function') {
				emitter.catch(function () { });
			}
			// reject later, to be able to return emitter
			setTimeout(function () {
				reject(error);
			}, 1);
		}
		if (emitter && typeof emitter.emit === 'function') {
			// emit later, to be able to return emitter
			setTimeout(function () {
				emitter.emit('error', error, optionalData);
				emitter.removeAllListeners();
			}, 1);
		}
		return emitter;
	};
	/**
	 * Should be used to create full function/event name from json abi
	 *
	 * @method _jsonInterfaceMethodToString
	 * @param {Object} json
	 * @return {String} full function/event name
	 */
	var _jsonInterfaceMethodToString = function (json) {
		if (!!json && typeof json === 'object' && json.name && json.name.indexOf('(') !== -1) {
			return json.name;
		}
		return json.name + '(' + _flattenTypes(false, json.inputs).join(',') + ')';
	};
	/**
	 * Should be used to flatten json abi inputs/outputs into an array of type-representing-strings
	 *
	 * @method _flattenTypes
	 * @param {bool} includeTuple
	 * @param {Object} puts
	 * @return {Array} parameters as strings
	 */
	var _flattenTypes = function (includeTuple, puts) {
		// console.log("entered _flattenTypes. inputs/outputs: " + puts)
		var types = [];
		puts.forEach(function (param) {
			if (typeof param.components === 'object') {
				if (param.type.substring(0, 5) !== 'tuple') {
					throw new Error('components found but type is not tuple; report on GitHub');
				}
				var suffix = '';
				var arrayBracket = param.type.indexOf('[');
				if (arrayBracket >= 0) {
					suffix = param.type.substring(arrayBracket);
				}
				var result = _flattenTypes(includeTuple, param.components);
				// console.log("result should have things: " + result)
				if (Array.isArray(result) && includeTuple) {
					// console.log("include tuple word, and its an array. joining...: " + result.types)
					types.push('tuple(' + result.join(',') + ')' + suffix);
				}
				else if (!includeTuple) {
					// console.log("don't include tuple, but its an array. joining...: " + result)
					types.push('(' + result.join(',') + ')' + suffix);
				}
				else {
					// console.log("its a single type within a tuple: " + result.types)
					types.push('(' + result + ')');
				}
			}
			else {
				// console.log("its a type and not directly in a tuple: " + param.type)
				types.push(param.type);
			}
		});
		return types;
	};
	/**
	 * Returns a random hex string by the given bytes size
	 *
	 * @param {Number} size
	 * @returns {string}
	 */
	var randomHex = function (size) {
		return '0x' + randombytes(size).toString('hex');
	};
	/**
	 * Should be called to get ascii from it's hex representation
	 *
	 * @method hexToAscii
	 * @param {String} hex
	 * @returns {String} ascii string representation of hex value
	 */
	var hexToAscii = function (hex) {
		if (!utils.isHexStrict(hex))
			throw new Error('The parameter must be a valid HEX string.');
		var str = "";
		var i = 0, l = hex.length;
		if (hex.substring(0, 2) === '0x') {
			i = 2;
		}
		for (; i < l; i += 2) {
			var code = parseInt(hex.slice(i, i + 2), 16);
			str += String.fromCharCode(code);
		}
		return str;
	};
	/**
	 * Should be called to get hex representation (prefixed by 0x) of ascii string
	 *
	 * @method asciiToHex
	 * @param {String} str
	 * @returns {String} hex representation of input string
	 */
	var asciiToHex = function (str) {
		if (!str)
			return "0x00";
		var hex = "";
		for (var i = 0; i < str.length; i++) {
			var code = str.charCodeAt(i);
			var n = code.toString(16);
			hex += n.length < 2 ? '0' + n : n;
		}
		return "0x" + hex;
	};
	/**
	 * Returns value of unit in Wei
	 *
	 * @method getUnitValue
	 * @param {String} unit the unit to convert to, default ether
	 * @returns {BN} value of the unit (in Wei)
	 * @throws error if the unit is not correct:w
	 */
	var getUnitValue = function (unit) {
		unit = unit ? unit.toLowerCase() : 'ether';
		if (!ethjsUnit.unitMap[unit]) {
			throw new Error('This unit "' + unit + '" doesn\'t exist, please use the one of the following units' + JSON.stringify(ethjsUnit.unitMap, null, 2));
		}
		return unit;
	};
	/**
	 * Takes a number of wei and converts it to any other ether unit.
	 *
	 * Possible units are:
	 *   SI Short   SI Full        Effigy       Other
	 * - kwei       femtoether     babbage
	 * - mwei       picoether      lovelace
	 * - gwei       nanoether      shannon      nano
	 * - --         microether     szabo        micro
	 * - --         milliether     finney       milli
	 * - ether      --             --
	 * - kether                    --           grand
	 * - mether
	 * - gether
	 * - tether
	 *
	 * @method fromWei
	 * @param {Number|String} number can be a number, number string or a HEX of a decimal
	 * @param {String} unit the unit to convert to, default ether
	 * @return {String|Object} When given a BN object it returns one as well, otherwise a number
	 */
	var fromWei = function (number, unit) {
		unit = getUnitValue(unit);
		if (!utils.isBN(number) && !(typeof number === 'string')) {
			throw new Error('Please pass numbers as strings or BN objects to avoid precision errors.');
		}
		return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);
	};
	/**
	 * Takes a number of a unit and converts it to wei.
	 *
	 * Possible units are:
	 *   SI Short   SI Full        Effigy       Other
	 * - kwei       femtoether     babbage
	 * - mwei       picoether      lovelace
	 * - gwei       nanoether      shannon      nano
	 * - --         microether     szabo        micro
	 * - --         microether     szabo        micro
	 * - --         milliether     finney       milli
	 * - ether      --             --
	 * - kether                    --           grand
	 * - mether
	 * - gether
	 * - tether
	 *
	 * @method toWei
	 * @param {Number|String|BN} number can be a number, number string or a HEX of a decimal
	 * @param {String} unit the unit to convert from, default ether
	 * @return {String|Object} When given a BN object it returns one as well, otherwise a number
	 */
	var toWei = function (number, unit) {
		unit = getUnitValue(unit);
		if (!utils.isBN(number) && !(typeof number === 'string')) {
			throw new Error('Please pass numbers as strings or BN objects to avoid precision errors.');
		}
		return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);
	};
	/**
	 * Converts to a checksum address
	 *
	 * @method toChecksumAddress
	 * @param {String} address the given HEX address
	 * @return {String}
	 */
	var toChecksumAddress = function (address) {
		if (typeof address === 'undefined')
			return '';
		if (!/^(0x)?[0-9a-f]{40}$/i.test(address))
			throw new Error('Given address "' + address + '" is not a valid Ethereum address.');
		address = address.toLowerCase().replace(/^0x/i, '');
		var addressHash = utils.sha3(address).replace(/^0x/i, '');
		var checksumAddress = '0x';
		for (var i = 0; i < address.length; i++) {
			// If ith character is 8 to f then make it uppercase
			if (parseInt(addressHash[i], 16) > 7) {
				checksumAddress += address[i].toUpperCase();
			}
			else {
				checksumAddress += address[i];
			}
		}
		return checksumAddress;
	};
	/**
	 * Returns -1 if a<b, 1 if a>b; 0 if a == b.
	 * For more details on this type of function, see
	 * developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
	 * Block tag `safe` and `block number` combination param is not supported
	 * @method compareBlockNumbers
	 *
	 * @param {String|Number|BN} a
	 *
	 * @param {String|Number|BN} b
	 *
	 * @returns {Number} -1, 0, or 1
	 */
	var compareBlockNumbers = function (a, b) {
		// Increasing order: (genesis = earliest), safe, (finalized ~ latest), pending
		// safe vs block-num cant be compared as block number provided can be on left or right side of safe tag, until safe tag block number is extracted and compared
		if (a === b) {
			return 0;
		}
		else if (("genesis" === a || "earliest" === a || 0 === a) && ("genesis" === b || "earliest" === b || 0 === b)) {
			return 0;
		}
		else if ("genesis" === a || "earliest" === a || a === 0) {
			// b !== a, thus a < b
			return -1;
		}
		else if ("genesis" === b || "earliest" === b || b === 0) {
			// b !== a, thus a > b
			return 1;
		}
		else if (a === "latest" || a === "finalized") {
			if (b === "pending") {
				return -1;
			}
			else {
				// b !== ("pending" OR "latest"), thus a > b
				return 1;
			}
		}
		else if (b === "latest" || b === "finalized") {
			if (a === "pending") {
				return 1;
			}
			else {
				// b !== ("pending" OR "latest"), thus a > b
				return -1;
			}
		}
		else if (a === "pending") {
			// b (== OR <) "latest", thus a > b
			return 1;
		}
		else if (b === "pending") {
			return -1;
		}
		else if (a === "safe" || b === "safe") {
			// either a or b is "safe" and the other one did not fall into any of the conditions above, so the other one is a number
			return undefined;
		}
		else {
			let bnA = new BN(a);
			let bnB = new BN(b);
			if (bnA.lt(bnB)) {
				return -1;
			}
			else if (bnA.eq(bnB)) {
				return 0;
			}
			else {
				return 1;
			}
		}
	};
	module.exports = {
		_fireError: _fireError,
		_jsonInterfaceMethodToString: _jsonInterfaceMethodToString,
		_flattenTypes: _flattenTypes,
		// extractDisplayName: extractDisplayName,
		// extractTypeName: extractTypeName,
		randomHex: randomHex,
		BN: utils.BN,
		isBN: utils.isBN,
		isBigNumber: utils.isBigNumber,
		isHex: utils.isHex,
		isHexStrict: utils.isHexStrict,
		sha3: utils.sha3,
		sha3Raw: utils.sha3Raw,
		keccak256: utils.sha3,
		soliditySha3: soliditySha3.soliditySha3,
		soliditySha3Raw: soliditySha3.soliditySha3Raw,
		encodePacked: soliditySha3.encodePacked,
		isAddress: utils.isAddress,
		checkAddressChecksum: utils.checkAddressChecksum,
		toChecksumAddress: toChecksumAddress,
		toHex: utils.toHex,
		toBN: utils.toBN,
		bytesToHex: utils.bytesToHex,
		hexToBytes: utils.hexToBytes,
		hexToNumberString: utils.hexToNumberString,
		hexToNumber: utils.hexToNumber,
		toDecimal: utils.hexToNumber,
		numberToHex: utils.numberToHex,
		fromDecimal: utils.numberToHex,
		hexToUtf8: utils.hexToUtf8,
		hexToString: utils.hexToUtf8,
		toUtf8: utils.hexToUtf8,
		stripHexPrefix: utils.stripHexPrefix,
		utf8ToHex: utils.utf8ToHex,
		stringToHex: utils.utf8ToHex,
		fromUtf8: utils.utf8ToHex,
		hexToAscii: hexToAscii,
		toAscii: hexToAscii,
		asciiToHex: asciiToHex,
		fromAscii: asciiToHex,
		unitMap: ethjsUnit.unitMap,
		toWei: toWei,
		fromWei: fromWei,
		padLeft: utils.leftPad,
		leftPad: utils.leftPad,
		padRight: utils.rightPad,
		rightPad: utils.rightPad,
		toTwosComplement: utils.toTwosComplement,
		isBloom: utils.isBloom,
		isUserEthereumAddressInBloom: utils.isUserEthereumAddressInBloom,
		isContractAddressInBloom: utils.isContractAddressInBloom,
		isTopic: utils.isTopic,
		isTopicInBloom: utils.isTopicInBloom,
		isInBloom: utils.isInBloom,
		compareBlockNumbers: compareBlockNumbers,
		toNumber: utils.toNumber
	};
	
	},{"./soliditySha3.js":115,"./utils.js":116,"bn.js":117,"ethjs-unit":43,"randombytes":73}],115:[function(require,module,exports){
	/*
	 This file is part of web3.js.
	
	 web3.js is free software: you can redistribute it and/or modify
	 it under the terms of the GNU Lesser General Public License as published by
	 the Free Software Foundation, either version 3 of the License, or
	 (at your option) any later version.
	
	 web3.js is distributed in the hope that it will be useful,
	 but WITHOUT ANY WARRANTY; without even the implied warranty of
	 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 GNU Lesser General Public License for more details.
	
	 You should have received a copy of the GNU Lesser General Public License
	 along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	 */
	/**
	 * @file soliditySha3.js
	 * @author Fabian Vogelsteller <fabian@ethereum.org>
	 * @date 2017
	 */
	var BN = require('bn.js');
	var utils = require('./utils.js');
	var _elementaryName = function (name) {
		/*jshint maxcomplexity:false */
		if (name.startsWith('int[')) {
			return 'int256' + name.slice(3);
		}
		else if (name === 'int') {
			return 'int256';
		}
		else if (name.startsWith('uint[')) {
			return 'uint256' + name.slice(4);
		}
		else if (name === 'uint') {
			return 'uint256';
		}
		else if (name.startsWith('fixed[')) {
			return 'fixed128x128' + name.slice(5);
		}
		else if (name === 'fixed') {
			return 'fixed128x128';
		}
		else if (name.startsWith('ufixed[')) {
			return 'ufixed128x128' + name.slice(6);
		}
		else if (name === 'ufixed') {
			return 'ufixed128x128';
		}
		return name;
	};
	// Parse N from type<N>
	var _parseTypeN = function (type) {
		var typesize = /^\D+(\d+).*$/.exec(type);
		return typesize ? parseInt(typesize[1], 10) : null;
	};
	// Parse N from type[<N>]
	var _parseTypeNArray = function (type) {
		var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
		return arraySize ? parseInt(arraySize[1], 10) : null;
	};
	var _parseNumber = function (arg) {
		var type = typeof arg;
		if (type === 'string') {
			if (utils.isHexStrict(arg)) {
				return new BN(arg.replace(/0x/i, ''), 16);
			}
			else {
				return new BN(arg, 10);
			}
		}
		else if (type === 'number') {
			return new BN(arg);
		}
		else if (utils.isBigNumber(arg)) {
			return new BN(arg.toString(10));
		}
		else if (utils.isBN(arg)) {
			return arg;
		}
		else {
			throw new Error(arg + ' is not a number');
		}
	};
	var _solidityPack = function (type, value, arraySize) {
		/*jshint maxcomplexity:false */
		var size, num;
		type = _elementaryName(type);
		if (type === 'bytes') {
			if (value.replace(/^0x/i, '').length % 2 !== 0) {
				throw new Error('Invalid bytes characters ' + value.length);
			}
			return value;
		}
		else if (type === 'string') {
			return utils.utf8ToHex(value);
		}
		else if (type === 'bool') {
			return value ? '01' : '00';
		}
		else if (type.startsWith('address')) {
			if (arraySize) {
				size = 64;
			}
			else {
				size = 40;
			}
			if (!utils.isAddress(value)) {
				throw new Error(value + ' is not a valid address, or the checksum is invalid.');
			}
			return utils.leftPad(value.toLowerCase(), size);
		}
		size = _parseTypeN(type);
		if (type.startsWith('bytes')) {
			if (!size) {
				throw new Error('bytes[] not yet supported in solidity');
			}
			// must be 32 byte slices when in an array
			if (arraySize) {
				size = 32;
			}
			if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {
				throw new Error('Invalid bytes' + size + ' for ' + value);
			}
			return utils.rightPad(value, size * 2);
		}
		else if (type.startsWith('uint')) {
			if ((size % 8) || (size < 8) || (size > 256)) {
				throw new Error('Invalid uint' + size + ' size');
			}
			num = _parseNumber(value);
			if (num.bitLength() > size) {
				throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
			}
			if (num.lt(new BN(0))) {
				throw new Error('Supplied uint ' + num.toString() + ' is negative');
			}
			return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;
		}
		else if (type.startsWith('int')) {
			if ((size % 8) || (size < 8) || (size > 256)) {
				throw new Error('Invalid int' + size + ' size');
			}
			num = _parseNumber(value);
			if (num.bitLength() > size) {
				throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
			}
			if (num.lt(new BN(0))) {
				return num.toTwos(size).toString('hex');
			}
			else {
				return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;
			}
		}
		else {
			// FIXME: support all other types
			throw new Error('Unsupported or invalid type: ' + type);
		}
	};
	var _processSolidityEncodePackedArgs = function (arg) {
		/*jshint maxcomplexity:false */
		if (Array.isArray(arg)) {
			throw new Error('Autodetection of array types is not supported.');
		}
		var type, value = '';
		var hexArg, arraySize;
		// if type is given
		if (!!arg && typeof arg === 'object' && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {
			type = arg.hasOwnProperty('t') ? arg.t : arg.type;
			value = arg.hasOwnProperty('v') ? arg.v : arg.value;
			// otherwise try to guess the type
		}
		else {
			type = utils.toHex(arg, true);
			value = utils.toHex(arg);
			if (!type.startsWith('int') && !type.startsWith('uint')) {
				type = 'bytes';
			}
		}
		if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {
			value = new BN(value);
		}
		// get the array size
		if (Array.isArray(value)) {
			arraySize = _parseTypeNArray(type);
			if (arraySize && value.length !== arraySize) {
				throw new Error(type + ' is not matching the given array ' + JSON.stringify(value));
			}
			else {
				arraySize = value.length;
			}
		}
		if (Array.isArray(value)) {
			hexArg = value.map(function (val) {
				return _solidityPack(type, val, arraySize).toString('hex').replace('0x', '');
			});
			return hexArg.join('');
		}
		else {
			hexArg = _solidityPack(type, value, arraySize);
			return hexArg.toString('hex').replace('0x', '');
		}
	};
	/**
	 * Hashes solidity values to a sha3 hash using keccak 256
	 *
	 * @method soliditySha3
	 * @return {Object} the sha3
	 */
	var soliditySha3 = function () {
		/*jshint maxcomplexity:false */
		var args = Array.prototype.slice.call(arguments);
		var hexArgs = args.map(_processSolidityEncodePackedArgs);
		// console.log(args, hexArgs);
		// console.log('0x'+ hexArgs.join(''));
		return utils.sha3('0x' + hexArgs.join(''));
	};
	/**
	 * Hashes solidity values to a sha3 hash using keccak 256 but does return the hash of value `null` instead of `null`
	 *
	 * @method soliditySha3Raw
	 * @return {Object} the sha3
	 */
	var soliditySha3Raw = function () {
		return utils.sha3Raw('0x' + Array.prototype.slice.call(arguments).map(_processSolidityEncodePackedArgs).join(''));
	};
	/**
	 * Encode packed args to hex
	 *
	 * @method encodePacked
	 * @return {String} the hex encoded arguments
	 */
	var encodePacked = function () {
		/*jshint maxcomplexity:false */
		var args = Array.prototype.slice.call(arguments);
		var hexArgs = args.map(_processSolidityEncodePackedArgs);
		return '0x' + hexArgs.join('').toLowerCase();
	};
	module.exports = {
		soliditySha3: soliditySha3,
		soliditySha3Raw: soliditySha3Raw,
		encodePacked: encodePacked
	};
	
	},{"./utils.js":116,"bn.js":117}],116:[function(require,module,exports){
	(function (Buffer){(function (){
	/*
	 This file is part of web3.js.
	
	 web3.js is free software: you can redistribute it and/or modify
	 it under the terms of the GNU Lesser General Public License as published by
	 the Free Software Foundation, either version 3 of the License, or
	 (at your option) any later version.
	
	 web3.js is distributed in the hope that it will be useful,
	 but WITHOUT ANY WARRANTY; without even the implied warranty of
	 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 GNU Lesser General Public License for more details.
	
	 You should have received a copy of the GNU Lesser General Public License
	 along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
	 */
	/**
	 * @file utils.js
	 * @author Fabian Vogelsteller <fabian@ethereum.org>
	 * @date 2017
	 */
	var BN = require('bn.js');
	var numberToBN = require('number-to-bn');
	var utf8 = require('utf8');
	var ethereumjsUtil = require('ethereumjs-util');
	var ethereumBloomFilters = require('ethereum-bloom-filters');
	/**
	 * Returns true if object is BN, otherwise false
	 *
	 * @method isBN
	 * @param {Object} object
	 * @return {Boolean}
	 */
	var isBN = function (object) {
		return BN.isBN(object);
	};
	/**
	 * Returns true if object is BigNumber, otherwise false
	 *
	 * @method isBigNumber
	 * @param {Object} object
	 * @return {Boolean}
	 */
	var isBigNumber = function (object) {
		return object && object.constructor && object.constructor.name === 'BigNumber';
	};
	/**
	 * Takes an input and transforms it into an BN
	 *
	 * @method toBN
	 * @param {Number|String|BN} number, string, HEX string or BN
	 * @return {BN} BN
	 */
	var toBN = function (number) {
		try {
			return numberToBN.apply(null, arguments);
		}
		catch (e) {
			throw new Error(e + ' Given value: "' + number + '"');
		}
	};
	/**
	 * Takes and input transforms it into BN and if it is negative value, into two's complement
	 *
	 * @method toTwosComplement
	 * @param {Number|String|BN} number
	 * @return {String}
	 */
	var toTwosComplement = function (number) {
		return '0x' + toBN(number).toTwos(256).toString(16, 64);
	};
	/**
	 * Checks if the given string is an address
	 *
	 * @method isAddress
	 * @param {String} address the given HEX address
	 * @return {Boolean}
	 */
	var isAddress = function (address) {
		// check if it has the basic requirements of an address
		if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
			return false;
			// If it's ALL lowercase or ALL upppercase
		}
		else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
			return true;
			// Otherwise check each case
		}
		else {
			return checkAddressChecksum(address);
		}
	};
	/**
	 * Checks if the given string is a checksummed address
	 *
	 * @method checkAddressChecksum
	 * @param {String} address the given HEX address
	 * @return {Boolean}
	 */
	var checkAddressChecksum = function (address) {
		// Check each case
		address = address.replace(/^0x/i, '');
		var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, '');
		for (var i = 0; i < 40; i++) {
			// the nth letter should be uppercase if the nth digit of casemap is 1
			if ((parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i]) || (parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i])) {
				return false;
			}
		}
		return true;
	};
	/**
	 * Should be called to pad string to expected length
	 *
	 * @method leftPad
	 * @param {String} string to be padded
	 * @param {Number} chars that result string should have
	 * @param {String} sign, by default 0
	 * @returns {String} right aligned string
	 */
	var leftPad = function (string, chars, sign) {
		var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
		string = string.toString(16).replace(/^0x/i, '');
		var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;
		return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : "0") + string;
	};
	/**
	 * Should be called to pad string to expected length
	 *
	 * @method rightPad
	 * @param {String} string to be padded
	 * @param {Number} chars that result string should have
	 * @param {String} sign, by default 0
	 * @returns {String} right aligned string
	 */
	var rightPad = function (string, chars, sign) {
		var hasPrefix = /^0x/i.test(string) || typeof string === 'number';
		string = string.toString(16).replace(/^0x/i, '');
		var padding = (chars - string.length + 1 >= 0) ? chars - string.length + 1 : 0;
		return (hasPrefix ? '0x' : '') + string + (new Array(padding).join(sign ? sign : "0"));
	};
	/**
	 * Should be called to get hex representation (prefixed by 0x) of utf8 string
	 *
	 * @method utf8ToHex
	 * @param {String} str
	 * @returns {String} hex representation of input string
	 */
	var utf8ToHex = function (str) {
		str = utf8.encode(str);
		var hex = "";
		// remove \u0000 padding from either side
		str = str.replace(/^(?:\u0000)*/, '');
		str = str.split("").reverse().join("");
		str = str.replace(/^(?:\u0000)*/, '');
		str = str.split("").reverse().join("");
		for (var i = 0; i < str.length; i++) {
			var code = str.charCodeAt(i);
			// if (code !== 0) {
			var n = code.toString(16);
			hex += n.length < 2 ? '0' + n : n;
			// }
		}
		return "0x" + hex;
	};
	/**
	 * Should be called to get utf8 from it's hex representation
	 *
	 * @method hexToUtf8
	 * @param {String} hex
	 * @returns {String} ascii string representation of hex value
	 */
	var hexToUtf8 = function (hex) {
		if (!isHexStrict(hex))
			throw new Error('The parameter "' + hex + '" must be a valid HEX string.');
		var str = "";
		var code = 0;
		hex = hex.replace(/^0x/i, '');
		// remove 00 padding from either side
		hex = hex.replace(/^(?:00)*/, '');
		hex = hex.split("").reverse().join("");
		hex = hex.replace(/^(?:00)*/, '');
		hex = hex.split("").reverse().join("");
		var l = hex.length;
		for (var i = 0; i < l; i += 2) {
			code = parseInt(hex.slice(i, i + 2), 16);
			// if (code !== 0) {
			str += String.fromCharCode(code);
			// }
		}
		return utf8.decode(str);
	};
	/**
	 * Converts value to it's number representation
	 *
	 * @method hexToNumber
	 * @param {String|Number|BN} value
	 * @return {String}
	 */
	var hexToNumber = function (value) {
		if (!value) {
			return value;
		}
		if (typeof value === 'string' && !isHexStrict(value)) {
			throw new Error('Given value "' + value + '" is not a valid hex string.');
		}
		return toBN(value).toNumber();
	};
	/**
	 * Converts value to it's decimal representation in string
	 *
	 * @method hexToNumberString
	 * @param {String|Number|BN} value
	 * @return {String}
	 */
	var hexToNumberString = function (value) {
		if (!value)
			return value;
		if (typeof value === 'string' && !isHexStrict(value)) {
			throw new Error('Given value "' + value + '" is not a valid hex string.');
		}
		return toBN(value).toString(10);
	};
	/**
	 * Converts value to it's hex representation
	 *
	 * @method numberToHex
	 * @param {String|Number|BN} value
	 * @return {String}
	 */
	var numberToHex = function (value) {
		if ((value === null || value === undefined)) {
			return value;
		}
		if (!isFinite(value) && !isHexStrict(value)) {
			throw new Error('Given input "' + value + '" is not a number.');
		}
		var number = toBN(value);
		var result = number.toString(16);
		return number.lt(new BN(0)) ? '-0x' + result.slice(1) : '0x' + result;
	};
	/**
	 * Convert a byte array to a hex string
	 *
	 * Note: Implementation from crypto-js
	 *
	 * @method bytesToHex
	 * @param {Array} bytes
	 * @return {String} the hex string
	 */
	var bytesToHex = function (bytes) {
		for (var hex = [], i = 0; i < bytes.length; i++) {
			/* jshint ignore:start */
			hex.push((bytes[i] >>> 4).toString(16));
			hex.push((bytes[i] & 0xF).toString(16));
			/* jshint ignore:end */
		}
		return '0x' + hex.join("");
	};
	/**
	 * Convert a hex string to a byte array
	 *
	 * Note: Implementation from crypto-js
	 *
	 * @method hexToBytes
	 * @param {string} hex
	 * @return {Array} the byte array
	 */
	var hexToBytes = function (hex) {
		hex = hex.toString(16);
		if (!isHexStrict(hex)) {
			throw new Error('Given value "' + hex + '" is not a valid hex string.');
		}
		hex = hex.replace(/^0x/i, '');
		for (var bytes = [], c = 0; c < hex.length; c += 2)
			bytes.push(parseInt(hex.slice(c, c + 2), 16));
		return bytes;
	};
	/**
	 * Auto converts any given value into it's hex representation.
	 *
	 * And even stringifys objects before.
	 *
	 * @method toHex
	 * @param {String|Number|BN|Object|Buffer} value
	 * @param {Boolean} returnType
	 * @return {String}
	 */
	var toHex = function (value, returnType) {
		/*jshint maxcomplexity: false */
		if (isAddress(value)) {
			return returnType ? 'address' : '0x' + value.toLowerCase().replace(/^0x/i, '');
		}
		if (typeof value === 'boolean') {
			return returnType ? 'bool' : value ? '0x01' : '0x00';
		}
		if (Buffer.isBuffer(value)) {
			return '0x' + value.toString('hex');
		}
		if (typeof value === 'object' && !!value && !isBigNumber(value) && !isBN(value)) {
			return returnType ? 'string' : utf8ToHex(JSON.stringify(value));
		}
		// if its a negative number, pass it through numberToHex
		if (typeof value === 'string') {
			if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {
				return returnType ? 'int256' : numberToHex(value);
			}
			else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {
				return returnType ? 'bytes' : value;
			}
			else if (!isFinite(value)) {
				return returnType ? 'string' : utf8ToHex(value);
			}
		}
		return returnType ? (value < 0 ? 'int256' : 'uint256') : numberToHex(value);
	};
	/**
	 * Check if string is HEX, requires a 0x in front
	 *
	 * @method isHexStrict
	 * @param {String} hex to be checked
	 * @returns {Boolean}
	 */
	var isHexStrict = function (hex) {
		return ((typeof hex === 'string' || typeof hex === 'number') && /^(-)?0x[0-9a-f]*$/i.test(hex));
	};
	/**
	 * Check if string is HEX
	 *
	 * @method isHex
	 * @param {String} hex to be checked
	 * @returns {Boolean}
	 */
	var isHex = function (hex) {
		return ((typeof hex === 'string' || typeof hex === 'number') && /^(-0x|0x)?[0-9a-f]*$/i.test(hex));
	};
	/**
	 * Remove 0x prefix from string
	 *
	 * @method stripHexPrefix
	 * @param {String} str to be checked
	 * @returns {String}
	 */
	var stripHexPrefix = function (str) {
		if (str !== 0 && isHex(str))
			return str.replace(/^(-)?0x/i, '$1');
		return str;
	};
	/**
	 * Returns true if given string is a valid Ethereum block header bloom.
	 *
	 * @method isBloom
	 * @param {String} bloom encoded bloom filter
	 * @return {Boolean}
	 */
	var isBloom = function (bloom) {
		return ethereumBloomFilters.isBloom(bloom);
	};
	/**
	 * Returns true if the ethereum users address is part of the given bloom
	 * note: false positives are possible.
	 *
	 * @method isUserEthereumAddressInBloom
	 * @param {String} ethereumAddress encoded bloom filter
	 * @param {String} bloom ethereum addresss
	 * @return {Boolean}
	 */
	var isUserEthereumAddressInBloom = function (bloom, ethereumAddress) {
		return ethereumBloomFilters.isUserEthereumAddressInBloom(bloom, ethereumAddress);
	};
	/**
	 * Returns true if the contract address is part of the given bloom
	 * note: false positives are possible.
	 *
	 * @method isUserEthereumAddressInBloom
	 * @param {String} bloom encoded bloom filter
	 * @param {String} contractAddress contract addresss
	 * @return {Boolean}
	 */
	var isContractAddressInBloom = function (bloom, contractAddress) {
		return ethereumBloomFilters.isContractAddressInBloom(bloom, contractAddress);
	};
	/**
	 * Returns true if given string is a valid log topic.
	 *
	 * @method isTopic
	 * @param {String} topic encoded topic
	 * @return {Boolean}
	 */
	var isTopic = function (topic) {
		return ethereumBloomFilters.isTopic(topic);
	};
	/**
	 * Returns true if the topic is part of the given bloom
	 * note: false positives are possible.
	 *
	 * @method isTopicInBloom
	 * @param {String} bloom encoded bloom filter
	 * @param {String} topic encoded topic
	 * @return {Boolean}
	 */
	var isTopicInBloom = function (bloom, topic) {
		return ethereumBloomFilters.isTopicInBloom(bloom, topic);
	};
	/**
	 * Returns true if the value is part of the given bloom
	 * note: false positives are possible.
	 *
	 * @method isInBloom
	 * @param {String} bloom encoded bloom filter
	 * @param {String | Uint8Array} topic encoded value
	 * @return {Boolean}
	 */
	var isInBloom = function (bloom, topic) {
		return ethereumBloomFilters.isInBloom(bloom, topic);
	};
	/**
	 * Hashes values to a sha3 hash using keccak 256
	 *
	 * To hash a HEX string the hex must have 0x in front.
	 *
	 * @method sha3
	 * @return {String} the sha3 string
	 */
	var SHA3_NULL_S = '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
	var sha3 = function (value) {
		if (isBN(value)) {
			value = value.toString();
		}
		if (isHexStrict(value) && /^0x/i.test((value).toString())) {
			value = ethereumjsUtil.toBuffer(value);
		}
		else if (typeof value === 'string') {
			// Assume value is an arbitrary string
			value = Buffer.from(value, 'utf-8');
		}
		var returnValue = ethereumjsUtil.bufferToHex(ethereumjsUtil.keccak256(value));
		if (returnValue === SHA3_NULL_S) {
			return null;
		}
		else {
			return returnValue;
		}
	};
	// expose the under the hood keccak256
	sha3._Hash = ethereumjsUtil.keccak256;
	/**
	 * @method sha3Raw
	 *
	 * @param value
	 *
	 * @returns {string}
	 */
	var sha3Raw = function (value) {
		value = sha3(value);
		if (value === null) {
			return SHA3_NULL_S;
		}
		return value;
	};
	/**
	 * Auto converts any given value into it's hex representation,
	 * then converts hex to number.
	 *
	 * @method toNumber
	 * @param {String|Number|BN} value
	 * @return {Number}
	 */
	var toNumber = function (value) {
		return typeof value === 'number' ? value : hexToNumber(toHex(value));
	};
	// 1.x currently accepts 0x... strings, bn.js after update doesn't. it would be a breaking change
	var BNwrapped = function (value) {
		// check negative
		if (typeof value == "string" && value.includes("0x")) {
			const [negative, hexValue] = value.toLocaleLowerCase().startsWith('-') ? ["-", value.slice(3)] : ["", value.slice(2)];
			return new BN(negative + hexValue, 16);
		}
		else {
			return new BN(value);
		}
	};
	Object.setPrototypeOf(BNwrapped, BN);
	Object.setPrototypeOf(BNwrapped.prototype, BN.prototype);
	module.exports = {
		BN: BNwrapped,
		isBN: isBN,
		isBigNumber: isBigNumber,
		toBN: toBN,
		isAddress: isAddress,
		isBloom: isBloom,
		isUserEthereumAddressInBloom: isUserEthereumAddressInBloom,
		isContractAddressInBloom: isContractAddressInBloom,
		isTopic: isTopic,
		isTopicInBloom: isTopicInBloom,
		isInBloom: isInBloom,
		checkAddressChecksum: checkAddressChecksum,
		utf8ToHex: utf8ToHex,
		hexToUtf8: hexToUtf8,
		hexToNumber: hexToNumber,
		hexToNumberString: hexToNumberString,
		numberToHex: numberToHex,
		toHex: toHex,
		hexToBytes: hexToBytes,
		bytesToHex: bytesToHex,
		isHex: isHex,
		isHexStrict: isHexStrict,
		stripHexPrefix: stripHexPrefix,
		leftPad: leftPad,
		rightPad: rightPad,
		toTwosComplement: toTwosComplement,
		sha3: sha3,
		sha3Raw: sha3Raw,
		toNumber: toNumber
	};
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"bn.js":117,"buffer":125,"ethereum-bloom-filters":24,"ethereumjs-util":37,"number-to-bn":72,"utf8":106}],117:[function(require,module,exports){
	arguments[4][42][0].apply(exports,arguments)
	},{"buffer":124,"dup":42}],118:[function(require,module,exports){
	CoNETModule.Web3HttpProvider = require('web3-providers-http')
	},{"web3-providers-http":113}],119:[function(require,module,exports){
	(function (global){(function (){
	'use strict';
	
	var objectAssign = require('object-assign');
	
	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:
	
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
		return 0;
	  }
	
	  var x = a.length;
	  var y = b.length;
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
		if (a[i] !== b[i]) {
		  x = a[i];
		  y = b[i];
		  break;
		}
	  }
	
	  if (x < y) {
		return -1;
	  }
	  if (y < x) {
		return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
		return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}
	
	// based on node assert, original notice:
	// NB: The URL to the CommonJS spec is kept just for tradition.
	//     node-assert has evolved a lot since then, both in API and behavior.
	
	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var util = require('util/');
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
		return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
		return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
		return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
		return false;
	  }
	  if (arrbuf instanceof DataView) {
		return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
		return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.
	
	var assert = module.exports = ok;
	
	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })
	
	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
		return;
	  }
	  if (functionsHaveNames) {
		return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
		this.message = options.message;
		this.generatedMessage = false;
	  } else {
		this.message = getMessage(this);
		this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
		Error.captureStackTrace(this, stackStartFunction);
	  } else {
		// non v8 browsers so we can have a stacktrace
		var err = new Error();
		if (err.stack) {
		  var out = err.stack;
	
		  // try to strip useless frames
		  var fn_name = getName(stackStartFunction);
		  var idx = out.indexOf('\n' + fn_name);
		  if (idx >= 0) {
			// once we have located the function frame
			// we need to strip out everything before it (and its line)
			var next_line = out.indexOf('\n', idx + 1);
			out = out.substring(next_line + 1);
		  }
	
		  this.stack = out;
		}
	  }
	};
	
	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);
	
	function truncate(s, n) {
	  if (typeof s === 'string') {
		return s.length < n ? s : s.slice(0, n);
	  } else {
		return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
		return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
			 self.operator + ' ' +
			 truncate(inspect(self.expected), 128);
	}
	
	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.
	
	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.
	
	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
		message: message,
		actual: actual,
		expected: expected,
		operator: operator,
		stackStartFunction: stackStartFunction
	  });
	}
	
	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;
	
	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.
	
	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;
	
	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	
	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};
	
	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	
	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
		fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};
	
	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	
	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
		fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};
	
	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
		fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};
	
	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
		return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
		return compare(actual, expected) === 0;
	
	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
		return actual.getTime() === expected.getTime();
	
	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
		return actual.source === expected.source &&
			   actual.global === expected.global &&
			   actual.multiline === expected.multiline &&
			   actual.lastIndex === expected.lastIndex &&
			   actual.ignoreCase === expected.ignoreCase;
	
	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
				 (expected === null || typeof expected !== 'object')) {
		return strict ? actual === expected : actual == expected;
	
	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
				 pToString(actual) === pToString(expected) &&
				 !(actual instanceof Float32Array ||
				   actual instanceof Float64Array)) {
		return compare(new Uint8Array(actual.buffer),
					   new Uint8Array(expected.buffer)) === 0;
	
	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
		return false;
	  } else {
		memos = memos || {actual: [], expected: []};
	
		var actualIndex = memos.actual.indexOf(actual);
		if (actualIndex !== -1) {
		  if (actualIndex === memos.expected.indexOf(expected)) {
			return true;
		  }
		}
	
		memos.actual.push(actual);
		memos.expected.push(expected);
	
		return objEquiv(actual, expected, strict, memos);
	  }
	}
	
	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}
	
	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
		return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
		return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
		return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
		return false;
	  if (aIsArgs) {
		a = pSlice.call(a);
		b = pSlice.call(b);
		return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
		return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
		if (ka[i] !== kb[i])
		  return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
		key = ka[i];
		if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
		  return false;
	  }
	  return true;
	}
	
	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	
	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
		fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};
	
	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
		fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}
	
	
	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	
	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
		fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};
	
	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	
	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
		fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};
	
	function expectedException(actual, expected) {
	  if (!actual || !expected) {
		return false;
	  }
	
	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
		return expected.test(actual);
	  }
	
	  try {
		if (actual instanceof expected) {
		  return true;
		}
	  } catch (e) {
		// Ignore.  The instanceof check doesn't work for arrow functions.
	  }
	
	  if (Error.isPrototypeOf(expected)) {
		return false;
	  }
	
	  return expected.call({}, actual) === true;
	}
	
	function _tryBlock(block) {
	  var error;
	  try {
		block();
	  } catch (e) {
		error = e;
	  }
	  return error;
	}
	
	function _throws(shouldThrow, block, expected, message) {
	  var actual;
	
	  if (typeof block !== 'function') {
		throw new TypeError('"block" argument must be a function');
	  }
	
	  if (typeof expected === 'string') {
		message = expected;
		expected = null;
	  }
	
	  actual = _tryBlock(block);
	
	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
				(message ? ' ' + message : '.');
	
	  if (shouldThrow && !actual) {
		fail(actual, expected, 'Missing expected exception' + message);
	  }
	
	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;
	
	  if ((isUnwantedException &&
		  userProvidedMessage &&
		  expectedException(actual, expected)) ||
		  isUnexpectedException) {
		fail(actual, expected, 'Got unwanted exception' + message);
	  }
	
	  if ((shouldThrow && actual && expected &&
		  !expectedException(actual, expected)) || (!shouldThrow && actual)) {
		throw actual;
	  }
	}
	
	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	
	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};
	
	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};
	
	assert.ifError = function(err) { if (err) throw err; };
	
	// Expose a strict only variant of assert
	function strict(value, message) {
	  if (!value) fail(value, true, message, '==', strict);
	}
	assert.strict = objectAssign(strict, assert, {
	  equal: assert.strictEqual,
	  deepEqual: assert.deepStrictEqual,
	  notEqual: assert.notStrictEqual,
	  notDeepEqual: assert.notDeepStrictEqual
	});
	assert.strict.strict = assert.strict;
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
		if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};
	
	}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"object-assign":132,"util/":122}],120:[function(require,module,exports){
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
		ctor.super_ = superCtor
		ctor.prototype = Object.create(superCtor.prototype, {
		  constructor: {
			value: ctor,
			enumerable: false,
			writable: true,
			configurable: true
		  }
		});
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
		ctor.super_ = superCtor
		var TempCtor = function () {}
		TempCtor.prototype = superCtor.prototype
		ctor.prototype = new TempCtor()
		ctor.prototype.constructor = ctor
	  }
	}
	
	},{}],121:[function(require,module,exports){
	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
		&& typeof arg.copy === 'function'
		&& typeof arg.fill === 'function'
		&& typeof arg.readUInt8 === 'function';
	}
	},{}],122:[function(require,module,exports){
	(function (process,global){(function (){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
		var objects = [];
		for (var i = 0; i < arguments.length; i++) {
		  objects.push(inspect(arguments[i]));
		}
		return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
		if (x === '%%') return '%';
		if (i >= len) return x;
		switch (x) {
		  case '%s': return String(args[i++]);
		  case '%d': return Number(args[i++]);
		  case '%j':
			try {
			  return JSON.stringify(args[i++]);
			} catch (_) {
			  return '[Circular]';
			}
		  default:
			return x;
		}
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
		if (isNull(x) || !isObject(x)) {
		  str += ' ' + x;
		} else {
		  str += ' ' + inspect(x);
		}
	  }
	  return str;
	};
	
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
		return function() {
		  return exports.deprecate(fn, msg).apply(this, arguments);
		};
	  }
	
	  if (process.noDeprecation === true) {
		return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
		if (!warned) {
		  if (process.throwDeprecation) {
			throw new Error(msg);
		  } else if (process.traceDeprecation) {
			console.trace(msg);
		  } else {
			console.error(msg);
		  }
		  warned = true;
		}
		return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
		debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
		if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
		  var pid = process.pid;
		  debugs[set] = function() {
			var msg = exports.format.apply(exports, arguments);
			console.error('%s %d: %s', set, pid, msg);
		  };
		} else {
		  debugs[set] = function() {};
		}
	  }
	  return debugs[set];
	};
	
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
		seen: [],
		stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
		// legacy...
		ctx.showHidden = opts;
	  } else if (opts) {
		// got an "options" object
		exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
		return '\u001b[' + inspect.colors[style][0] + 'm' + str +
			   '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
		return str;
	  }
	}
	
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function(val, idx) {
		hash[val] = true;
	  });
	
	  return hash;
	}
	
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
		  value &&
		  isFunction(value.inspect) &&
		  // Filter out the util module, it's inspect function is special
		  value.inspect !== exports.inspect &&
		  // Also filter out any prototype objects using the circular check.
		  !(value.constructor && value.constructor.prototype === value)) {
		var ret = value.inspect(recurseTimes, ctx);
		if (!isString(ret)) {
		  ret = formatValue(ctx, ret, recurseTimes);
		}
		return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
		return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
		keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
		  && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
		return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
		if (isFunction(value)) {
		  var name = value.name ? ': ' + value.name : '';
		  return ctx.stylize('[Function' + name + ']', 'special');
		}
		if (isRegExp(value)) {
		  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
		}
		if (isDate(value)) {
		  return ctx.stylize(Date.prototype.toString.call(value), 'date');
		}
		if (isError(value)) {
		  return formatError(value);
		}
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
		array = true;
		braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
		var n = value.name ? ': ' + value.name : '';
		base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
		base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
		base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
		base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
		return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
		if (isRegExp(value)) {
		  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
		} else {
		  return ctx.stylize('[Object]', 'special');
		}
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
		output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
		output = keys.map(function(key) {
		  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
		});
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
		return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
		var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
												 .replace(/'/g, "\\'")
												 .replace(/\\"/g, '"') + '\'';
		return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
		return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
		return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
		return ctx.stylize('null', 'null');
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
		if (hasOwnProperty(value, String(i))) {
		  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
			  String(i), true));
		} else {
		  output.push('');
		}
	  }
	  keys.forEach(function(key) {
		if (!key.match(/^\d+$/)) {
		  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
			  key, true));
		}
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
		if (desc.set) {
		  str = ctx.stylize('[Getter/Setter]', 'special');
		} else {
		  str = ctx.stylize('[Getter]', 'special');
		}
	  } else {
		if (desc.set) {
		  str = ctx.stylize('[Setter]', 'special');
		}
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
		name = '[' + key + ']';
	  }
	  if (!str) {
		if (ctx.seen.indexOf(desc.value) < 0) {
		  if (isNull(recurseTimes)) {
			str = formatValue(ctx, desc.value, null);
		  } else {
			str = formatValue(ctx, desc.value, recurseTimes - 1);
		  }
		  if (str.indexOf('\n') > -1) {
			if (array) {
			  str = str.split('\n').map(function(line) {
				return '  ' + line;
			  }).join('\n').substr(2);
			} else {
			  str = '\n' + str.split('\n').map(function(line) {
				return '   ' + line;
			  }).join('\n');
			}
		  }
		} else {
		  str = ctx.stylize('[Circular]', 'special');
		}
	  }
	  if (isUndefined(name)) {
		if (array && key.match(/^\d+$/)) {
		  return str;
		}
		name = JSON.stringify('' + key);
		if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
		  name = name.substr(1, name.length - 2);
		  name = ctx.stylize(name, 'name');
		} else {
		  name = name.replace(/'/g, "\\'")
					 .replace(/\\"/g, '"')
					 .replace(/(^"|"$)/g, "'");
		  name = ctx.stylize(name, 'string');
		}
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
		numLinesEst++;
		if (cur.indexOf('\n') >= 0) numLinesEst++;
		return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
		return braces[0] +
			   (base === '' ? '' : base + '\n ') +
			   ' ' +
			   output.join(',\n  ') +
			   ' ' +
			   braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) &&
		  (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
			 typeof arg === 'boolean' ||
			 typeof arg === 'number' ||
			 typeof arg === 'string' ||
			 typeof arg === 'symbol' ||  // ES6 symbol
			 typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = require('./support/isBuffer');
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
				  'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
				  pad(d.getMinutes()),
				  pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = require('inherits');
	
	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
		origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./support/isBuffer":121,"_process":133,"inherits":120}],123:[function(require,module,exports){
	'use strict'
	
	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray
	
	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}
	
	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63
	
	function getLens (b64) {
	  var len = b64.length
	
	  if (len % 4 > 0) {
		throw new Error('Invalid string. Length must be a multiple of 4')
	  }
	
	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=')
	  if (validLen === -1) validLen = len
	
	  var placeHoldersLen = validLen === len
		? 0
		: 4 - (validLen % 4)
	
	  return [validLen, placeHoldersLen]
	}
	
	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}
	
	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}
	
	function toByteArray (b64) {
	  var tmp
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	
	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))
	
	  var curByte = 0
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
		? validLen - 4
		: validLen
	
	  var i
	  for (i = 0; i < len; i += 4) {
		tmp =
		  (revLookup[b64.charCodeAt(i)] << 18) |
		  (revLookup[b64.charCodeAt(i + 1)] << 12) |
		  (revLookup[b64.charCodeAt(i + 2)] << 6) |
		  revLookup[b64.charCodeAt(i + 3)]
		arr[curByte++] = (tmp >> 16) & 0xFF
		arr[curByte++] = (tmp >> 8) & 0xFF
		arr[curByte++] = tmp & 0xFF
	  }
	
	  if (placeHoldersLen === 2) {
		tmp =
		  (revLookup[b64.charCodeAt(i)] << 2) |
		  (revLookup[b64.charCodeAt(i + 1)] >> 4)
		arr[curByte++] = tmp & 0xFF
	  }
	
	  if (placeHoldersLen === 1) {
		tmp =
		  (revLookup[b64.charCodeAt(i)] << 10) |
		  (revLookup[b64.charCodeAt(i + 1)] << 4) |
		  (revLookup[b64.charCodeAt(i + 2)] >> 2)
		arr[curByte++] = (tmp >> 8) & 0xFF
		arr[curByte++] = tmp & 0xFF
	  }
	
	  return arr
	}
	
	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
		lookup[num >> 12 & 0x3F] +
		lookup[num >> 6 & 0x3F] +
		lookup[num & 0x3F]
	}
	
	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
		tmp =
		  ((uint8[i] << 16) & 0xFF0000) +
		  ((uint8[i + 1] << 8) & 0xFF00) +
		  (uint8[i + 2] & 0xFF)
		output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}
	
	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
		parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
		tmp = uint8[len - 1]
		parts.push(
		  lookup[tmp >> 2] +
		  lookup[(tmp << 4) & 0x3F] +
		  '=='
		)
	  } else if (extraBytes === 2) {
		tmp = (uint8[len - 2] << 8) + uint8[len - 1]
		parts.push(
		  lookup[tmp >> 10] +
		  lookup[(tmp >> 4) & 0x3F] +
		  lookup[(tmp << 2) & 0x3F] +
		  '='
		)
	  }
	
	  return parts.join('')
	}
	
	},{}],124:[function(require,module,exports){
	
	},{}],125:[function(require,module,exports){
	(function (Buffer){(function (){
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict'
	
	var base64 = require('base64-js')
	var ieee754 = require('ieee754')
	
	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	
	var K_MAX_LENGTH = 0x7fffffff
	exports.kMaxLength = K_MAX_LENGTH
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
	 *               implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * We report that the browser does not support typed arrays if the are not subclassable
	 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
	 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
	 * for __proto__ and has a buggy typed array implementation.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
	
	if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
		typeof console.error === 'function') {
	  console.error(
		'This browser lacks typed array (Uint8Array) support which is required by ' +
		'`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
	  )
	}
	
	function typedArraySupport () {
	  // Can typed array instances can be augmented?
	  try {
		var arr = new Uint8Array(1)
		arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
		return arr.foo() === 42
	  } catch (e) {
		return false
	  }
	}
	
	Object.defineProperty(Buffer.prototype, 'parent', {
	  enumerable: true,
	  get: function () {
		if (!Buffer.isBuffer(this)) return undefined
		return this.buffer
	  }
	})
	
	Object.defineProperty(Buffer.prototype, 'offset', {
	  enumerable: true,
	  get: function () {
		if (!Buffer.isBuffer(this)) return undefined
		return this.byteOffset
	  }
	})
	
	function createBuffer (length) {
	  if (length > K_MAX_LENGTH) {
		throw new RangeError('The value "' + length + '" is invalid for option "size"')
	  }
	  // Return an augmented `Uint8Array` instance
	  var buf = new Uint8Array(length)
	  buf.__proto__ = Buffer.prototype
	  return buf
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer (arg, encodingOrOffset, length) {
	  // Common case.
	  if (typeof arg === 'number') {
		if (typeof encodingOrOffset === 'string') {
		  throw new TypeError(
			'The "string" argument must be of type string. Received type number'
		  )
		}
		return allocUnsafe(arg)
	  }
	  return from(arg, encodingOrOffset, length)
	}
	
	// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	if (typeof Symbol !== 'undefined' && Symbol.species != null &&
		Buffer[Symbol.species] === Buffer) {
	  Object.defineProperty(Buffer, Symbol.species, {
		value: null,
		configurable: true,
		enumerable: false,
		writable: false
	  })
	}
	
	Buffer.poolSize = 8192 // not used by this implementation
	
	function from (value, encodingOrOffset, length) {
	  if (typeof value === 'string') {
		return fromString(value, encodingOrOffset)
	  }
	
	  if (ArrayBuffer.isView(value)) {
		return fromArrayLike(value)
	  }
	
	  if (value == null) {
		throw TypeError(
		  'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
		  'or Array-like Object. Received type ' + (typeof value)
		)
	  }
	
	  if (isInstance(value, ArrayBuffer) ||
		  (value && isInstance(value.buffer, ArrayBuffer))) {
		return fromArrayBuffer(value, encodingOrOffset, length)
	  }
	
	  if (typeof value === 'number') {
		throw new TypeError(
		  'The "value" argument must not be of type number. Received type number'
		)
	  }
	
	  var valueOf = value.valueOf && value.valueOf()
	  if (valueOf != null && valueOf !== value) {
		return Buffer.from(valueOf, encodingOrOffset, length)
	  }
	
	  var b = fromObject(value)
	  if (b) return b
	
	  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
		  typeof value[Symbol.toPrimitive] === 'function') {
		return Buffer.from(
		  value[Symbol.toPrimitive]('string'), encodingOrOffset, length
		)
	  }
	
	  throw new TypeError(
		'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
		'or Array-like Object. Received type ' + (typeof value)
	  )
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(value, encodingOrOffset, length)
	}
	
	// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
	// https://github.com/feross/buffer/pull/148
	Buffer.prototype.__proto__ = Uint8Array.prototype
	Buffer.__proto__ = Uint8Array
	
	function assertSize (size) {
	  if (typeof size !== 'number') {
		throw new TypeError('"size" argument must be of type number')
	  } else if (size < 0) {
		throw new RangeError('The value "' + size + '" is invalid for option "size"')
	  }
	}
	
	function alloc (size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
		return createBuffer(size)
	  }
	  if (fill !== undefined) {
		// Only pay attention to encoding if it's a string. This
		// prevents accidentally sending in a number that would
		// be interpretted as a start offset.
		return typeof encoding === 'string'
		  ? createBuffer(size).fill(fill, encoding)
		  : createBuffer(size).fill(fill)
	  }
	  return createBuffer(size)
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(size, fill, encoding)
	}
	
	function allocUnsafe (size) {
	  assertSize(size)
	  return createBuffer(size < 0 ? 0 : checked(size) | 0)
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(size)
	}
	
	function fromString (string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
		encoding = 'utf8'
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
		throw new TypeError('Unknown encoding: ' + encoding)
	  }
	
	  var length = byteLength(string, encoding) | 0
	  var buf = createBuffer(length)
	
	  var actual = buf.write(string, encoding)
	
	  if (actual !== length) {
		// Writing a hex string, for example, that contains invalid characters will
		// cause everything after the first invalid character to be ignored. (e.g.
		// 'abxxcd' will be treated as 'ab')
		buf = buf.slice(0, actual)
	  }
	
	  return buf
	}
	
	function fromArrayLike (array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  var buf = createBuffer(length)
	  for (var i = 0; i < length; i += 1) {
		buf[i] = array[i] & 255
	  }
	  return buf
	}
	
	function fromArrayBuffer (array, byteOffset, length) {
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
		throw new RangeError('"offset" is outside of buffer bounds')
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
		throw new RangeError('"length" is outside of buffer bounds')
	  }
	
	  var buf
	  if (byteOffset === undefined && length === undefined) {
		buf = new Uint8Array(array)
	  } else if (length === undefined) {
		buf = new Uint8Array(array, byteOffset)
	  } else {
		buf = new Uint8Array(array, byteOffset, length)
	  }
	
	  // Return an augmented `Uint8Array` instance
	  buf.__proto__ = Buffer.prototype
	  return buf
	}
	
	function fromObject (obj) {
	  if (Buffer.isBuffer(obj)) {
		var len = checked(obj.length) | 0
		var buf = createBuffer(len)
	
		if (buf.length === 0) {
		  return buf
		}
	
		obj.copy(buf, 0, 0, len)
		return buf
	  }
	
	  if (obj.length !== undefined) {
		if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
		  return createBuffer(0)
		}
		return fromArrayLike(obj)
	  }
	
	  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
		return fromArrayLike(obj.data)
	  }
	}
	
	function checked (length) {
	  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= K_MAX_LENGTH) {
		throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
							 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
	  }
	  return length | 0
	}
	
	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
		length = 0
	  }
	  return Buffer.alloc(+length)
	}
	
	Buffer.isBuffer = function isBuffer (b) {
	  return b != null && b._isBuffer === true &&
		b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
	}
	
	Buffer.compare = function compare (a, b) {
	  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
	  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
		throw new TypeError(
		  'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
		)
	  }
	
	  if (a === b) return 0
	
	  var x = a.length
	  var y = b.length
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
		if (a[i] !== b[i]) {
		  x = a[i]
		  y = b[i]
		  break
		}
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
		case 'hex':
		case 'utf8':
		case 'utf-8':
		case 'ascii':
		case 'latin1':
		case 'binary':
		case 'base64':
		case 'ucs2':
		case 'ucs-2':
		case 'utf16le':
		case 'utf-16le':
		  return true
		default:
		  return false
	  }
	}
	
	Buffer.concat = function concat (list, length) {
	  if (!Array.isArray(list)) {
		throw new TypeError('"list" argument must be an Array of Buffers')
	  }
	
	  if (list.length === 0) {
		return Buffer.alloc(0)
	  }
	
	  var i
	  if (length === undefined) {
		length = 0
		for (i = 0; i < list.length; ++i) {
		  length += list[i].length
		}
	  }
	
	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
		var buf = list[i]
		if (isInstance(buf, Uint8Array)) {
		  buf = Buffer.from(buf)
		}
		if (!Buffer.isBuffer(buf)) {
		  throw new TypeError('"list" argument must be an Array of Buffers')
		}
		buf.copy(buffer, pos)
		pos += buf.length
	  }
	  return buffer
	}
	
	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
		return string.length
	  }
	  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
		return string.byteLength
	  }
	  if (typeof string !== 'string') {
		throw new TypeError(
		  'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
		  'Received type ' + typeof string
		)
	  }
	
	  var len = string.length
	  var mustMatch = (arguments.length > 2 && arguments[2] === true)
	  if (!mustMatch && len === 0) return 0
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
		switch (encoding) {
		  case 'ascii':
		  case 'latin1':
		  case 'binary':
			return len
		  case 'utf8':
		  case 'utf-8':
			return utf8ToBytes(string).length
		  case 'ucs2':
		  case 'ucs-2':
		  case 'utf16le':
		  case 'utf-16le':
			return len * 2
		  case 'hex':
			return len >>> 1
		  case 'base64':
			return base64ToBytes(string).length
		  default:
			if (loweredCase) {
			  return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
			}
			encoding = ('' + encoding).toLowerCase()
			loweredCase = true
		}
	  }
	}
	Buffer.byteLength = byteLength
	
	function slowToString (encoding, start, end) {
	  var loweredCase = false
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
		start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
		return ''
	  }
	
	  if (end === undefined || end > this.length) {
		end = this.length
	  }
	
	  if (end <= 0) {
		return ''
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0
	
	  if (end <= start) {
		return ''
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  while (true) {
		switch (encoding) {
		  case 'hex':
			return hexSlice(this, start, end)
	
		  case 'utf8':
		  case 'utf-8':
			return utf8Slice(this, start, end)
	
		  case 'ascii':
			return asciiSlice(this, start, end)
	
		  case 'latin1':
		  case 'binary':
			return latin1Slice(this, start, end)
	
		  case 'base64':
			return base64Slice(this, start, end)
	
		  case 'ucs2':
		  case 'ucs-2':
		  case 'utf16le':
		  case 'utf-16le':
			return utf16leSlice(this, start, end)
	
		  default:
			if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
			encoding = (encoding + '').toLowerCase()
			loweredCase = true
		}
	  }
	}
	
	// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
	// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
	// reliably in a browserify context because there could be multiple different
	// copies of the 'buffer' package in use. This method works even for Buffer
	// instances that were created from another copy of the `buffer` package.
	// See: https://github.com/feross/buffer/issues/154
	Buffer.prototype._isBuffer = true
	
	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}
	
	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
		throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
		swap(this, i, i + 1)
	  }
	  return this
	}
	
	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
		throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
		swap(this, i, i + 3)
		swap(this, i + 1, i + 2)
	  }
	  return this
	}
	
	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
		throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
		swap(this, i, i + 7)
		swap(this, i + 1, i + 6)
		swap(this, i + 2, i + 5)
		swap(this, i + 3, i + 4)
	  }
	  return this
	}
	
	Buffer.prototype.toString = function toString () {
	  var length = this.length
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}
	
	Buffer.prototype.toLocaleString = Buffer.prototype.toString
	
	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
	  if (this.length > max) str += ' ... '
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (isInstance(target, Uint8Array)) {
		target = Buffer.from(target, target.offset, target.byteLength)
	  }
	  if (!Buffer.isBuffer(target)) {
		throw new TypeError(
		  'The "target" argument must be one of type Buffer or Uint8Array. ' +
		  'Received type ' + (typeof target)
		)
	  }
	
	  if (start === undefined) {
		start = 0
	  }
	  if (end === undefined) {
		end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
		thisStart = 0
	  }
	  if (thisEnd === undefined) {
		thisEnd = this.length
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
		throw new RangeError('out of range index')
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
		return 0
	  }
	  if (thisStart >= thisEnd) {
		return -1
	  }
	  if (start >= end) {
		return 1
	  }
	
	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0
	
	  if (this === target) return 0
	
	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)
	
	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)
	
	  for (var i = 0; i < len; ++i) {
		if (thisCopy[i] !== targetCopy[i]) {
		  x = thisCopy[i]
		  y = targetCopy[i]
		  break
		}
	  }
	
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
		encoding = byteOffset
		byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
		byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
		byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset // Coerce to Number.
	  if (numberIsNaN(byteOffset)) {
		// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
		byteOffset = dir ? 0 : (buffer.length - 1)
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
		if (dir) return -1
		else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
		if (dir) byteOffset = 0
		else return -1
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
		val = Buffer.from(val, encoding)
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
		// Special case: looking for empty string/buffer always fails
		if (val.length === 0) {
		  return -1
		}
		return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
		val = val & 0xFF // Search for a byte value [0-255]
		if (typeof Uint8Array.prototype.indexOf === 'function') {
		  if (dir) {
			return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
		  } else {
			return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
		  }
		}
		return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }
	
	  throw new TypeError('val must be string, number or Buffer')
	}
	
	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length
	
	  if (encoding !== undefined) {
		encoding = String(encoding).toLowerCase()
		if (encoding === 'ucs2' || encoding === 'ucs-2' ||
			encoding === 'utf16le' || encoding === 'utf-16le') {
		  if (arr.length < 2 || val.length < 2) {
			return -1
		  }
		  indexSize = 2
		  arrLength /= 2
		  valLength /= 2
		  byteOffset /= 2
		}
	  }
	
	  function read (buf, i) {
		if (indexSize === 1) {
		  return buf[i]
		} else {
		  return buf.readUInt16BE(i * indexSize)
		}
	  }
	
	  var i
	  if (dir) {
		var foundIndex = -1
		for (i = byteOffset; i < arrLength; i++) {
		  if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
			if (foundIndex === -1) foundIndex = i
			if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
		  } else {
			if (foundIndex !== -1) i -= i - foundIndex
			foundIndex = -1
		  }
		}
	  } else {
		if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
		for (i = byteOffset; i >= 0; i--) {
		  var found = true
		  for (var j = 0; j < valLength; j++) {
			if (read(arr, i + j) !== read(val, j)) {
			  found = false
			  break
			}
		  }
		  if (found) return i
		}
	  }
	
	  return -1
	}
	
	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}
	
	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}
	
	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
		length = remaining
	  } else {
		length = Number(length)
		if (length > remaining) {
		  length = remaining
		}
	  }
	
	  var strLen = string.length
	
	  if (length > strLen / 2) {
		length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
		var parsed = parseInt(string.substr(i * 2, 2), 16)
		if (numberIsNaN(parsed)) return i
		buf[offset + i] = parsed
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}
	
	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}
	
	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}
	
	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
		encoding = 'utf8'
		length = this.length
		offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
		encoding = offset
		length = this.length
		offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
		offset = offset >>> 0
		if (isFinite(length)) {
		  length = length >>> 0
		  if (encoding === undefined) encoding = 'utf8'
		} else {
		  encoding = length
		  length = undefined
		}
	  } else {
		throw new Error(
		  'Buffer.write(string, encoding, offset[, length]) is no longer supported'
		)
	  }
	
	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining
	
	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
		throw new RangeError('Attempt to write outside buffer bounds')
	  }
	
	  if (!encoding) encoding = 'utf8'
	
	  var loweredCase = false
	  for (;;) {
		switch (encoding) {
		  case 'hex':
			return hexWrite(this, string, offset, length)
	
		  case 'utf8':
		  case 'utf-8':
			return utf8Write(this, string, offset, length)
	
		  case 'ascii':
			return asciiWrite(this, string, offset, length)
	
		  case 'latin1':
		  case 'binary':
			return latin1Write(this, string, offset, length)
	
		  case 'base64':
			// Warning: maxLength not taken into account in base64Write
			return base64Write(this, string, offset, length)
	
		  case 'ucs2':
		  case 'ucs-2':
		  case 'utf16le':
		  case 'utf-16le':
			return ucs2Write(this, string, offset, length)
	
		  default:
			if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
			encoding = ('' + encoding).toLowerCase()
			loweredCase = true
		}
	  }
	}
	
	Buffer.prototype.toJSON = function toJSON () {
	  return {
		type: 'Buffer',
		data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
		return base64.fromByteArray(buf)
	  } else {
		return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []
	
	  var i = start
	  while (i < end) {
		var firstByte = buf[i]
		var codePoint = null
		var bytesPerSequence = (firstByte > 0xEF) ? 4
		  : (firstByte > 0xDF) ? 3
			: (firstByte > 0xBF) ? 2
			  : 1
	
		if (i + bytesPerSequence <= end) {
		  var secondByte, thirdByte, fourthByte, tempCodePoint
	
		  switch (bytesPerSequence) {
			case 1:
			  if (firstByte < 0x80) {
				codePoint = firstByte
			  }
			  break
			case 2:
			  secondByte = buf[i + 1]
			  if ((secondByte & 0xC0) === 0x80) {
				tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
				if (tempCodePoint > 0x7F) {
				  codePoint = tempCodePoint
				}
			  }
			  break
			case 3:
			  secondByte = buf[i + 1]
			  thirdByte = buf[i + 2]
			  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
				tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
				if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
				  codePoint = tempCodePoint
				}
			  }
			  break
			case 4:
			  secondByte = buf[i + 1]
			  thirdByte = buf[i + 2]
			  fourthByte = buf[i + 3]
			  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
				tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
				if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
				  codePoint = tempCodePoint
				}
			  }
		  }
		}
	
		if (codePoint === null) {
		  // we did not generate a valid codePoint so insert a
		  // replacement char (U+FFFD) and advance only 1 byte
		  codePoint = 0xFFFD
		  bytesPerSequence = 1
		} else if (codePoint > 0xFFFF) {
		  // encode to utf16 (surrogate pair dance)
		  codePoint -= 0x10000
		  res.push(codePoint >>> 10 & 0x3FF | 0xD800)
		  codePoint = 0xDC00 | codePoint & 0x3FF
		}
	
		res.push(codePoint)
		i += bytesPerSequence
	  }
	
	  return decodeCodePointsArray(res)
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000
	
	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
		return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
		res += String.fromCharCode.apply(
		  String,
		  codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
		)
	  }
	  return res
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
		ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}
	
	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; ++i) {
		ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; ++i) {
		out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
		res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
	  }
	  return res
	}
	
	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
		start += len
		if (start < 0) start = 0
	  } else if (start > len) {
		start = len
	  }
	
	  if (end < 0) {
		end += len
		if (end < 0) end = 0
	  } else if (end > len) {
		end = len
	  }
	
	  if (end < start) end = start
	
	  var newBuf = this.subarray(start, end)
	  // Return an augmented `Uint8Array` instance
	  newBuf.__proto__ = Buffer.prototype
	  return newBuf
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
		val += this[offset + i] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) {
		checkOffset(offset, byteLength, this.length)
	  }
	
	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
		val += this[offset + --byteLength] * mul
	  }
	
	  return val
	}
	
	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
		  (this[offset + 1] << 8) |
		  (this[offset + 2] << 16)) +
		  (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
		((this[offset + 1] << 16) |
		(this[offset + 2] << 8) |
		this[offset + 3])
	}
	
	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
		val += this[offset + i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)
	
	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
		val += this[offset + --i] * mul
	  }
	  mul *= 0x80
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)
	
	  return val
	}
	
	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
		(this[offset + 1] << 8) |
		(this[offset + 2] << 16) |
		(this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
		(this[offset + 1] << 16) |
		(this[offset + 2] << 8) |
		(this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  offset = offset >>> 0
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) {
		var maxBytes = Math.pow(2, 8 * byteLength) - 1
		checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
		this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  byteLength = byteLength >>> 0
	  if (!noAssert) {
		var maxBytes = Math.pow(2, 8 * byteLength) - 1
		checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
		this[offset + i] = (value / mul) & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  this[offset] = (value & 0xff)
	  this[offset + 1] = (value >>> 8)
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  this[offset] = (value >>> 8)
	  this[offset + 1] = (value & 0xff)
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  this[offset + 3] = (value >>> 24)
	  this[offset + 2] = (value >>> 16)
	  this[offset + 1] = (value >>> 8)
	  this[offset] = (value & 0xff)
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  this[offset] = (value >>> 24)
	  this[offset + 1] = (value >>> 16)
	  this[offset + 2] = (value >>> 8)
	  this[offset + 3] = (value & 0xff)
	  return offset + 4
	}
	
	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
		var limit = Math.pow(2, (8 * byteLength) - 1)
	
		checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
		if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
		  sub = 1
		}
		this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
		var limit = Math.pow(2, (8 * byteLength) - 1)
	
		checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }
	
	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
		if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
		  sub = 1
		}
		this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }
	
	  return offset + byteLength
	}
	
	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  this[offset] = (value & 0xff)
	  this[offset + 1] = (value >>> 8)
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  this[offset] = (value >>> 8)
	  this[offset + 1] = (value & 0xff)
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  this[offset] = (value & 0xff)
	  this[offset + 1] = (value >>> 8)
	  this[offset + 2] = (value >>> 16)
	  this[offset + 3] = (value >>> 24)
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  this[offset] = (value >>> 24)
	  this[offset + 1] = (value >>> 16)
	  this[offset + 2] = (value >>> 8)
	  this[offset + 3] = (value & 0xff)
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
		checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert) {
		checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0
	
	  // Fatal error conditions
	  if (targetStart < 0) {
		throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
		end = target.length - targetStart + start
	  }
	
	  var len = end - start
	
	  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
		// Use built-in when available, missing from IE11
		this.copyWithin(targetStart, start, end)
	  } else if (this === target && start < targetStart && targetStart < end) {
		// descending copy from end
		for (var i = len - 1; i >= 0; --i) {
		  target[i + targetStart] = this[i + start]
		}
	  } else {
		Uint8Array.prototype.set.call(
		  target,
		  this.subarray(start, end),
		  targetStart
		)
	  }
	
	  return len
	}
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
		if (typeof start === 'string') {
		  encoding = start
		  start = 0
		  end = this.length
		} else if (typeof end === 'string') {
		  encoding = end
		  end = this.length
		}
		if (encoding !== undefined && typeof encoding !== 'string') {
		  throw new TypeError('encoding must be a string')
		}
		if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
		  throw new TypeError('Unknown encoding: ' + encoding)
		}
		if (val.length === 1) {
		  var code = val.charCodeAt(0)
		  if ((encoding === 'utf8' && code < 128) ||
			  encoding === 'latin1') {
			// Fast path: If `val` fits into a single byte, use that numeric value.
			val = code
		  }
		}
	  } else if (typeof val === 'number') {
		val = val & 255
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
		throw new RangeError('Out of range index')
	  }
	
	  if (end <= start) {
		return this
	  }
	
	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0
	
	  if (!val) val = 0
	
	  var i
	  if (typeof val === 'number') {
		for (i = start; i < end; ++i) {
		  this[i] = val
		}
	  } else {
		var bytes = Buffer.isBuffer(val)
		  ? val
		  : Buffer.from(val, encoding)
		var len = bytes.length
		if (len === 0) {
		  throw new TypeError('The value "' + val +
			'" is invalid for argument "value"')
		}
		for (i = 0; i < end - start; ++i) {
		  this[i + start] = bytes[i % len]
		}
	  }
	
	  return this
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
	
	function base64clean (str) {
	  // Node takes equal signs as end of the Base64 encoding
	  str = str.split('=')[0]
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = str.trim().replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
		str = str + '='
	  }
	  return str
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []
	
	  for (var i = 0; i < length; ++i) {
		codePoint = string.charCodeAt(i)
	
		// is surrogate component
		if (codePoint > 0xD7FF && codePoint < 0xE000) {
		  // last char was a lead
		  if (!leadSurrogate) {
			// no lead yet
			if (codePoint > 0xDBFF) {
			  // unexpected trail
			  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
			  continue
			} else if (i + 1 === length) {
			  // unpaired lead
			  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
			  continue
			}
	
			// valid lead
			leadSurrogate = codePoint
	
			continue
		  }
	
		  // 2 leads in a row
		  if (codePoint < 0xDC00) {
			if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
			leadSurrogate = codePoint
			continue
		  }
	
		  // valid surrogate pair
		  codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
		} else if (leadSurrogate) {
		  // valid bmp char, but last char was a lead
		  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
		}
	
		leadSurrogate = null
	
		// encode utf8
		if (codePoint < 0x80) {
		  if ((units -= 1) < 0) break
		  bytes.push(codePoint)
		} else if (codePoint < 0x800) {
		  if ((units -= 2) < 0) break
		  bytes.push(
			codePoint >> 0x6 | 0xC0,
			codePoint & 0x3F | 0x80
		  )
		} else if (codePoint < 0x10000) {
		  if ((units -= 3) < 0) break
		  bytes.push(
			codePoint >> 0xC | 0xE0,
			codePoint >> 0x6 & 0x3F | 0x80,
			codePoint & 0x3F | 0x80
		  )
		} else if (codePoint < 0x110000) {
		  if ((units -= 4) < 0) break
		  bytes.push(
			codePoint >> 0x12 | 0xF0,
			codePoint >> 0xC & 0x3F | 0x80,
			codePoint >> 0x6 & 0x3F | 0x80,
			codePoint & 0x3F | 0x80
		  )
		} else {
		  throw new Error('Invalid code point')
		}
	  }
	
	  return bytes
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
		// Node's code seems to be doing this and not & 0x7F..
		byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
		if ((units -= 2) < 0) break
	
		c = str.charCodeAt(i)
		hi = c >> 8
		lo = c % 256
		byteArray.push(lo)
		byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}
	
	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
		if ((i + offset >= dst.length) || (i >= src.length)) break
		dst[i + offset] = src[i]
	  }
	  return i
	}
	
	// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
	// the `instanceof` check but they should be treated as of that type.
	// See: https://github.com/feross/buffer/issues/166
	function isInstance (obj, type) {
	  return obj instanceof type ||
		(obj != null && obj.constructor != null && obj.constructor.name != null &&
		  obj.constructor.name === type.name)
	}
	function numberIsNaN (obj) {
	  // For IE11 support
	  return obj !== obj // eslint-disable-line no-self-compare
	}
	
	}).call(this)}).call(this,require("buffer").Buffer)
	},{"base64-js":123,"buffer":125,"ieee754":129}],126:[function(require,module,exports){
	module.exports = {
	  "100": "Continue",
	  "101": "Switching Protocols",
	  "102": "Processing",
	  "200": "OK",
	  "201": "Created",
	  "202": "Accepted",
	  "203": "Non-Authoritative Information",
	  "204": "No Content",
	  "205": "Reset Content",
	  "206": "Partial Content",
	  "207": "Multi-Status",
	  "208": "Already Reported",
	  "226": "IM Used",
	  "300": "Multiple Choices",
	  "301": "Moved Permanently",
	  "302": "Found",
	  "303": "See Other",
	  "304": "Not Modified",
	  "305": "Use Proxy",
	  "307": "Temporary Redirect",
	  "308": "Permanent Redirect",
	  "400": "Bad Request",
	  "401": "Unauthorized",
	  "402": "Payment Required",
	  "403": "Forbidden",
	  "404": "Not Found",
	  "405": "Method Not Allowed",
	  "406": "Not Acceptable",
	  "407": "Proxy Authentication Required",
	  "408": "Request Timeout",
	  "409": "Conflict",
	  "410": "Gone",
	  "411": "Length Required",
	  "412": "Precondition Failed",
	  "413": "Payload Too Large",
	  "414": "URI Too Long",
	  "415": "Unsupported Media Type",
	  "416": "Range Not Satisfiable",
	  "417": "Expectation Failed",
	  "418": "I'm a teapot",
	  "421": "Misdirected Request",
	  "422": "Unprocessable Entity",
	  "423": "Locked",
	  "424": "Failed Dependency",
	  "425": "Unordered Collection",
	  "426": "Upgrade Required",
	  "428": "Precondition Required",
	  "429": "Too Many Requests",
	  "431": "Request Header Fields Too Large",
	  "451": "Unavailable For Legal Reasons",
	  "500": "Internal Server Error",
	  "501": "Not Implemented",
	  "502": "Bad Gateway",
	  "503": "Service Unavailable",
	  "504": "Gateway Timeout",
	  "505": "HTTP Version Not Supported",
	  "506": "Variant Also Negotiates",
	  "507": "Insufficient Storage",
	  "508": "Loop Detected",
	  "509": "Bandwidth Limit Exceeded",
	  "510": "Not Extended",
	  "511": "Network Authentication Required"
	}
	
	},{}],127:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var R = typeof Reflect === 'object' ? Reflect : null
	var ReflectApply = R && typeof R.apply === 'function'
	  ? R.apply
	  : function ReflectApply(target, receiver, args) {
		return Function.prototype.apply.call(target, receiver, args);
	  }
	
	var ReflectOwnKeys
	if (R && typeof R.ownKeys === 'function') {
	  ReflectOwnKeys = R.ownKeys
	} else if (Object.getOwnPropertySymbols) {
	  ReflectOwnKeys = function ReflectOwnKeys(target) {
		return Object.getOwnPropertyNames(target)
		  .concat(Object.getOwnPropertySymbols(target));
	  };
	} else {
	  ReflectOwnKeys = function ReflectOwnKeys(target) {
		return Object.getOwnPropertyNames(target);
	  };
	}
	
	function ProcessEmitWarning(warning) {
	  if (console && console.warn) console.warn(warning);
	}
	
	var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
	  return value !== value;
	}
	
	function EventEmitter() {
	  EventEmitter.init.call(this);
	}
	module.exports = EventEmitter;
	module.exports.once = once;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._eventsCount = 0;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	var defaultMaxListeners = 10;
	
	function checkListener(listener) {
	  if (typeof listener !== 'function') {
		throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
	  }
	}
	
	Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
	  enumerable: true,
	  get: function() {
		return defaultMaxListeners;
	  },
	  set: function(arg) {
		if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
		  throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
		}
		defaultMaxListeners = arg;
	  }
	});
	
	EventEmitter.init = function() {
	
	  if (this._events === undefined ||
		  this._events === Object.getPrototypeOf(this)._events) {
		this._events = Object.create(null);
		this._eventsCount = 0;
	  }
	
	  this._maxListeners = this._maxListeners || undefined;
	};
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
		throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
	  }
	  this._maxListeners = n;
	  return this;
	};
	
	function _getMaxListeners(that) {
	  if (that._maxListeners === undefined)
		return EventEmitter.defaultMaxListeners;
	  return that._maxListeners;
	}
	
	EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
	  return _getMaxListeners(this);
	};
	
	EventEmitter.prototype.emit = function emit(type) {
	  var args = [];
	  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
	  var doError = (type === 'error');
	
	  var events = this._events;
	  if (events !== undefined)
		doError = (doError && events.error === undefined);
	  else if (!doError)
		return false;
	
	  // If there is no 'error' event listener then throw.
	  if (doError) {
		var er;
		if (args.length > 0)
		  er = args[0];
		if (er instanceof Error) {
		  // Note: The comments on the `throw` lines are intentional, they show
		  // up in Node's output if this results in an unhandled exception.
		  throw er; // Unhandled 'error' event
		}
		// At least give some kind of context to the user
		var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
		err.context = er;
		throw err; // Unhandled 'error' event
	  }
	
	  var handler = events[type];
	
	  if (handler === undefined)
		return false;
	
	  if (typeof handler === 'function') {
		ReflectApply(handler, this, args);
	  } else {
		var len = handler.length;
		var listeners = arrayClone(handler, len);
		for (var i = 0; i < len; ++i)
		  ReflectApply(listeners[i], this, args);
	  }
	
	  return true;
	};
	
	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;
	
	  checkListener(listener);
	
	  events = target._events;
	  if (events === undefined) {
		events = target._events = Object.create(null);
		target._eventsCount = 0;
	  } else {
		// To avoid recursion in the case that type === "newListener"! Before
		// adding it to the listeners, first emit "newListener".
		if (events.newListener !== undefined) {
		  target.emit('newListener', type,
					  listener.listener ? listener.listener : listener);
	
		  // Re-assign `events` because a newListener handler could have caused the
		  // this._events to be assigned to a new object
		  events = target._events;
		}
		existing = events[type];
	  }
	
	  if (existing === undefined) {
		// Optimize the case of one listener. Don't need the extra array object.
		existing = events[type] = listener;
		++target._eventsCount;
	  } else {
		if (typeof existing === 'function') {
		  // Adding the second element, need to change to array.
		  existing = events[type] =
			prepend ? [listener, existing] : [existing, listener];
		  // If we've already got an array, just append.
		} else if (prepend) {
		  existing.unshift(listener);
		} else {
		  existing.push(listener);
		}
	
		// Check for listener leak
		m = _getMaxListeners(target);
		if (m > 0 && existing.length > m && !existing.warned) {
		  existing.warned = true;
		  // No error code for this since it is a Warning
		  // eslint-disable-next-line no-restricted-syntax
		  var w = new Error('Possible EventEmitter memory leak detected. ' +
							  existing.length + ' ' + String(type) + ' listeners ' +
							  'added. Use emitter.setMaxListeners() to ' +
							  'increase limit');
		  w.name = 'MaxListenersExceededWarning';
		  w.emitter = target;
		  w.type = type;
		  w.count = existing.length;
		  ProcessEmitWarning(w);
		}
	  }
	
	  return target;
	}
	
	EventEmitter.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.prependListener =
		function prependListener(type, listener) {
		  return _addListener(this, type, listener, true);
		};
	
	function onceWrapper() {
	  if (!this.fired) {
		this.target.removeListener(this.type, this.wrapFn);
		this.fired = true;
		if (arguments.length === 0)
		  return this.listener.call(this.target);
		return this.listener.apply(this.target, arguments);
	  }
	}
	
	function _onceWrap(target, type, listener) {
	  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
	  var wrapped = onceWrapper.bind(state);
	  wrapped.listener = listener;
	  state.wrapFn = wrapped;
	  return wrapped;
	}
	
	EventEmitter.prototype.once = function once(type, listener) {
	  checkListener(listener);
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};
	
	EventEmitter.prototype.prependOnceListener =
		function prependOnceListener(type, listener) {
		  checkListener(listener);
		  this.prependListener(type, _onceWrap(this, type, listener));
		  return this;
		};
	
	// Emits a 'removeListener' event if and only if the listener was removed.
	EventEmitter.prototype.removeListener =
		function removeListener(type, listener) {
		  var list, events, position, i, originalListener;
	
		  checkListener(listener);
	
		  events = this._events;
		  if (events === undefined)
			return this;
	
		  list = events[type];
		  if (list === undefined)
			return this;
	
		  if (list === listener || list.listener === listener) {
			if (--this._eventsCount === 0)
			  this._events = Object.create(null);
			else {
			  delete events[type];
			  if (events.removeListener)
				this.emit('removeListener', type, list.listener || listener);
			}
		  } else if (typeof list !== 'function') {
			position = -1;
	
			for (i = list.length - 1; i >= 0; i--) {
			  if (list[i] === listener || list[i].listener === listener) {
				originalListener = list[i].listener;
				position = i;
				break;
			  }
			}
	
			if (position < 0)
			  return this;
	
			if (position === 0)
			  list.shift();
			else {
			  spliceOne(list, position);
			}
	
			if (list.length === 1)
			  events[type] = list[0];
	
			if (events.removeListener !== undefined)
			  this.emit('removeListener', type, originalListener || listener);
		  }
	
		  return this;
		};
	
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	
	EventEmitter.prototype.removeAllListeners =
		function removeAllListeners(type) {
		  var listeners, events, i;
	
		  events = this._events;
		  if (events === undefined)
			return this;
	
		  // not listening for removeListener, no need to emit
		  if (events.removeListener === undefined) {
			if (arguments.length === 0) {
			  this._events = Object.create(null);
			  this._eventsCount = 0;
			} else if (events[type] !== undefined) {
			  if (--this._eventsCount === 0)
				this._events = Object.create(null);
			  else
				delete events[type];
			}
			return this;
		  }
	
		  // emit removeListener for all listeners on all events
		  if (arguments.length === 0) {
			var keys = Object.keys(events);
			var key;
			for (i = 0; i < keys.length; ++i) {
			  key = keys[i];
			  if (key === 'removeListener') continue;
			  this.removeAllListeners(key);
			}
			this.removeAllListeners('removeListener');
			this._events = Object.create(null);
			this._eventsCount = 0;
			return this;
		  }
	
		  listeners = events[type];
	
		  if (typeof listeners === 'function') {
			this.removeListener(type, listeners);
		  } else if (listeners !== undefined) {
			// LIFO order
			for (i = listeners.length - 1; i >= 0; i--) {
			  this.removeListener(type, listeners[i]);
			}
		  }
	
		  return this;
		};
	
	function _listeners(target, type, unwrap) {
	  var events = target._events;
	
	  if (events === undefined)
		return [];
	
	  var evlistener = events[type];
	  if (evlistener === undefined)
		return [];
	
	  if (typeof evlistener === 'function')
		return unwrap ? [evlistener.listener || evlistener] : [evlistener];
	
	  return unwrap ?
		unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
	}
	
	EventEmitter.prototype.listeners = function listeners(type) {
	  return _listeners(this, type, true);
	};
	
	EventEmitter.prototype.rawListeners = function rawListeners(type) {
	  return _listeners(this, type, false);
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
		return emitter.listenerCount(type);
	  } else {
		return listenerCount.call(emitter, type);
	  }
	};
	
	EventEmitter.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;
	
	  if (events !== undefined) {
		var evlistener = events[type];
	
		if (typeof evlistener === 'function') {
		  return 1;
		} else if (evlistener !== undefined) {
		  return evlistener.length;
		}
	  }
	
	  return 0;
	}
	
	EventEmitter.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
	};
	
	function arrayClone(arr, n) {
	  var copy = new Array(n);
	  for (var i = 0; i < n; ++i)
		copy[i] = arr[i];
	  return copy;
	}
	
	function spliceOne(list, index) {
	  for (; index + 1 < list.length; index++)
		list[index] = list[index + 1];
	  list.pop();
	}
	
	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
		ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}
	
	function once(emitter, name) {
	  return new Promise(function (resolve, reject) {
		function errorListener(err) {
		  emitter.removeListener(name, resolver);
		  reject(err);
		}
	
		function resolver() {
		  if (typeof emitter.removeListener === 'function') {
			emitter.removeListener('error', errorListener);
		  }
		  resolve([].slice.call(arguments));
		};
	
		eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
		if (name !== 'error') {
		  addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
		}
	  });
	}
	
	function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
	  if (typeof emitter.on === 'function') {
		eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
	  }
	}
	
	function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
	  if (typeof emitter.on === 'function') {
		if (flags.once) {
		  emitter.once(name, listener);
		} else {
		  emitter.on(name, listener);
		}
	  } else if (typeof emitter.addEventListener === 'function') {
		// EventTarget does not have `error` event semantics like Node
		// EventEmitters, we do not listen for `error` events here.
		emitter.addEventListener(name, function wrapListener(arg) {
		  // IE does not have builtin `{ once: true }` support so we
		  // have to do it manually.
		  if (flags.once) {
			emitter.removeEventListener(name, wrapListener);
		  }
		  listener(arg);
		});
	  } else {
		throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
	  }
	}
	
	},{}],128:[function(require,module,exports){
	var http = require('http')
	var url = require('url')
	
	var https = module.exports
	
	for (var key in http) {
	  if (http.hasOwnProperty(key)) https[key] = http[key]
	}
	
	https.request = function (params, cb) {
	  params = validateParams(params)
	  return http.request.call(this, params, cb)
	}
	
	https.get = function (params, cb) {
	  params = validateParams(params)
	  return http.get.call(this, params, cb)
	}
	
	function validateParams (params) {
	  if (typeof params === 'string') {
		params = url.parse(params)
	  }
	  if (!params.protocol) {
		params.protocol = 'https:'
	  }
	  if (params.protocol !== 'https:') {
		throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"')
	  }
	  return params
	}
	
	},{"http":154,"url":174}],129:[function(require,module,exports){
	/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]
	
	  i += d
	
	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
		e = 1 - eBias
	  } else if (e === eMax) {
		return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
		m = m + Math.pow(2, mLen)
		e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
	
	  value = Math.abs(value)
	
	  if (isNaN(value) || value === Infinity) {
		m = isNaN(value) ? 1 : 0
		e = eMax
	  } else {
		e = Math.floor(Math.log(value) / Math.LN2)
		if (value * (c = Math.pow(2, -e)) < 1) {
		  e--
		  c *= 2
		}
		if (e + eBias >= 1) {
		  value += rt / c
		} else {
		  value += rt * Math.pow(2, 1 - eBias)
		}
		if (value * c >= 2) {
		  e++
		  c /= 2
		}
	
		if (e + eBias >= eMax) {
		  m = 0
		  e = eMax
		} else if (e + eBias >= 1) {
		  m = ((value * c) - 1) * Math.pow(2, mLen)
		  e = e + eBias
		} else {
		  m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
		  e = 0
		}
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128
	}
	
	},{}],130:[function(require,module,exports){
	arguments[4][59][0].apply(exports,arguments)
	},{"dup":59}],131:[function(require,module,exports){
	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */
	
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	module.exports = function (obj) {
	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
	}
	
	function isBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}
	
	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
	}
	
	},{}],132:[function(require,module,exports){
	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};
	
	},{}],133:[function(require,module,exports){
	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
		throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
		throw new Error('clearTimeout has not been defined');
	}
	(function () {
		try {
			if (typeof setTimeout === 'function') {
				cachedSetTimeout = setTimeout;
			} else {
				cachedSetTimeout = defaultSetTimout;
			}
		} catch (e) {
			cachedSetTimeout = defaultSetTimout;
		}
		try {
			if (typeof clearTimeout === 'function') {
				cachedClearTimeout = clearTimeout;
			} else {
				cachedClearTimeout = defaultClearTimeout;
			}
		} catch (e) {
			cachedClearTimeout = defaultClearTimeout;
		}
	} ())
	function runTimeout(fun) {
		if (cachedSetTimeout === setTimeout) {
			//normal enviroments in sane situations
			return setTimeout(fun, 0);
		}
		// if setTimeout wasn't available but was latter defined
		if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
			cachedSetTimeout = setTimeout;
			return setTimeout(fun, 0);
		}
		try {
			// when when somebody has screwed with setTimeout but no I.E. maddness
			return cachedSetTimeout(fun, 0);
		} catch(e){
			try {
				// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
				return cachedSetTimeout.call(null, fun, 0);
			} catch(e){
				// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
				return cachedSetTimeout.call(this, fun, 0);
			}
		}
	
	
	}
	function runClearTimeout(marker) {
		if (cachedClearTimeout === clearTimeout) {
			//normal enviroments in sane situations
			return clearTimeout(marker);
		}
		// if clearTimeout wasn't available but was latter defined
		if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
			cachedClearTimeout = clearTimeout;
			return clearTimeout(marker);
		}
		try {
			// when when somebody has screwed with setTimeout but no I.E. maddness
			return cachedClearTimeout(marker);
		} catch (e){
			try {
				// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
				return cachedClearTimeout.call(null, marker);
			} catch (e){
				// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
				// Some versions of I.E. have different rules for clearTimeout vs setTimeout
				return cachedClearTimeout.call(this, marker);
			}
		}
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
		if (!draining || !currentQueue) {
			return;
		}
		draining = false;
		if (currentQueue.length) {
			queue = currentQueue.concat(queue);
		} else {
			queueIndex = -1;
		}
		if (queue.length) {
			drainQueue();
		}
	}
	
	function drainQueue() {
		if (draining) {
			return;
		}
		var timeout = runTimeout(cleanUpNextTick);
		draining = true;
	
		var len = queue.length;
		while(len) {
			currentQueue = queue;
			queue = [];
			while (++queueIndex < len) {
				if (currentQueue) {
					currentQueue[queueIndex].run();
				}
			}
			queueIndex = -1;
			len = queue.length;
		}
		currentQueue = null;
		draining = false;
		runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
		var args = new Array(arguments.length - 1);
		if (arguments.length > 1) {
			for (var i = 1; i < arguments.length; i++) {
				args[i - 1] = arguments[i];
			}
		}
		queue.push(new Item(fun, args));
		if (queue.length === 1 && !draining) {
			runTimeout(drainQueue);
		}
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
		this.fun = fun;
		this.array = array;
	}
	Item.prototype.run = function () {
		this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
		throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
		throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };
	
	},{}],134:[function(require,module,exports){
	(function (global){(function (){
	/*! https://mths.be/punycode v1.4.1 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw new RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
				counter = 0,
				length = string.length,
				value,
				extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * https://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
				inputLength = input.length,
				out,
				i = 0,
				n = initialN,
				bias = initialBias,
				basic,
				j,
				index,
				oldi,
				w,
				k,
				digit,
				t,
				/** Cached calculation results */
				baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
				delta,
				handledCPCount,
				basicLength,
				bias,
				j,
				m,
				q,
				k,
				t,
				currentValue,
				output = [],
				/** `inputLength` will hold the number of code points in `input`. */
				inputLength,
				/** Cached calculation results */
				handledCPCountPlusOne,
				baseMinusT,
				qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.4.1',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			typeof define == 'function' &&
			typeof define.amd == 'object' &&
			define.amd
		) {
			define('punycode', function() {
				return punycode;
			});
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) {
				// in Node.js, io.js, or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else {
				// in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else {
			// in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],135:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
		return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
		maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
		len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
		var x = qs[i].replace(regexp, '%20'),
			idx = x.indexOf(eq),
			kstr, vstr, k, v;
	
		if (idx >= 0) {
		  kstr = x.substr(0, idx);
		  vstr = x.substr(idx + 1);
		} else {
		  kstr = x;
		  vstr = '';
		}
	
		k = decodeURIComponent(kstr);
		v = decodeURIComponent(vstr);
	
		if (!hasOwnProperty(obj, k)) {
		  obj[k] = v;
		} else if (isArray(obj[k])) {
		  obj[k].push(v);
		} else {
		  obj[k] = [obj[k], v];
		}
	  }
	
	  return obj;
	};
	
	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};
	
	},{}],136:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
		case 'string':
		  return v;
	
		case 'boolean':
		  return v ? 'true' : 'false';
	
		case 'number':
		  return isFinite(v) ? v : '';
	
		default:
		  return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
		obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
		return map(objectKeys(obj), function(k) {
		  var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
		  if (isArray(obj[k])) {
			return map(obj[k], function(v) {
			  return ks + encodeURIComponent(stringifyPrimitive(v));
			}).join(sep);
		  } else {
			return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
		  }
		}).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
			 encodeURIComponent(stringifyPrimitive(obj));
	};
	
	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};
	
	function map (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
		res.push(f(xs[i], i));
	  }
	  return res;
	}
	
	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
		if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};
	
	},{}],137:[function(require,module,exports){
	'use strict';
	
	exports.decode = exports.parse = require('./decode');
	exports.encode = exports.stringify = require('./encode');
	
	},{"./decode":135,"./encode":136}],138:[function(require,module,exports){
	arguments[4][92][0].apply(exports,arguments)
	},{"buffer":125,"dup":92}],139:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = require('events').EventEmitter;
	var inherits = require('inherits');
	
	inherits(Stream, EE);
	Stream.Readable = require('readable-stream/lib/_stream_readable.js');
	Stream.Writable = require('readable-stream/lib/_stream_writable.js');
	Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
	Stream.Transform = require('readable-stream/lib/_stream_transform.js');
	Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
	Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
	Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
		if (dest.writable) {
		  if (false === dest.write(chunk) && source.pause) {
			source.pause();
		  }
		}
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
		if (source.readable && source.resume) {
		  source.resume();
		}
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
		source.on('end', onend);
		source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
		if (didOnEnd) return;
		didOnEnd = true;
	
		dest.end();
	  }
	
	
	  function onclose() {
		if (didOnEnd) return;
		didOnEnd = true;
	
		if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
		cleanup();
		if (EE.listenerCount(this, 'error') === 0) {
		  throw er; // Unhandled stream error in pipe.
		}
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
		source.removeListener('data', ondata);
		dest.removeListener('drain', ondrain);
	
		source.removeListener('end', onend);
		source.removeListener('close', onclose);
	
		source.removeListener('error', onerror);
		dest.removeListener('error', onerror);
	
		source.removeListener('end', cleanup);
		source.removeListener('close', cleanup);
	
		dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};
	
	},{"events":127,"inherits":130,"readable-stream/lib/_stream_duplex.js":141,"readable-stream/lib/_stream_passthrough.js":142,"readable-stream/lib/_stream_readable.js":143,"readable-stream/lib/_stream_transform.js":144,"readable-stream/lib/_stream_writable.js":145,"readable-stream/lib/internal/streams/end-of-stream.js":149,"readable-stream/lib/internal/streams/pipeline.js":151}],140:[function(require,module,exports){
	arguments[4][74][0].apply(exports,arguments)
	},{"dup":74}],141:[function(require,module,exports){
	arguments[4][75][0].apply(exports,arguments)
	},{"./_stream_readable":143,"./_stream_writable":145,"_process":133,"dup":75,"inherits":130}],142:[function(require,module,exports){
	arguments[4][76][0].apply(exports,arguments)
	},{"./_stream_transform":144,"dup":76,"inherits":130}],143:[function(require,module,exports){
	arguments[4][77][0].apply(exports,arguments)
	},{"../errors":140,"./_stream_duplex":141,"./internal/streams/async_iterator":146,"./internal/streams/buffer_list":147,"./internal/streams/destroy":148,"./internal/streams/from":150,"./internal/streams/state":152,"./internal/streams/stream":153,"_process":133,"buffer":125,"dup":77,"events":127,"inherits":130,"string_decoder/":173,"util":124}],144:[function(require,module,exports){
	arguments[4][78][0].apply(exports,arguments)
	},{"../errors":140,"./_stream_duplex":141,"dup":78,"inherits":130}],145:[function(require,module,exports){
	arguments[4][79][0].apply(exports,arguments)
	},{"../errors":140,"./_stream_duplex":141,"./internal/streams/destroy":148,"./internal/streams/state":152,"./internal/streams/stream":153,"_process":133,"buffer":125,"dup":79,"inherits":130,"util-deprecate":176}],146:[function(require,module,exports){
	arguments[4][80][0].apply(exports,arguments)
	},{"./end-of-stream":149,"_process":133,"dup":80}],147:[function(require,module,exports){
	arguments[4][81][0].apply(exports,arguments)
	},{"buffer":125,"dup":81,"util":124}],148:[function(require,module,exports){
	arguments[4][82][0].apply(exports,arguments)
	},{"_process":133,"dup":82}],149:[function(require,module,exports){
	arguments[4][83][0].apply(exports,arguments)
	},{"../../../errors":140,"dup":83}],150:[function(require,module,exports){
	arguments[4][84][0].apply(exports,arguments)
	},{"dup":84}],151:[function(require,module,exports){
	arguments[4][85][0].apply(exports,arguments)
	},{"../../../errors":140,"./end-of-stream":149,"dup":85}],152:[function(require,module,exports){
	arguments[4][86][0].apply(exports,arguments)
	},{"../../../errors":140,"dup":86}],153:[function(require,module,exports){
	arguments[4][87][0].apply(exports,arguments)
	},{"dup":87,"events":127}],154:[function(require,module,exports){
	(function (global){(function (){
	var ClientRequest = require('./lib/request')
	var response = require('./lib/response')
	var extend = require('xtend')
	var statusCodes = require('builtin-status-codes')
	var url = require('url')
	
	var http = exports
	
	http.request = function (opts, cb) {
		if (typeof opts === 'string')
			opts = url.parse(opts)
		else
			opts = extend(opts)
	
		// Normally, the page is loaded from http or https, so not specifying a protocol
		// will result in a (valid) protocol-relative url. However, this won't work if
		// the protocol is something else, like 'file:'
		var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : ''
	
		var protocol = opts.protocol || defaultProtocol
		var host = opts.hostname || opts.host
		var port = opts.port
		var path = opts.path || '/'
	
		// Necessary for IPv6 addresses
		if (host && host.indexOf(':') !== -1)
			host = '[' + host + ']'
	
		// This may be a relative url. The browser should always be able to interpret it correctly.
		opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path
		opts.method = (opts.method || 'GET').toUpperCase()
		opts.headers = opts.headers || {}
	
		// Also valid opts.auth, opts.mode
	
		var req = new ClientRequest(opts)
		if (cb)
			req.on('response', cb)
		return req
	}
	
	http.get = function get (opts, cb) {
		var req = http.request(opts, cb)
		req.end()
		return req
	}
	
	http.ClientRequest = ClientRequest
	http.IncomingMessage = response.IncomingMessage
	
	http.Agent = function () {}
	http.Agent.defaultMaxSockets = 4
	
	http.globalAgent = new http.Agent()
	
	http.STATUS_CODES = statusCodes
	
	http.METHODS = [
		'CHECKOUT',
		'CONNECT',
		'COPY',
		'DELETE',
		'GET',
		'HEAD',
		'LOCK',
		'M-SEARCH',
		'MERGE',
		'MKACTIVITY',
		'MKCOL',
		'MOVE',
		'NOTIFY',
		'OPTIONS',
		'PATCH',
		'POST',
		'PROPFIND',
		'PROPPATCH',
		'PURGE',
		'PUT',
		'REPORT',
		'SEARCH',
		'SUBSCRIBE',
		'TRACE',
		'UNLOCK',
		'UNSUBSCRIBE'
	]
	}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./lib/request":156,"./lib/response":157,"builtin-status-codes":126,"url":174,"xtend":177}],155:[function(require,module,exports){
	(function (global){(function (){
	exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)
	
	exports.writableStream = isFunction(global.WritableStream)
	
	exports.abortController = isFunction(global.AbortController)
	
	// The xhr request to example.com may violate some restrictive CSP configurations,
	// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
	// and assume support for certain features below.
	var xhr
	function getXHR () {
		// Cache the xhr value
		if (xhr !== undefined) return xhr
	
		if (global.XMLHttpRequest) {
			xhr = new global.XMLHttpRequest()
			// If XDomainRequest is available (ie only, where xhr might not work
			// cross domain), use the page location. Otherwise use example.com
			// Note: this doesn't actually make an http request.
			try {
				xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')
			} catch(e) {
				xhr = null
			}
		} else {
			// Service workers don't have XHR
			xhr = null
		}
		return xhr
	}
	
	function checkTypeSupport (type) {
		var xhr = getXHR()
		if (!xhr) return false
		try {
			xhr.responseType = type
			return xhr.responseType === type
		} catch (e) {}
		return false
	}
	
	// If fetch is supported, then arraybuffer will be supported too. Skip calling
	// checkTypeSupport(), since that calls getXHR().
	exports.arraybuffer = exports.fetch || checkTypeSupport('arraybuffer')
	
	// These next two tests unavoidably show warnings in Chrome. Since fetch will always
	// be used if it's available, just return false for these to avoid the warnings.
	exports.msstream = !exports.fetch && checkTypeSupport('ms-stream')
	exports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport('moz-chunked-arraybuffer')
	
	// If fetch is supported, then overrideMimeType will be supported too. Skip calling
	// getXHR().
	exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)
	
	function isFunction (value) {
		return typeof value === 'function'
	}
	
	xhr = null // Help gc
	
	}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}],156:[function(require,module,exports){
	(function (process,global,Buffer){(function (){
	var capability = require('./capability')
	var inherits = require('inherits')
	var response = require('./response')
	var stream = require('readable-stream')
	
	var IncomingMessage = response.IncomingMessage
	var rStates = response.readyStates
	
	function decideMode (preferBinary, useFetch) {
		if (capability.fetch && useFetch) {
			return 'fetch'
		} else if (capability.mozchunkedarraybuffer) {
			return 'moz-chunked-arraybuffer'
		} else if (capability.msstream) {
			return 'ms-stream'
		} else if (capability.arraybuffer && preferBinary) {
			return 'arraybuffer'
		} else {
			return 'text'
		}
	}
	
	var ClientRequest = module.exports = function (opts) {
		var self = this
		stream.Writable.call(self)
	
		self._opts = opts
		self._body = []
		self._headers = {}
		if (opts.auth)
			self.setHeader('Authorization', 'Basic ' + Buffer.from(opts.auth).toString('base64'))
		Object.keys(opts.headers).forEach(function (name) {
			self.setHeader(name, opts.headers[name])
		})
	
		var preferBinary
		var useFetch = true
		if (opts.mode === 'disable-fetch' || ('requestTimeout' in opts && !capability.abortController)) {
			// If the use of XHR should be preferred. Not typically needed.
			useFetch = false
			preferBinary = true
		} else if (opts.mode === 'prefer-streaming') {
			// If streaming is a high priority but binary compatibility and
			// the accuracy of the 'content-type' header aren't
			preferBinary = false
		} else if (opts.mode === 'allow-wrong-content-type') {
			// If streaming is more important than preserving the 'content-type' header
			preferBinary = !capability.overrideMimeType
		} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
			// Use binary if text streaming may corrupt data or the content-type header, or for speed
			preferBinary = true
		} else {
			throw new Error('Invalid value for opts.mode')
		}
		self._mode = decideMode(preferBinary, useFetch)
		self._fetchTimer = null
		self._socketTimeout = null
		self._socketTimer = null
	
		self.on('finish', function () {
			self._onFinish()
		})
	}
	
	inherits(ClientRequest, stream.Writable)
	
	ClientRequest.prototype.setHeader = function (name, value) {
		var self = this
		var lowerName = name.toLowerCase()
		// This check is not necessary, but it prevents warnings from browsers about setting unsafe
		// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
		// http-browserify did it, so I will too.
		if (unsafeHeaders.indexOf(lowerName) !== -1)
			return
	
		self._headers[lowerName] = {
			name: name,
			value: value
		}
	}
	
	ClientRequest.prototype.getHeader = function (name) {
		var header = this._headers[name.toLowerCase()]
		if (header)
			return header.value
		return null
	}
	
	ClientRequest.prototype.removeHeader = function (name) {
		var self = this
		delete self._headers[name.toLowerCase()]
	}
	
	ClientRequest.prototype._onFinish = function () {
		var self = this
	
		if (self._destroyed)
			return
		var opts = self._opts
	
		if ('timeout' in opts && opts.timeout !== 0) {
			self.setTimeout(opts.timeout)
		}
	
		var headersObj = self._headers
		var body = null
		if (opts.method !== 'GET' && opts.method !== 'HEAD') {
			body = new Blob(self._body, {
				type: (headersObj['content-type'] || {}).value || ''
			});
		}
	
		// create flattened list of headers
		var headersList = []
		Object.keys(headersObj).forEach(function (keyName) {
			var name = headersObj[keyName].name
			var value = headersObj[keyName].value
			if (Array.isArray(value)) {
				value.forEach(function (v) {
					headersList.push([name, v])
				})
			} else {
				headersList.push([name, value])
			}
		})
	
		if (self._mode === 'fetch') {
			var signal = null
			if (capability.abortController) {
				var controller = new AbortController()
				signal = controller.signal
				self._fetchAbortController = controller
	
				if ('requestTimeout' in opts && opts.requestTimeout !== 0) {
					self._fetchTimer = global.setTimeout(function () {
						self.emit('requestTimeout')
						if (self._fetchAbortController)
							self._fetchAbortController.abort()
					}, opts.requestTimeout)
				}
			}
	
			global.fetch(self._opts.url, {
				method: self._opts.method,
				headers: headersList,
				body: body || undefined,
				mode: 'cors',
				credentials: opts.withCredentials ? 'include' : 'same-origin',
				signal: signal
			}).then(function (response) {
				self._fetchResponse = response
				self._resetTimers(false)
				self._connect()
			}, function (reason) {
				self._resetTimers(true)
				if (!self._destroyed)
					self.emit('error', reason)
			})
		} else {
			var xhr = self._xhr = new global.XMLHttpRequest()
			try {
				xhr.open(self._opts.method, self._opts.url, true)
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err)
				})
				return
			}
	
			// Can't set responseType on really old browsers
			if ('responseType' in xhr)
				xhr.responseType = self._mode
	
			if ('withCredentials' in xhr)
				xhr.withCredentials = !!opts.withCredentials
	
			if (self._mode === 'text' && 'overrideMimeType' in xhr)
				xhr.overrideMimeType('text/plain; charset=x-user-defined')
	
			if ('requestTimeout' in opts) {
				xhr.timeout = opts.requestTimeout
				xhr.ontimeout = function () {
					self.emit('requestTimeout')
				}
			}
	
			headersList.forEach(function (header) {
				xhr.setRequestHeader(header[0], header[1])
			})
	
			self._response = null
			xhr.onreadystatechange = function () {
				switch (xhr.readyState) {
					case rStates.LOADING:
					case rStates.DONE:
						self._onXHRProgress()
						break
				}
			}
			// Necessary for streaming in Firefox, since xhr.response is ONLY defined
			// in onprogress, not in onreadystatechange with xhr.readyState = 3
			if (self._mode === 'moz-chunked-arraybuffer') {
				xhr.onprogress = function () {
					self._onXHRProgress()
				}
			}
	
			xhr.onerror = function () {
				if (self._destroyed)
					return
				self._resetTimers(true)
				self.emit('error', new Error('XHR error'))
			}
	
			try {
				xhr.send(body)
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err)
				})
				return
			}
		}
	}
	
	/**
	 * Checks if xhr.status is readable and non-zero, indicating no error.
	 * Even though the spec says it should be available in readyState 3,
	 * accessing it throws an exception in IE8
	 */
	function statusValid (xhr) {
		try {
			var status = xhr.status
			return (status !== null && status !== 0)
		} catch (e) {
			return false
		}
	}
	
	ClientRequest.prototype._onXHRProgress = function () {
		var self = this
	
		self._resetTimers(false)
	
		if (!statusValid(self._xhr) || self._destroyed)
			return
	
		if (!self._response)
			self._connect()
	
		self._response._onXHRProgress(self._resetTimers.bind(self))
	}
	
	ClientRequest.prototype._connect = function () {
		var self = this
	
		if (self._destroyed)
			return
	
		self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self))
		self._response.on('error', function(err) {
			self.emit('error', err)
		})
	
		self.emit('response', self._response)
	}
	
	ClientRequest.prototype._write = function (chunk, encoding, cb) {
		var self = this
	
		self._body.push(chunk)
		cb()
	}
	
	ClientRequest.prototype._resetTimers = function (done) {
		var self = this
	
		global.clearTimeout(self._socketTimer)
		self._socketTimer = null
	
		if (done) {
			global.clearTimeout(self._fetchTimer)
			self._fetchTimer = null
		} else if (self._socketTimeout) {
			self._socketTimer = global.setTimeout(function () {
				self.emit('timeout')
			}, self._socketTimeout)
		}
	}
	
	ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function (err) {
		var self = this
		self._destroyed = true
		self._resetTimers(true)
		if (self._response)
			self._response._destroyed = true
		if (self._xhr)
			self._xhr.abort()
		else if (self._fetchAbortController)
			self._fetchAbortController.abort()
	
		if (err)
			self.emit('error', err)
	}
	
	ClientRequest.prototype.end = function (data, encoding, cb) {
		var self = this
		if (typeof data === 'function') {
			cb = data
			data = undefined
		}
	
		stream.Writable.prototype.end.call(self, data, encoding, cb)
	}
	
	ClientRequest.prototype.setTimeout = function (timeout, cb) {
		var self = this
	
		if (cb)
			self.once('timeout', cb)
	
		self._socketTimeout = timeout
		self._resetTimers(false)
	}
	
	ClientRequest.prototype.flushHeaders = function () {}
	ClientRequest.prototype.setNoDelay = function () {}
	ClientRequest.prototype.setSocketKeepAlive = function () {}
	
	// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
	var unsafeHeaders = [
		'accept-charset',
		'accept-encoding',
		'access-control-request-headers',
		'access-control-request-method',
		'connection',
		'content-length',
		'cookie',
		'cookie2',
		'date',
		'dnt',
		'expect',
		'host',
		'keep-alive',
		'origin',
		'referer',
		'te',
		'trailer',
		'transfer-encoding',
		'upgrade',
		'via'
	]
	
	}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
	},{"./capability":155,"./response":157,"_process":133,"buffer":125,"inherits":130,"readable-stream":172}],157:[function(require,module,exports){
	(function (process,global,Buffer){(function (){
	var capability = require('./capability')
	var inherits = require('inherits')
	var stream = require('readable-stream')
	
	var rStates = exports.readyStates = {
		UNSENT: 0,
		OPENED: 1,
		HEADERS_RECEIVED: 2,
		LOADING: 3,
		DONE: 4
	}
	
	var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode, resetTimers) {
		var self = this
		stream.Readable.call(self)
	
		self._mode = mode
		self.headers = {}
		self.rawHeaders = []
		self.trailers = {}
		self.rawTrailers = []
	
		// Fake the 'close' event, but only once 'end' fires
		self.on('end', function () {
			// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
			process.nextTick(function () {
				self.emit('close')
			})
		})
	
		if (mode === 'fetch') {
			self._fetchResponse = response
	
			self.url = response.url
			self.statusCode = response.status
			self.statusMessage = response.statusText
			
			response.headers.forEach(function (header, key){
				self.headers[key.toLowerCase()] = header
				self.rawHeaders.push(key, header)
			})
	
			if (capability.writableStream) {
				var writable = new WritableStream({
					write: function (chunk) {
						resetTimers(false)
						return new Promise(function (resolve, reject) {
							if (self._destroyed) {
								reject()
							} else if(self.push(Buffer.from(chunk))) {
								resolve()
							} else {
								self._resumeFetch = resolve
							}
						})
					},
					close: function () {
						resetTimers(true)
						if (!self._destroyed)
							self.push(null)
					},
					abort: function (err) {
						resetTimers(true)
						if (!self._destroyed)
							self.emit('error', err)
					}
				})
	
				try {
					response.body.pipeTo(writable).catch(function (err) {
						resetTimers(true)
						if (!self._destroyed)
							self.emit('error', err)
					})
					return
				} catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
			}
			// fallback for when writableStream or pipeTo aren't available
			var reader = response.body.getReader()
			function read () {
				reader.read().then(function (result) {
					if (self._destroyed)
						return
					resetTimers(result.done)
					if (result.done) {
						self.push(null)
						return
					}
					self.push(Buffer.from(result.value))
					read()
				}).catch(function (err) {
					resetTimers(true)
					if (!self._destroyed)
						self.emit('error', err)
				})
			}
			read()
		} else {
			self._xhr = xhr
			self._pos = 0
	
			self.url = xhr.responseURL
			self.statusCode = xhr.status
			self.statusMessage = xhr.statusText
			var headers = xhr.getAllResponseHeaders().split(/\r?\n/)
			headers.forEach(function (header) {
				var matches = header.match(/^([^:]+):\s*(.*)/)
				if (matches) {
					var key = matches[1].toLowerCase()
					if (key === 'set-cookie') {
						if (self.headers[key] === undefined) {
							self.headers[key] = []
						}
						self.headers[key].push(matches[2])
					} else if (self.headers[key] !== undefined) {
						self.headers[key] += ', ' + matches[2]
					} else {
						self.headers[key] = matches[2]
					}
					self.rawHeaders.push(matches[1], matches[2])
				}
			})
	
			self._charset = 'x-user-defined'
			if (!capability.overrideMimeType) {
				var mimeType = self.rawHeaders['mime-type']
				if (mimeType) {
					var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/)
					if (charsetMatch) {
						self._charset = charsetMatch[1].toLowerCase()
					}
				}
				if (!self._charset)
					self._charset = 'utf-8' // best guess
			}
		}
	}
	
	inherits(IncomingMessage, stream.Readable)
	
	IncomingMessage.prototype._read = function () {
		var self = this
	
		var resolve = self._resumeFetch
		if (resolve) {
			self._resumeFetch = null
			resolve()
		}
	}
	
	IncomingMessage.prototype._onXHRProgress = function (resetTimers) {
		var self = this
	
		var xhr = self._xhr
	
		var response = null
		switch (self._mode) {
			case 'text':
				response = xhr.responseText
				if (response.length > self._pos) {
					var newData = response.substr(self._pos)
					if (self._charset === 'x-user-defined') {
						var buffer = Buffer.alloc(newData.length)
						for (var i = 0; i < newData.length; i++)
							buffer[i] = newData.charCodeAt(i) & 0xff
	
						self.push(buffer)
					} else {
						self.push(newData, self._charset)
					}
					self._pos = response.length
				}
				break
			case 'arraybuffer':
				if (xhr.readyState !== rStates.DONE || !xhr.response)
					break
				response = xhr.response
				self.push(Buffer.from(new Uint8Array(response)))
				break
			case 'moz-chunked-arraybuffer': // take whole
				response = xhr.response
				if (xhr.readyState !== rStates.LOADING || !response)
					break
				self.push(Buffer.from(new Uint8Array(response)))
				break
			case 'ms-stream':
				response = xhr.response
				if (xhr.readyState !== rStates.LOADING)
					break
				var reader = new global.MSStreamReader()
				reader.onprogress = function () {
					if (reader.result.byteLength > self._pos) {
						self.push(Buffer.from(new Uint8Array(reader.result.slice(self._pos))))
						self._pos = reader.result.byteLength
					}
				}
				reader.onload = function () {
					resetTimers(true)
					self.push(null)
				}
				// reader.onerror = ??? // TODO: this
				reader.readAsArrayBuffer(response)
				break
		}
	
		// The ms-stream case handles end separately in reader.onload()
		if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
			resetTimers(true)
			self.push(null)
		}
	}
	
	}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer)
	},{"./capability":155,"_process":133,"buffer":125,"inherits":130,"readable-stream":172}],158:[function(require,module,exports){
	arguments[4][74][0].apply(exports,arguments)
	},{"dup":74}],159:[function(require,module,exports){
	arguments[4][75][0].apply(exports,arguments)
	},{"./_stream_readable":161,"./_stream_writable":163,"_process":133,"dup":75,"inherits":130}],160:[function(require,module,exports){
	arguments[4][76][0].apply(exports,arguments)
	},{"./_stream_transform":162,"dup":76,"inherits":130}],161:[function(require,module,exports){
	arguments[4][77][0].apply(exports,arguments)
	},{"../errors":158,"./_stream_duplex":159,"./internal/streams/async_iterator":164,"./internal/streams/buffer_list":165,"./internal/streams/destroy":166,"./internal/streams/from":168,"./internal/streams/state":170,"./internal/streams/stream":171,"_process":133,"buffer":125,"dup":77,"events":127,"inherits":130,"string_decoder/":173,"util":124}],162:[function(require,module,exports){
	arguments[4][78][0].apply(exports,arguments)
	},{"../errors":158,"./_stream_duplex":159,"dup":78,"inherits":130}],163:[function(require,module,exports){
	arguments[4][79][0].apply(exports,arguments)
	},{"../errors":158,"./_stream_duplex":159,"./internal/streams/destroy":166,"./internal/streams/state":170,"./internal/streams/stream":171,"_process":133,"buffer":125,"dup":79,"inherits":130,"util-deprecate":176}],164:[function(require,module,exports){
	arguments[4][80][0].apply(exports,arguments)
	},{"./end-of-stream":167,"_process":133,"dup":80}],165:[function(require,module,exports){
	arguments[4][81][0].apply(exports,arguments)
	},{"buffer":125,"dup":81,"util":124}],166:[function(require,module,exports){
	arguments[4][82][0].apply(exports,arguments)
	},{"_process":133,"dup":82}],167:[function(require,module,exports){
	arguments[4][83][0].apply(exports,arguments)
	},{"../../../errors":158,"dup":83}],168:[function(require,module,exports){
	arguments[4][84][0].apply(exports,arguments)
	},{"dup":84}],169:[function(require,module,exports){
	arguments[4][85][0].apply(exports,arguments)
	},{"../../../errors":158,"./end-of-stream":167,"dup":85}],170:[function(require,module,exports){
	arguments[4][86][0].apply(exports,arguments)
	},{"../../../errors":158,"dup":86}],171:[function(require,module,exports){
	arguments[4][87][0].apply(exports,arguments)
	},{"dup":87,"events":127}],172:[function(require,module,exports){
	arguments[4][88][0].apply(exports,arguments)
	},{"./lib/_stream_duplex.js":159,"./lib/_stream_passthrough.js":160,"./lib/_stream_readable.js":161,"./lib/_stream_transform.js":162,"./lib/_stream_writable.js":163,"./lib/internal/streams/end-of-stream.js":167,"./lib/internal/streams/pipeline.js":169,"dup":88}],173:[function(require,module,exports){
	arguments[4][104][0].apply(exports,arguments)
	},{"dup":104,"safe-buffer":138}],174:[function(require,module,exports){
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var punycode = require('punycode');
	var util = require('./util');
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
		portPattern = /:[0-9]*$/,
	
		// Special case for a simple path URL
		simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
	
		// RFC 2396: characters reserved for delimiting URLs.
		// We actually just auto-escape these.
		delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
		// RFC 2396: characters not allowed for various reasons.
		unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
		// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
		autoEscape = ['\''].concat(unwise),
		// Characters that are never ever allowed in a hostname.
		// Note that any invalid chars are also handled, but these
		// are the ones that are *expected* to be seen, so we fast-path
		// them.
		nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
		hostEndingChars = ['/', '?', '#'],
		hostnameMaxLen = 255,
		hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
		hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
		// protocols that can allow "unsafe" and "unwise" chars.
		unsafeProtocol = {
		  'javascript': true,
		  'javascript:': true
		},
		// protocols that never have a hostname.
		hostlessProtocol = {
		  'javascript': true,
		  'javascript:': true
		},
		// protocols that always contain a // bit.
		slashedProtocol = {
		  'http': true,
		  'https': true,
		  'ftp': true,
		  'gopher': true,
		  'file': true,
		  'http:': true,
		  'https:': true,
		  'ftp:': true,
		  'gopher:': true,
		  'file:': true
		},
		querystring = require('querystring');
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
		throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
		  splitter =
			  (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
		  uSplit = url.split(splitter),
		  slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  if (!slashesDenoteHost && url.split('#').length === 1) {
		// Try fast path regexp
		var simplePath = simplePathPattern.exec(rest);
		if (simplePath) {
		  this.path = rest;
		  this.href = rest;
		  this.pathname = simplePath[1];
		  if (simplePath[2]) {
			this.search = simplePath[2];
			if (parseQueryString) {
			  this.query = querystring.parse(this.search.substr(1));
			} else {
			  this.query = this.search.substr(1);
			}
		  } else if (parseQueryString) {
			this.search = '';
			this.query = {};
		  }
		  return this;
		}
	  }
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
		proto = proto[0];
		var lowerProto = proto.toLowerCase();
		this.protocol = lowerProto;
		rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
		var slashes = rest.substr(0, 2) === '//';
		if (slashes && !(proto && hostlessProtocol[proto])) {
		  rest = rest.substr(2);
		  this.slashes = true;
		}
	  }
	
	  if (!hostlessProtocol[proto] &&
		  (slashes || (proto && !slashedProtocol[proto]))) {
	
		// there's a hostname.
		// the first instance of /, ?, ;, or # ends the host.
		//
		// If there is an @ in the hostname, then non-host chars *are* allowed
		// to the left of the last @ sign, unless some host-ending character
		// comes *before* the @-sign.
		// URLs are obnoxious.
		//
		// ex:
		// http://a@b@c/ => user:a@b host:c
		// http://a@b?@c => user:a host:c path:/?@c
	
		// v0.12 TODO(isaacs): This is not quite how Chrome does things.
		// Review our test case against browsers more comprehensively.
	
		// find the first instance of any hostEndingChars
		var hostEnd = -1;
		for (var i = 0; i < hostEndingChars.length; i++) {
		  var hec = rest.indexOf(hostEndingChars[i]);
		  if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
			hostEnd = hec;
		}
	
		// at this point, either we have an explicit point where the
		// auth portion cannot go past, or the last @ char is the decider.
		var auth, atSign;
		if (hostEnd === -1) {
		  // atSign can be anywhere.
		  atSign = rest.lastIndexOf('@');
		} else {
		  // atSign must be in auth portion.
		  // http://a@b/c@d => host:b auth:a path:/c@d
		  atSign = rest.lastIndexOf('@', hostEnd);
		}
	
		// Now we have a portion which is definitely the auth.
		// Pull that off.
		if (atSign !== -1) {
		  auth = rest.slice(0, atSign);
		  rest = rest.slice(atSign + 1);
		  this.auth = decodeURIComponent(auth);
		}
	
		// the host is the remaining to the left of the first non-host char
		hostEnd = -1;
		for (var i = 0; i < nonHostChars.length; i++) {
		  var hec = rest.indexOf(nonHostChars[i]);
		  if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
			hostEnd = hec;
		}
		// if we still have not hit it, then the entire thing is a host.
		if (hostEnd === -1)
		  hostEnd = rest.length;
	
		this.host = rest.slice(0, hostEnd);
		rest = rest.slice(hostEnd);
	
		// pull out port.
		this.parseHost();
	
		// we've indicated that there is a hostname,
		// so even if it's empty, it has to be present.
		this.hostname = this.hostname || '';
	
		// if hostname begins with [ and ends with ]
		// assume that it's an IPv6 address.
		var ipv6Hostname = this.hostname[0] === '[' &&
			this.hostname[this.hostname.length - 1] === ']';
	
		// validate a little.
		if (!ipv6Hostname) {
		  var hostparts = this.hostname.split(/\./);
		  for (var i = 0, l = hostparts.length; i < l; i++) {
			var part = hostparts[i];
			if (!part) continue;
			if (!part.match(hostnamePartPattern)) {
			  var newpart = '';
			  for (var j = 0, k = part.length; j < k; j++) {
				if (part.charCodeAt(j) > 127) {
				  // we replace non-ASCII char with a temporary placeholder
				  // we need this to make sure size of hostname is not
				  // broken by replacing non-ASCII by nothing
				  newpart += 'x';
				} else {
				  newpart += part[j];
				}
			  }
			  // we test again with ASCII char only
			  if (!newpart.match(hostnamePartPattern)) {
				var validParts = hostparts.slice(0, i);
				var notHost = hostparts.slice(i + 1);
				var bit = part.match(hostnamePartStart);
				if (bit) {
				  validParts.push(bit[1]);
				  notHost.unshift(bit[2]);
				}
				if (notHost.length) {
				  rest = '/' + notHost.join('.') + rest;
				}
				this.hostname = validParts.join('.');
				break;
			  }
			}
		  }
		}
	
		if (this.hostname.length > hostnameMaxLen) {
		  this.hostname = '';
		} else {
		  // hostnames are always lower case.
		  this.hostname = this.hostname.toLowerCase();
		}
	
		if (!ipv6Hostname) {
		  // IDNA Support: Returns a punycoded representation of "domain".
		  // It only converts parts of the domain name that
		  // have non-ASCII characters, i.e. it doesn't matter if
		  // you call it with a domain that already is ASCII-only.
		  this.hostname = punycode.toASCII(this.hostname);
		}
	
		var p = this.port ? ':' + this.port : '';
		var h = this.hostname || '';
		this.host = h + p;
		this.href += this.host;
	
		// strip [ and ] from the hostname
		// the host field still retains them, though
		if (ipv6Hostname) {
		  this.hostname = this.hostname.substr(1, this.hostname.length - 2);
		  if (rest[0] !== '/') {
			rest = '/' + rest;
		  }
		}
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
		// First, make 100% sure that any "autoEscape" chars get
		// escaped, even if encodeURIComponent doesn't think they
		// need to be.
		for (var i = 0, l = autoEscape.length; i < l; i++) {
		  var ae = autoEscape[i];
		  if (rest.indexOf(ae) === -1)
			continue;
		  var esc = encodeURIComponent(ae);
		  if (esc === ae) {
			esc = escape(ae);
		  }
		  rest = rest.split(ae).join(esc);
		}
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
		// got a fragment string.
		this.hash = rest.substr(hash);
		rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
		this.search = rest.substr(qm);
		this.query = rest.substr(qm + 1);
		if (parseQueryString) {
		  this.query = querystring.parse(this.query);
		}
		rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
		// no query string, but parseQueryString still requested
		this.search = '';
		this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
		  this.hostname && !this.pathname) {
		this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
		var p = this.pathname || '';
		var s = this.search || '';
		this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
		auth = encodeURIComponent(auth);
		auth = auth.replace(/%3A/i, ':');
		auth += '@';
	  }
	
	  var protocol = this.protocol || '',
		  pathname = this.pathname || '',
		  hash = this.hash || '',
		  host = false,
		  query = '';
	
	  if (this.host) {
		host = auth + this.host;
	  } else if (this.hostname) {
		host = auth + (this.hostname.indexOf(':') === -1 ?
			this.hostname :
			'[' + this.hostname + ']');
		if (this.port) {
		  host += ':' + this.port;
		}
	  }
	
	  if (this.query &&
		  util.isObject(this.query) &&
		  Object.keys(this.query).length) {
		query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
		  (!protocol || slashedProtocol[protocol]) && host !== false) {
		host = '//' + (host || '');
		if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
		host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
		return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
		var rel = new Url();
		rel.parse(relative, false, true);
		relative = rel;
	  }
	
	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
		var tkey = tkeys[tk];
		result[tkey] = this[tkey];
	  }
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
		result.href = result.format();
		return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
		// take everything except the protocol from relative
		var rkeys = Object.keys(relative);
		for (var rk = 0; rk < rkeys.length; rk++) {
		  var rkey = rkeys[rk];
		  if (rkey !== 'protocol')
			result[rkey] = relative[rkey];
		}
	
		//urlParse appends trailing / to urls like http://www.example.com
		if (slashedProtocol[result.protocol] &&
			result.hostname && !result.pathname) {
		  result.path = result.pathname = '/';
		}
	
		result.href = result.format();
		return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
		// if it's a known url protocol, then changing
		// the protocol does weird things
		// first, if it's not file:, then we MUST have a host,
		// and if there was a path
		// to begin with, then we MUST have a path.
		// if it is file:, then the host is dropped,
		// because that's known to be hostless.
		// anything else is assumed to be absolute.
		if (!slashedProtocol[relative.protocol]) {
		  var keys = Object.keys(relative);
		  for (var v = 0; v < keys.length; v++) {
			var k = keys[v];
			result[k] = relative[k];
		  }
		  result.href = result.format();
		  return result;
		}
	
		result.protocol = relative.protocol;
		if (!relative.host && !hostlessProtocol[relative.protocol]) {
		  var relPath = (relative.pathname || '').split('/');
		  while (relPath.length && !(relative.host = relPath.shift()));
		  if (!relative.host) relative.host = '';
		  if (!relative.hostname) relative.hostname = '';
		  if (relPath[0] !== '') relPath.unshift('');
		  if (relPath.length < 2) relPath.unshift('');
		  result.pathname = relPath.join('/');
		} else {
		  result.pathname = relative.pathname;
		}
		result.search = relative.search;
		result.query = relative.query;
		result.host = relative.host || '';
		result.auth = relative.auth;
		result.hostname = relative.hostname || relative.host;
		result.port = relative.port;
		// to support http.request
		if (result.pathname || result.search) {
		  var p = result.pathname || '';
		  var s = result.search || '';
		  result.path = p + s;
		}
		result.slashes = result.slashes || relative.slashes;
		result.href = result.format();
		return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
		  isRelAbs = (
			  relative.host ||
			  relative.pathname && relative.pathname.charAt(0) === '/'
		  ),
		  mustEndAbs = (isRelAbs || isSourceAbs ||
						(result.host && relative.pathname)),
		  removeAllDots = mustEndAbs,
		  srcPath = result.pathname && result.pathname.split('/') || [],
		  relPath = relative.pathname && relative.pathname.split('/') || [],
		  psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
		result.hostname = '';
		result.port = null;
		if (result.host) {
		  if (srcPath[0] === '') srcPath[0] = result.host;
		  else srcPath.unshift(result.host);
		}
		result.host = '';
		if (relative.protocol) {
		  relative.hostname = null;
		  relative.port = null;
		  if (relative.host) {
			if (relPath[0] === '') relPath[0] = relative.host;
			else relPath.unshift(relative.host);
		  }
		  relative.host = null;
		}
		mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
		// it's absolute.
		result.host = (relative.host || relative.host === '') ?
					  relative.host : result.host;
		result.hostname = (relative.hostname || relative.hostname === '') ?
						  relative.hostname : result.hostname;
		result.search = relative.search;
		result.query = relative.query;
		srcPath = relPath;
		// fall through to the dot-handling below.
	  } else if (relPath.length) {
		// it's relative
		// throw away the existing file, and take the new path instead.
		if (!srcPath) srcPath = [];
		srcPath.pop();
		srcPath = srcPath.concat(relPath);
		result.search = relative.search;
		result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
		// just pull out the search.
		// like href='?foo'.
		// Put this after the other two cases because it simplifies the booleans
		if (psychotic) {
		  result.hostname = result.host = srcPath.shift();
		  //occationaly the auth can get stuck only in host
		  //this especially happens in cases like
		  //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
		  var authInHost = result.host && result.host.indexOf('@') > 0 ?
						   result.host.split('@') : false;
		  if (authInHost) {
			result.auth = authInHost.shift();
			result.host = result.hostname = authInHost.shift();
		  }
		}
		result.search = relative.search;
		result.query = relative.query;
		//to support http.request
		if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
		  result.path = (result.pathname ? result.pathname : '') +
						(result.search ? result.search : '');
		}
		result.href = result.format();
		return result;
	  }
	
	  if (!srcPath.length) {
		// no path at all.  easy.
		// we've already handled the other stuff above.
		result.pathname = null;
		//to support http.request
		if (result.search) {
		  result.path = '/' + result.search;
		} else {
		  result.path = null;
		}
		result.href = result.format();
		return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
		  (result.host || relative.host || srcPath.length > 1) &&
		  (last === '.' || last === '..') || last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
		last = srcPath[i];
		if (last === '.') {
		  srcPath.splice(i, 1);
		} else if (last === '..') {
		  srcPath.splice(i, 1);
		  up++;
		} else if (up) {
		  srcPath.splice(i, 1);
		  up--;
		}
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
		for (; up--; up) {
		  srcPath.unshift('..');
		}
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
		  (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
		srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
		srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
		  (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
		result.hostname = result.host = isAbsolute ? '' :
										srcPath.length ? srcPath.shift() : '';
		//occationaly the auth can get stuck only in host
		//this especially happens in cases like
		//url.resolveObject('mailto:local1@domain1', 'local2@domain2')
		var authInHost = result.host && result.host.indexOf('@') > 0 ?
						 result.host.split('@') : false;
		if (authInHost) {
		  result.auth = authInHost.shift();
		  result.host = result.hostname = authInHost.shift();
		}
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
		srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
		result.pathname = null;
		result.path = null;
	  } else {
		result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
		result.path = (result.pathname ? result.pathname : '') +
					  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
		port = port[0];
		if (port !== ':') {
		  this.port = port.substr(1);
		}
		host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};
	
	},{"./util":175,"punycode":134,"querystring":137}],175:[function(require,module,exports){
	'use strict';
	
	module.exports = {
	  isString: function(arg) {
		return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
		return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
		return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
		return arg == null;
	  }
	};
	
	},{}],176:[function(require,module,exports){
	arguments[4][107][0].apply(exports,arguments)
	},{"dup":107}],177:[function(require,module,exports){
	module.exports = extend
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	function extend() {
		var target = {}
	
		for (var i = 0; i < arguments.length; i++) {
			var source = arguments[i]
	
			for (var key in source) {
				if (hasOwnProperty.call(source, key)) {
					target[key] = source[key]
				}
			}
		}
	
		return target
	}
	
	},{}]},{},[118]);
	